~~~META
description=Variable scoping with var keyword
type=file
~~~SOURCE
module []

# This should cause an error - var not allowed at top level
var topLevelVar_ = 0

# Regular function with var usage
processItems = |items|
    var count_ = 0
    var total_ = 0

    # Reassign vars within same function - should work
    count_ = count_ + 1
    total_ = total_ + 10

    # Nested function - var reassignment should fail across function boundary
    nestedFunc = |_|
        count_ = count_ + 5  # Should cause error - different function
        total_ = total_ * 2  # Should cause error - different function
        count_

    result = nestedFunc({})
    total_ + result

# Function showing var vs regular identifier independence
testFunc = |input|
    sum = input          # Regular identifier
    var sum_ = input * 2 # Var with underscore - should not conflict

    sum_ = sum_ + sum    # Reassign var - should work
    sum + sum_           # Both should be accessible

# Test var redeclaration (should produce shadowing warning)
redeclareTest = |_|
    var x_ = 5
    var x_ = 10  # Redeclare var - should warn but proceed
    x_ = 15      # Reassign - should work without warning
    x_

result = processItems([1, 2, 3])
~~~PROBLEMS
PARSER: var_only_allowed_in_a_body
NOT IMPLEMENTED
This feature is not yet implemented: canonicalize block expression
NOT IMPLEMENTED
Lambda expressions are not yet fully implemented.
NOT IMPLEMENTED
This feature is not yet implemented: canonicalize block expression
NOT IMPLEMENTED
Lambda expressions are not yet fully implemented.
NOT IMPLEMENTED
This feature is not yet implemented: canonicalize block expression
NOT IMPLEMENTED
Lambda expressions are not yet fully implemented.
NOT IMPLEMENTED
This feature is not yet implemented: canonicalize block expression
NOT IMPLEMENTED
Lambda expressions are not yet fully implemented.
~~~TOKENS
KwModule(1:1-1:7),OpenSquare(1:8-1:9),CloseSquare(1:9-1:10),Newline(1:1-1:1),
Newline(1:1-1:1),
Newline(3:2-3:60),
KwVar(4:1-4:4),LowerIdent(4:5-4:17),OpAssign(4:18-4:19),Int(4:20-4:21),Newline(1:1-1:1),
Newline(1:1-1:1),
Newline(6:2-6:34),
LowerIdent(7:1-7:13),OpAssign(7:14-7:15),OpBar(7:16-7:17),LowerIdent(7:17-7:22),OpBar(7:22-7:23),Newline(1:1-1:1),
KwVar(8:5-8:8),LowerIdent(8:9-8:15),OpAssign(8:16-8:17),Int(8:18-8:19),Newline(1:1-1:1),
KwVar(9:5-9:8),LowerIdent(9:9-9:15),OpAssign(9:16-9:17),Int(9:18-9:19),Newline(1:1-1:1),
Newline(1:1-1:1),
Newline(11:6-11:55),
LowerIdent(12:5-12:11),OpAssign(12:12-12:13),LowerIdent(12:14-12:20),OpPlus(12:21-12:22),Int(12:23-12:24),Newline(1:1-1:1),
LowerIdent(13:5-13:11),OpAssign(13:12-13:13),LowerIdent(13:14-13:20),OpPlus(13:21-13:22),Int(13:23-13:25),Newline(1:1-1:1),
Newline(1:1-1:1),
Newline(15:6-15:78),
LowerIdent(16:5-16:15),OpAssign(16:16-16:17),OpBar(16:18-16:19),Underscore(16:19-16:20),OpBar(16:20-16:21),Newline(1:1-1:1),
LowerIdent(17:9-17:15),OpAssign(17:16-17:17),LowerIdent(17:18-17:24),OpPlus(17:25-17:26),Int(17:27-17:28),Newline(17:31-17:71),
LowerIdent(18:9-18:15),OpAssign(18:16-18:17),LowerIdent(18:18-18:24),OpStar(18:25-18:26),Int(18:27-18:28),Newline(18:31-18:71),
LowerIdent(19:9-19:15),Newline(1:1-1:1),
Newline(1:1-1:1),
LowerIdent(21:5-21:11),OpAssign(21:12-21:13),LowerIdent(21:14-21:24),NoSpaceOpenRound(21:24-21:25),OpenCurly(21:25-21:26),CloseCurly(21:26-21:27),CloseRound(21:27-21:28),Newline(1:1-1:1),
LowerIdent(22:5-22:11),OpPlus(22:12-22:13),LowerIdent(22:14-22:20),Newline(1:1-1:1),
Newline(1:1-1:1),
Newline(24:2-24:58),
LowerIdent(25:1-25:9),OpAssign(25:10-25:11),OpBar(25:12-25:13),LowerIdent(25:13-25:18),OpBar(25:18-25:19),Newline(1:1-1:1),
LowerIdent(26:5-26:8),OpAssign(26:9-26:10),LowerIdent(26:11-26:16),Newline(26:27-26:46),
KwVar(27:5-27:8),LowerIdent(27:9-27:13),OpAssign(27:14-27:15),LowerIdent(27:16-27:21),OpStar(27:22-27:23),Int(27:24-27:25),Newline(27:27-27:69),
Newline(1:1-1:1),
LowerIdent(29:5-29:9),OpAssign(29:10-29:11),LowerIdent(29:12-29:16),OpPlus(29:17-29:18),LowerIdent(29:19-29:22),Newline(29:27-29:54),
LowerIdent(30:5-30:8),OpPlus(30:9-30:10),LowerIdent(30:11-30:15),Newline(30:27-30:53),
Newline(1:1-1:1),
Newline(32:2-32:60),
LowerIdent(33:1-33:14),OpAssign(33:15-33:16),OpBar(33:17-33:18),Underscore(33:18-33:19),OpBar(33:19-33:20),Newline(1:1-1:1),
KwVar(34:5-34:8),LowerIdent(34:9-34:11),OpAssign(34:12-34:13),Int(34:14-34:15),Newline(1:1-1:1),
KwVar(35:5-35:8),LowerIdent(35:9-35:11),OpAssign(35:12-35:13),Int(35:14-35:16),Newline(35:19-35:59),
LowerIdent(36:5-36:7),OpAssign(36:8-36:9),Int(36:10-36:12),Newline(36:19-36:58),
LowerIdent(37:5-37:7),Newline(1:1-1:1),
Newline(1:1-1:1),
LowerIdent(39:1-39:7),OpAssign(39:8-39:9),LowerIdent(39:10-39:22),NoSpaceOpenRound(39:22-39:23),OpenSquare(39:23-39:24),Int(39:24-39:25),Comma(39:25-39:26),Int(39:27-39:28),Comma(39:28-39:29),Int(39:30-39:31),CloseSquare(39:31-39:32),CloseRound(39:32-39:33),EndOfFile(39:33-39:33),
~~~PARSE
(file (1:1-39:33)
	(module (1:1-1:10) (exposes (1:8-1:10)))
	(statements
		(malformed_stmt (4:1-4:4) "var_only_allowed_in_a_body")
		(decl (4:5-4:21)
			(ident (4:5-4:17) "topLevelVar_")
			(int (4:20-4:21) "0"))
		(decl (7:1-16:15)
			(ident (7:1-7:13) "processItems")
			(lambda (7:16-16:15)
				(args (ident (7:17-7:22) "items"))
				(block (7:16-16:15)
					(statements
						(var (8:5-9:8)
							(name "count_")
							(int (8:18-8:19) "0"))
						(var (9:5-12:11)
							(name "total_")
							(int (9:18-9:19) "0"))
						(decl (12:5-13:11)
							(ident (12:5-12:11) "count_")
							(binop (12:14-13:11)
								"+"
								(ident (12:14-12:20) "" "count_")
								(int (12:23-12:24) "1")))
						(decl (13:5-16:15)
							(ident (13:5-13:11) "total_")
							(binop (13:14-16:15)
								"+"
								(ident (13:14-13:20) "" "total_")
								(int (13:23-13:25) "10")))))))
		(decl (16:5-25:9)
			(ident (16:5-16:15) "nestedFunc")
			(lambda (16:18-25:9)
				(args (underscore))
				(block (16:18-25:9)
					(statements
						(decl (17:9-18:15)
							(ident (17:9-17:15) "count_")
							(binop (17:18-18:15)
								"+"
								(ident (17:18-17:24) "" "count_")
								(int (17:27-17:28) "5")))
						(decl (18:9-19:15)
							(ident (18:9-18:15) "total_")
							(binop (18:18-19:15)
								"*"
								(ident (18:18-18:24) "" "total_")
								(int (18:27-18:28) "2")))
						(ident (19:9-19:15) "" "count_")
						(decl (21:5-21:28)
							(ident (21:5-21:11) "result")
							(apply (21:14-21:28)
								(ident (21:14-21:24) "" "nestedFunc")
								(record (21:25-21:27))))
						(binop (22:5-25:9)
							"+"
							(ident (22:5-22:11) "" "total_")
							(ident (22:14-22:20) "" "result"))))))
		(decl (25:1-33:14)
			(ident (25:1-25:9) "testFunc")
			(lambda (25:12-33:14)
				(args (ident (25:13-25:18) "input"))
				(block (25:12-33:14)
					(statements
						(decl (26:5-26:16)
							(ident (26:5-26:8) "sum")
							(ident (26:11-26:16) "" "input"))
						(var (27:5-29:9)
							(name "sum_")
							(binop (27:16-29:9)
								"*"
								(ident (27:16-27:21) "" "input")
								(int (27:24-27:25) "2")))
						(decl (29:5-30:8)
							(ident (29:5-29:9) "sum_")
							(binop (29:12-30:8)
								"+"
								(ident (29:12-29:16) "" "sum_")
								(ident (29:19-29:22) "" "sum")))
						(binop (30:5-33:14)
							"+"
							(ident (30:5-30:8) "" "sum")
							(ident (30:11-30:15) "" "sum_"))))))
		(decl (33:1-39:33)
			(ident (33:1-33:14) "redeclareTest")
			(lambda (33:17-39:33)
				(args (underscore))
				(block (33:17-39:33)
					(statements
						(var (34:5-35:8)
							(name "x_")
							(int (34:14-34:15) "5"))
						(var (35:5-36:7)
							(name "x_")
							(int (35:14-35:16) "10"))
						(decl (36:5-36:12)
							(ident (36:5-36:7) "x_")
							(int (36:10-36:12) "15"))
						(ident (37:5-37:7) "" "x_")
						(decl (39:1-39:33)
							(ident (39:1-39:7) "result")
							(apply (39:10-39:33)
								(ident (39:10-39:22) "" "processItems")
								(list (39:23-39:32)
									(int (39:24-39:25) "1")
									(int (39:27-39:28) "2")
									(int (39:30-39:31) "3"))))))))))
~~~FORMATTED
module []

# This should cause an error - var not allowed at top level
topLevelVar_ = 0

# Regular function with var usage
processItems = |items| {
	var count_ = 0
	var total_ = 0

	# Reassign vars within same function - should work
	count_ = count_ + 1
	total_ = total_ + 10

	# Nested function - var reassignment should fail across function boundary
}

# Nested function - var reassignment should fail across function boundary
nestedFunc = |_| {
	count_ = count_ + 5 # Should cause error - different function
	total_ = total_ * 2 # Should cause error - different function
	count_

	result = nestedFunc({})
	total_ + result

	# Function showing var vs regular identifier independence
}

# Function showing var vs regular identifier independence
testFunc = |input| {
	sum = input # Regular identifier
	var sum_ = input * 2 # Var with underscore - should not conflict

	sum_ = sum_ + sum # Reassign var - should work
	sum + sum_ # Both should be accessible

	# Test var redeclaration (should produce shadowing warning)
} # Both should be accessible

# Test var redeclaration (should produce shadowing warning)
redeclareTest = |_| {
	var x_ = 5
	var x_ = 10 # Redeclare var - should warn but proceed
	x_ = 15 # Reassign - should work without warning
	x_

	result = processItems([1, 2, 3])
}
~~~CANONICALIZE
(can_ir
	(top_level_defs
		(def
			"let"
			(pattern (4:5-4:17)
				(assign (4:5-4:17) (ident "topLevelVar_")))
			(expr (4:20-4:21)
				(int (4:20-4:21)
					(int_var "#2")
					(precision_var "#1")
					(literal "0")
					(value "TODO")
					(bound "u8"))))
		(def
			"let"
			(pattern (7:1-7:13)
				(assign (7:1-7:13) (ident "processItems")))
			(expr (7:16-16:15) (runtime_error (7:16-16:15) "can_lambda_not_implemented")))
		(def
			"let"
			(pattern (16:5-16:15)
				(assign (16:5-16:15) (ident "nestedFunc")))
			(expr (16:18-25:9) (runtime_error (16:18-25:9) "can_lambda_not_implemented")))
		(def
			"let"
			(pattern (25:1-25:9)
				(assign (25:1-25:9) (ident "testFunc")))
			(expr (25:12-33:14) (runtime_error (25:12-33:14) "can_lambda_not_implemented")))
		(def
			"let"
			(pattern (33:1-33:14)
				(assign (33:1-33:14) (ident "redeclareTest")))
			(expr (33:17-39:33) (runtime_error (33:17-39:33) "can_lambda_not_implemented")))))
~~~END