procedure List.3 (#Attr.2, #Attr.3):
    let Test.39 = lowlevel ListLen #Attr.2;
    let Test.36 = lowlevel NumLt #Attr.3 Test.39;
    if Test.36 then
        let Test.38 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
        let Test.37 = Ok Test.38;
        ret Test.37;
    else
        let Test.35 = Struct {};
        let Test.34 = Err Test.35;
        ret Test.34;

procedure List.4 (#Attr.2, #Attr.3, #Attr.4):
    let Test.19 = lowlevel ListLen #Attr.2;
    let Test.17 = lowlevel NumLt #Attr.3 Test.19;
    if Test.17 then
        let Test.18 = lowlevel ListSet #Attr.2 #Attr.3 #Attr.4;
        ret Test.18;
    else
        ret #Attr.2;

procedure Test.1 (Test.2, Test.3, Test.4):
    let Test.33 = CallByName List.3 Test.4 Test.3;
    let Test.32 = CallByName List.3 Test.4 Test.2;
    let Test.13 = Struct {Test.32, Test.33};
    joinpoint Test.29:
        let Test.20 = Array [];
        ret Test.20;
    in
    let Test.26 = StructAtIndex 1 Test.13;
    let Test.27 = 1i64;
    let Test.28 = GetTagId Test.26;
    let Test.31 = lowlevel Eq Test.27 Test.28;
    if Test.31 then
        let Test.23 = StructAtIndex 0 Test.13;
        let Test.24 = 1i64;
        let Test.25 = GetTagId Test.23;
        let Test.30 = lowlevel Eq Test.24 Test.25;
        if Test.30 then
            let Test.22 = StructAtIndex 0 Test.13;
            let Test.6 = UnionAtIndex (Id 1) (Index 0) Test.22;
            let Test.21 = StructAtIndex 1 Test.13;
            let Test.7 = UnionAtIndex (Id 1) (Index 0) Test.21;
            let Test.15 = CallByName List.4 Test.4 Test.2 Test.7;
            let Test.14 = CallByName List.4 Test.15 Test.3 Test.6;
            ret Test.14;
        else
            dec Test.4;
            jump Test.29;
    else
        dec Test.4;
        jump Test.29;

procedure Test.0 ():
    let Test.10 = 0i64;
    let Test.11 = 0i64;
    let Test.12 = Array [1i64];
    let Test.9 = CallByName Test.1 Test.10 Test.11 Test.12;
    ret Test.9;
