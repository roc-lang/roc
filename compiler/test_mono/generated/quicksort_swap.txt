procedure List.3 (#Attr.2, #Attr.3):
    let Test.39 = lowlevel ListLen #Attr.2;
    let Test.36 = lowlevel NumLt #Attr.3 Test.39;
    if Test.36 then
        let Test.38 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
        let Test.37 = Ok Test.38;
        ret Test.37;
    else
        let Test.35 = Struct {};
        let Test.34 = Err Test.35;
        ret Test.34;

procedure List.4 (#Attr.2, #Attr.3, #Attr.4):
    let Test.15 = lowlevel ListLen #Attr.2;
    let Test.13 = lowlevel NumLt #Attr.3 Test.15;
    if Test.13 then
        let Test.14 = lowlevel ListSet #Attr.2 #Attr.3 #Attr.4;
        ret Test.14;
    else
        ret #Attr.2;

procedure Test.1 (Test.2):
    let Test.40 = 0i64;
    let Test.32 = CallByName List.3 Test.2 Test.40;
    let Test.33 = 0i64;
    let Test.31 = CallByName List.3 Test.2 Test.33;
    let Test.8 = Struct {Test.31, Test.32};
    joinpoint Test.28:
        let Test.17 = Array [];
        ret Test.17;
    in
    let Test.25 = StructAtIndex 1 Test.8;
    let Test.26 = 1i64;
    let Test.27 = GetTagId Test.25;
    let Test.30 = lowlevel Eq Test.26 Test.27;
    if Test.30 then
        let Test.22 = StructAtIndex 0 Test.8;
        let Test.23 = 1i64;
        let Test.24 = GetTagId Test.22;
        let Test.29 = lowlevel Eq Test.23 Test.24;
        if Test.29 then
            let Test.21 = StructAtIndex 0 Test.8;
            let Test.4 = UnionAtIndex (Id 1) (Index 0) Test.21;
            let Test.20 = StructAtIndex 1 Test.8;
            let Test.5 = UnionAtIndex (Id 1) (Index 0) Test.20;
            let Test.16 = 0i64;
            let Test.10 = CallByName List.4 Test.2 Test.16 Test.5;
            let Test.11 = 0i64;
            let Test.9 = CallByName List.4 Test.10 Test.11 Test.4;
            ret Test.9;
        else
            dec Test.2;
            jump Test.28;
    else
        dec Test.2;
        jump Test.28;

procedure Test.0 ():
    let Test.41 = 1i64;
    let Test.42 = 2i64;
    let Test.7 = Array [Test.41, Test.42];
    let Test.6 = CallByName Test.1 Test.7;
    ret Test.6;
