procedure List.2 (#Attr.2, #Attr.3):
    let List.157 : U64 = lowlevel ListLen #Attr.2;
    let List.154 : Int1 = lowlevel NumLt #Attr.3 List.157;
    if List.154 then
        let List.156 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
        let List.155 : [C {}, C I64] = Ok List.156;
        ret List.155;
    else
        let List.153 : {} = Struct {};
        let List.152 : [C {}, C I64] = Err List.153;
        ret List.152;

procedure List.3 (List.64, List.65, List.66):
    let List.144 : {List I64, I64} = CallByName List.57 List.64 List.65 List.66;
    let List.143 : List I64 = StructAtIndex 0 List.144;
    inc List.143;
    dec List.144;
    ret List.143;

procedure List.57 (#Attr.2, #Attr.3, #Attr.4):
    let List.161 : U64 = lowlevel ListLen #Attr.2;
    let List.159 : Int1 = lowlevel NumLt #Attr.3 List.161;
    if List.159 then
        let List.160 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
        ret List.160;
    else
        let List.158 : {List I64, I64} = Struct {#Attr.2, #Attr.4};
        ret List.158;

procedure Test.1 (Test.2):
    let Test.28 : U64 = 0i64;
    let Test.26 : [C {}, C I64] = CallByName List.2 Test.2 Test.28;
    let Test.27 : U64 = 0i64;
    let Test.25 : [C {}, C I64] = CallByName List.2 Test.2 Test.27;
    let Test.8 : {[C {}, C I64], [C {}, C I64]} = Struct {Test.25, Test.26};
    joinpoint Test.22:
        let Test.13 : List I64 = Array [];
        ret Test.13;
    in
    let Test.19 : [C {}, C I64] = StructAtIndex 1 Test.8;
    let Test.20 : U8 = 1i64;
    let Test.21 : U8 = GetTagId Test.19;
    let Test.24 : Int1 = lowlevel Eq Test.20 Test.21;
    if Test.24 then
        let Test.16 : [C {}, C I64] = StructAtIndex 0 Test.8;
        let Test.17 : U8 = 1i64;
        let Test.18 : U8 = GetTagId Test.16;
        let Test.23 : Int1 = lowlevel Eq Test.17 Test.18;
        if Test.23 then
            let Test.15 : [C {}, C I64] = StructAtIndex 0 Test.8;
            let Test.4 : I64 = UnionAtIndex (Id 1) (Index 0) Test.15;
            let Test.14 : [C {}, C I64] = StructAtIndex 1 Test.8;
            let Test.5 : I64 = UnionAtIndex (Id 1) (Index 0) Test.14;
            let Test.12 : U64 = 0i64;
            let Test.10 : List I64 = CallByName List.3 Test.2 Test.12 Test.5;
            let Test.11 : U64 = 0i64;
            let Test.9 : List I64 = CallByName List.3 Test.10 Test.11 Test.4;
            ret Test.9;
        else
            dec Test.2;
            jump Test.22;
    else
        dec Test.2;
        jump Test.22;

procedure Test.0 ():
    let Test.7 : List I64 = Array [1i64, 2i64];
    let Test.6 : List I64 = CallByName Test.1 Test.7;
    ret Test.6;
