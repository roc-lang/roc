procedure Num.26 (#Attr.2, #Attr.3):
    let Test.17 : Builtin(Int(I64)) = lowlevel NumMul #Attr.2 #Attr.3;
    ret Test.17;

procedure Test.1 (Test.2):
    let Test.24 : Builtin(Bool) = false;
    let Test.25 : Builtin(Bool) = lowlevel Eq Test.24 Test.2;
    if Test.25 then
        let Test.4 : Builtin(Int(I64)) = CallByName Test.4;
        ret Test.4;
    else
        let Test.6 : Builtin(Int(I64)) = CallByName Test.6;
        ret Test.6;

procedure Test.1 (Test.2):
    let Test.30 : Builtin(Bool) = StructAtIndex 1 Test.2;
    let Test.31 : Builtin(Bool) = false;
    let Test.32 : Builtin(Bool) = lowlevel Eq Test.31 Test.30;
    if Test.32 then
        let Test.4 : Builtin(Int(I64)) = StructAtIndex 0 Test.2;
        ret Test.4;
    else
        let Test.6 : Builtin(Int(I64)) = StructAtIndex 0 Test.2;
        ret Test.6;

procedure Test.4 ():
    let Test.21 : Builtin(Int(I64)) = 3i64;
    ret Test.21;

procedure Test.6 ():
    let Test.23 : Builtin(Int(I64)) = 5i64;
    ret Test.23;

procedure Test.0 ():
    let Test.39 : Builtin(Bool) = false;
    let Test.8 : Builtin(Int(I64)) = CallByName Test.1 Test.39;
    let Test.36 : Builtin(Int(I64)) = 7i64;
    let Test.37 : Builtin(Bool) = false;
    let Test.35 : Struct([Builtin(Int(I64)), Builtin(Bool)]) = Struct {Test.36, Test.37};
    let Test.7 : Builtin(Int(I64)) = CallByName Test.1 Test.35;
    let Test.33 : Builtin(Int(I64)) = 11i64;
    let Test.34 : Builtin(Bool) = true;
    let Test.27 : Struct([Builtin(Int(I64)), Builtin(Bool)]) = Struct {Test.33, Test.34};
    let Test.9 : Builtin(Int(I64)) = CallByName Test.1 Test.27;
    let Test.26 : Builtin(Bool) = true;
    let Test.10 : Builtin(Int(I64)) = CallByName Test.1 Test.26;
    let Test.18 : Builtin(Int(I64)) = CallByName Num.26 Test.7 Test.8;
    let Test.16 : Builtin(Int(I64)) = CallByName Num.26 Test.18 Test.9;
    let Test.15 : Builtin(Int(I64)) = CallByName Num.26 Test.16 Test.10;
    ret Test.15;
