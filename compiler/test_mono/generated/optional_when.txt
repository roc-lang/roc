procedure Num.26 (#Attr.2, #Attr.3):
    let Test.17 : Builtin(Int(I64)) = lowlevel NumMul #Attr.2 #Attr.3;
    ret Test.17;

procedure Test.1 (Test.6):
    let Test.22 : Builtin(Bool) = StructAtIndex 1 Test.6;
    let Test.23 : Builtin(Bool) = false;
    let Test.24 : Builtin(Bool) = lowlevel Eq Test.23 Test.22;
    if Test.24 then
        let Test.8 : Builtin(Int(I64)) = StructAtIndex 0 Test.6;
        ret Test.8;
    else
        let Test.10 : Builtin(Int(I64)) = StructAtIndex 0 Test.6;
        ret Test.10;

procedure Test.1 (Test.6):
    let Test.35 : Builtin(Bool) = false;
    let Test.36 : Builtin(Bool) = lowlevel Eq Test.35 Test.6;
    if Test.36 then
        let Test.8 : Builtin(Int(I64)) = CallByName Test.8;
        ret Test.8;
    else
        let Test.10 : Builtin(Int(I64)) = CallByName Test.10;
        ret Test.10;

procedure Test.10 ():
    let Test.34 : Builtin(Int(I64)) = 5i64;
    ret Test.34;

procedure Test.8 ():
    let Test.32 : Builtin(Int(I64)) = 3i64;
    ret Test.32;

procedure Test.0 ():
    let Test.39 : Builtin(Bool) = true;
    let Test.5 : Builtin(Int(I64)) = CallByName Test.1 Test.39;
    let Test.37 : Builtin(Bool) = false;
    let Test.3 : Builtin(Int(I64)) = CallByName Test.1 Test.37;
    let Test.28 : Builtin(Int(I64)) = 11i64;
    let Test.29 : Builtin(Bool) = true;
    let Test.27 : Struct([Builtin(Int(I64)), Builtin(Bool)]) = Struct {Test.28, Test.29};
    let Test.4 : Builtin(Int(I64)) = CallByName Test.1 Test.27;
    let Test.25 : Builtin(Int(I64)) = 7i64;
    let Test.26 : Builtin(Bool) = false;
    let Test.19 : Struct([Builtin(Int(I64)), Builtin(Bool)]) = Struct {Test.25, Test.26};
    let Test.2 : Builtin(Int(I64)) = CallByName Test.1 Test.19;
    let Test.18 : Builtin(Int(I64)) = CallByName Num.26 Test.2 Test.3;
    let Test.16 : Builtin(Int(I64)) = CallByName Num.26 Test.18 Test.4;
    let Test.15 : Builtin(Int(I64)) = CallByName Num.26 Test.16 Test.5;
    ret Test.15;
