## Roc Snapshot System

Roc uses snapshot tests to verify compiler behavior and prevent regressions. Snapshots capture the output of each compilation stage for a given piece of Roc code, making it easy to track changes and catch bugs.

### Managing Snapshots

- **Generate/Update All:** `zig build snapshot`
- **Generate/Update Specific:** `zig build snapshot -- <file_path>`
- **Update EXPECTED from PROBLEMS:** `zig build update-expected -- <file_path>`

### Snapshot File Structure

Each snapshot is a markdown file with the following key sections:

- **META**: Contains `description` and `type`. The `type` can be `file`, `expr`, `statement`, or `header`, depending on the scope of the test.
- **SOURCE**: The Roc code being tested.
- **EXPECTED**: Defines the expected outcome, which can be `NIL`, an error name, or specific output. This can be populated automatically using `zig build update-expected`.
- **Generated Sections**: The tool automatically generates sections like `TOKENS`, `PARSE`, `CANONICALIZE`, `TYPES`, and `PROBLEMS`.

### Best Practices for Creating Snapshots

1.  **Focused Intent**: Each snapshot should test a single, specific compiler behavior. This is useful for new features, error cases, edge cases, and regression prevention.
2.  **Minimal Complexity**: Use the simplest possible code to demonstrate the behavior you are testing. Consider using `...` ellipsis which is valid syntax for "not implemented", and commonly used in examples.
3.  **Clear Naming**: The file name should clearly describe the test's purpose (e.g., `can_list_type_mismatch.md` is better than `test1.md`).

### Debugging with Snapshots

Snapshots are powerful for debugging as they show the compiler's output at every stage:
`SOURCE` -> `TOKENS` -> `PARSE` -> `CANONICALIZE` -> `TYPES`.

The `PROBLEMS` section provides human-readable diagnostics. When you modify the compiler, run `zig build snapshot` and review the diffs to ensure the changes are intentional before committing them.
