# +emit:mono
app "test" provides [main] to "./platform"

Op := {}

late = \a ->
    dbg a
    1

main =
    late (@Op {})

# -emit:mono
procedure Inspect.255 (Inspect.256):
    let Inspect.320 : Str = "<opaque>";
    let Inspect.319 : Str = CallByName Inspect.63 Inspect.256 Inspect.320;
    dec Inspect.320;
    ret Inspect.319;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.33 (Inspect.152):
    let Inspect.308 : Str = CallByName Inspect.5 Inspect.152;
    let Inspect.307 : Str = CallByName Inspect.64 Inspect.308;
    ret Inspect.307;

procedure Inspect.39 (Inspect.304):
    let Inspect.314 : Str = "";
    ret Inspect.314;

procedure Inspect.48 (Inspect.302):
    let Inspect.317 : {} = Struct {};
    let Inspect.316 : {} = CallByName Inspect.30 Inspect.317;
    ret Inspect.316;

procedure Inspect.5 (Inspect.150):
    let Inspect.315 : {} = CallByName Inspect.48 Inspect.150;
    let Inspect.312 : {} = Struct {};
    let Inspect.311 : Str = CallByName Inspect.39 Inspect.312;
    let Inspect.310 : Str = CallByName Inspect.255 Inspect.311;
    ret Inspect.310;

procedure Inspect.63 (Inspect.303, Inspect.299):
    let Inspect.322 : Str = CallByName Str.3 Inspect.303 Inspect.299;
    ret Inspect.322;

procedure Inspect.64 (Inspect.305):
    ret Inspect.305;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.246 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.246;

procedure Test.2 (Test.3):
    let Test.4 : Str = CallByName Inspect.33 Test.3;
    dbg Test.4;
    dec Test.4;
    let Test.7 : I64 = 1i64;
    ret Test.7;

procedure Test.0 ():
    let Test.6 : {} = Struct {};
    let Test.5 : I64 = CallByName Test.2 Test.6;
    ret Test.5;
