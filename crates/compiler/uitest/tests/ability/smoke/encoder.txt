app "test" provides [my_u8_bytes] to "./platform"

MEncoder fmt := List U8, fmt -> List U8 where fmt implements Format

MEncoding implements
  to_encoder : val -> MEncoder fmt where val implements MEncoding, fmt implements Format

Format implements
  u8 : U8 -> MEncoder fmt where fmt implements Format

append_with : List U8, MEncoder fmt, fmt -> List U8 where fmt implements Format
append_with = \lst, (@MEncoder doFormat), fmt -> doFormat lst fmt

to_bytes : val, fmt -> List U8 where val implements MEncoding, fmt implements Format
to_bytes = \val, fmt -> append_with [] (to_encoder val) fmt


Linear := {} implements [Format {u8}]

u8 = \n -> @MEncoder (\lst, @Linear {} -> List.append lst n)
#^^{-1} Linear#u8(10): U8 -[[u8(10)]]-> MEncoder Linear

MyU8 := U8 implements [MEncoding {to_encoder}]

to_encoder = \@MyU8 n -> u8 n
#^^^^^^^^^^{-1} MyU8#to_encoder(11): MyU8 -[[to_encoder(11)]]-> MEncoder fmt where fmt implements Format

my_u8_bytes = to_bytes (@MyU8 15) (@Linear {})
#^^^^^^^^^^^{-1} List U8
