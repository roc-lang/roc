app "test" provides [my_u8] to "./platform"

MDecodeError : [TooShort, Leftover (List U8)]

MDecoder val fmt := List U8, fmt -> { result: Result val MDecodeError, rest: List U8 } where fmt implements MDecoderFormatting

MDecoding implements
    decoder : MDecoder val fmt where val implements MDecoding, fmt implements MDecoderFormatting

MDecoderFormatting implements
    u8 : MDecoder U8 fmt where fmt implements MDecoderFormatting

decode_with : List U8, MDecoder val fmt, fmt -> { result: Result val MDecodeError, rest: List U8 } where fmt implements MDecoderFormatting
decode_with = \lst, (@MDecoder doDecode), fmt -> doDecode lst fmt

from_bytes : List U8, fmt -> Result val MDecodeError
            where fmt implements MDecoderFormatting, val implements MDecoding
from_bytes = \lst, fmt ->
    when decode_with lst decoder fmt is
        { result, rest } ->
            when result is
                Ok val -> if List.is_empty rest then Ok val else Err (Leftover rest)
                Err e -> Err e


Linear := {} implements [MDecoderFormatting {u8}]

u8 = @MDecoder \lst, @Linear {} ->
#^^{-1} Linear#u8(11): MDecoder U8 Linear
        when List.first lst is
            Ok n -> { result: Ok n, rest: List.drop_first lst 1 }
            Err _ -> { result: Err TooShort, rest: [] }

MyU8 := U8 implements [MDecoding {decoder}]

decoder = @MDecoder \lst, fmt ->
#^^^^^^^{-1} MyU8#decoder(12): MDecoder MyU8 fmt where fmt implements MDecoderFormatting
    when decode_with lst u8 fmt is
        { result, rest } ->
            { result: Result.map_ok result (\n -> @MyU8 n), rest }

my_u8 : Result MyU8 _
my_u8 = from_bytes [15] (@Linear {})
#^^^^^{-1} Result MyU8 MDecodeError
