procedure List.103 (Bool.21, Bool.22, Bool.23, Bool.24, Bool.25):
    joinpoint List.700 List.178 List.179 List.180 List.181 List.182:
        let List.702 : Int1 = CallByName Num.22 List.181 List.182;
        if List.702 then
            let List.706 : [] = CallByName List.66 List.178 List.181;
            let List.183 : List [] = CallByName List.296 List.179 List.706 List.180;
            let List.705 : U64 = 1i64;
            let List.704 : U64 = CallByName Num.51 List.181 List.705;
            jump List.700 List.178 List.183 List.180 List.704 List.182;
        else
            dec List.178;
            ret List.179;
    in
    inc Bool.21;
    jump List.700 Bool.21 Bool.22 Bool.23 Bool.24 Bool.25;

procedure List.18 (List.175, List.176, List.177):
    let List.698 : U64 = 0i64;
    let List.699 : U64 = CallByName List.6 List.175;
    let List.697 : List [] = CallByName List.103 List.175 List.176 List.177 List.698 List.699;
    ret List.697;

procedure List.296 (List.297, List.298, List.294):
    let List.711 : [] = CallByName Test.2 List.298;
    let List.710 : List [] = CallByName List.71 List.297 List.711;
    ret List.710;

procedure List.5 (List.293, List.294):
    let List.295 : U64 = CallByName List.6 List.293;
    let List.695 : List [] = CallByName List.68 List.295;
    let List.694 : List [] = CallByName List.18 List.293 List.695 List.294;
    ret List.694;

procedure List.6 (#Attr.2):
    let List.708 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.708;

procedure List.66 (#Attr.2, #Attr.3):
    let List.707 : [] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.707;

procedure List.68 (#Attr.2):
    let List.713 : List [] = lowlevel ListWithCapacity #Attr.2;
    ret List.713;

procedure List.71 (#Attr.2, #Attr.3):
    let List.712 : List [] = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.712;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.290 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.290;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.289 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.289;

procedure Test.2 (Test.3):
    let Test.7 : {} = Struct {};
    let Test.8 : Str = "a Lambda Set is empty. Most likely there is a type error in your program.";
    Crash Test.8

procedure Test.0 ():
    let Test.1 : List [] = Array [];
    let Test.5 : {} = Struct {};
    let Test.4 : List [] = CallByName List.5 Test.1 Test.5;
    dec Test.1;
    ret Test.4;
