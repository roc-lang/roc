procedure List.100 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.665 List.174 List.175 List.176 List.177 List.178:
        let List.667 : Int1 = CallByName Num.22 List.177 List.178;
        if List.667 then
            let List.671 : [] = CallByName List.66 List.174 List.177;
            let List.179 : List [] = CallByName List.283 List.175 List.671 List.176;
            let List.670 : U64 = 1i64;
            let List.669 : U64 = CallByName Num.51 List.177 List.670;
            jump List.665 List.174 List.179 List.176 List.669 List.178;
        else
            dec List.174;
            ret List.175;
    in
    inc #Derived_gen.0;
    jump List.665 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure List.18 (List.171, List.172, List.173):
    let List.663 : U64 = 0i64;
    let List.664 : U64 = CallByName List.6 List.171;
    let List.662 : List [] = CallByName List.100 List.171 List.172 List.173 List.663 List.664;
    ret List.662;

procedure List.283 (List.284, List.285, List.281):
    let List.676 : [] = CallByName Test.2 List.285;
    let List.675 : List [] = CallByName List.71 List.284 List.676;
    ret List.675;

procedure List.5 (List.280, List.281):
    let List.282 : U64 = CallByName List.6 List.280;
    let List.660 : List [] = CallByName List.68 List.282;
    let List.659 : List [] = CallByName List.18 List.280 List.660 List.281;
    ret List.659;

procedure List.6 (#Attr.2):
    let List.673 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.673;

procedure List.66 (#Attr.2, #Attr.3):
    let List.672 : [] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.672;

procedure List.68 (#Attr.2):
    let List.678 : List [] = lowlevel ListWithCapacity #Attr.2;
    ret List.678;

procedure List.71 (#Attr.2, #Attr.3):
    let List.677 : List [] = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.677;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.286 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.286;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.285 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.285;

procedure Test.2 (Test.3):
    let Test.7 : {} = Struct {};
    let Test.8 : Str = "a Lambda Set is empty. Most likely there is a type error in your program.";
    Crash Test.8

procedure Test.0 ():
    let Test.1 : List [] = Array [];
    let Test.5 : {} = Struct {};
    let Test.4 : List [] = CallByName List.5 Test.1 Test.5;
    dec Test.1;
    ret Test.4;
