procedure List.101 (Bool.21, Bool.22, Bool.23, Bool.24, Bool.25):
    joinpoint List.681 List.175 List.176 List.177 List.178 List.179:
        let List.683 : Int1 = CallByName Num.22 List.178 List.179;
        if List.683 then
            let List.687 : [] = CallByName List.66 List.175 List.178;
            let List.180 : List [] = CallByName List.284 List.176 List.687 List.177;
            let List.686 : U64 = 1i64;
            let List.685 : U64 = CallByName Num.51 List.178 List.686;
            jump List.681 List.175 List.180 List.177 List.685 List.179;
        else
            dec List.175;
            ret List.176;
    in
    inc Bool.21;
    jump List.681 Bool.21 Bool.22 Bool.23 Bool.24 Bool.25;

procedure List.18 (List.172, List.173, List.174):
    let List.679 : U64 = 0i64;
    let List.680 : U64 = CallByName List.6 List.172;
    let List.678 : List [] = CallByName List.101 List.172 List.173 List.174 List.679 List.680;
    ret List.678;

procedure List.284 (List.285, List.286, List.282):
    let List.692 : [] = CallByName Test.2 List.286;
    let List.691 : List [] = CallByName List.71 List.285 List.692;
    ret List.691;

procedure List.5 (List.281, List.282):
    let List.283 : U64 = CallByName List.6 List.281;
    let List.676 : List [] = CallByName List.68 List.283;
    let List.675 : List [] = CallByName List.18 List.281 List.676 List.282;
    ret List.675;

procedure List.6 (#Attr.2):
    let List.689 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.689;

procedure List.66 (#Attr.2, #Attr.3):
    let List.688 : [] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.688;

procedure List.68 (#Attr.2):
    let List.694 : List [] = lowlevel ListWithCapacity #Attr.2;
    ret List.694;

procedure List.71 (#Attr.2, #Attr.3):
    let List.693 : List [] = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.693;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.284 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.284;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.283 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.283;

procedure Test.2 (Test.3):
    let Test.7 : {} = Struct {};
    let Test.8 : Str = "a Lambda Set is empty. Most likely there is a type error in your program.";
    Crash Test.8

procedure Test.0 ():
    let Test.1 : List [] = Array [];
    let Test.5 : {} = Struct {};
    let Test.4 : List [] = CallByName List.5 Test.1 Test.5;
    dec Test.1;
    ret Test.4;
