procedure Bool.1 ():
    let Bool.23 : Int1 = false;
    ret Bool.23;

procedure Bool.2 ():
    let Bool.22 : Int1 = true;
    ret Bool.22;

procedure List.110 (Bool.30, Bool.31, Bool.32, Bool.33, Bool.34, Bool.35):
    joinpoint List.740 List.304 List.305 List.306 List.307 List.308 List.309:
        let List.742 : Int1 = CallByName Num.22 List.308 List.309;
        if List.742 then
            let List.748 : [<r>C I64, C List *self] = CallByName List.66 List.304 List.308;
            inc List.748;
            let List.749 : [<r>C I64, C List *self] = CallByName List.66 List.305 List.308;
            inc List.749;
            let List.310 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = CallByName Test.15 List.748 List.749;
            let List.744 : List {[<r>C I64, C List *self], [<r>C I64, C List *self]} = CallByName List.71 List.306 List.310;
            let List.746 : U64 = 1i64;
            let List.745 : U64 = CallByName Num.51 List.308 List.746;
            jump List.740 List.304 List.305 List.744 List.307 List.745 List.309;
        else
            dec List.304;
            dec List.305;
            ret List.306;
    in
    inc Bool.30;
    inc Bool.31;
    jump List.740 Bool.30 Bool.31 Bool.32 Bool.33 Bool.34 Bool.35;

procedure List.120 (List.590, List.591, List.592):
    let List.716 : U64 = 0i64;
    let List.717 : U64 = CallByName List.6 List.590;
    let List.715 : [C {}, C {}] = CallByName List.80 List.590 List.591 List.592 List.716 List.717;
    ret List.715;

procedure List.23 (List.300, List.301, List.302):
    let List.752 : U64 = CallByName List.6 List.300;
    let List.753 : U64 = CallByName List.6 List.301;
    let List.303 : U64 = CallByName Num.148 List.752 List.753;
    let List.738 : List {[<r>C I64, C List *self], [<r>C I64, C List *self]} = CallByName List.68 List.303;
    let List.739 : U64 = 0i64;
    let List.737 : List {[<r>C I64, C List *self], [<r>C I64, C List *self]} = CallByName List.110 List.300 List.301 List.738 List.302 List.739 List.303;
    ret List.737;

procedure List.252 (List.704, List.253, List.251):
    let List.734 : Int1 = CallByName Test.1 List.253;
    if List.734 then
        let List.736 : {} = Struct {};
        let List.735 : [C {}, C {}] = TagId(1) List.736;
        ret List.735;
    else
        let List.733 : {} = Struct {};
        let List.732 : [C {}, C {}] = TagId(0) List.733;
        ret List.732;

procedure List.56 (List.250, List.251):
    let List.713 : {} = Struct {};
    let List.705 : [C {}, C {}] = CallByName List.120 List.250 List.713 List.251;
    let List.710 : U8 = 1i64;
    let List.711 : U8 = GetTagId List.705;
    let List.712 : Int1 = lowlevel Eq List.710 List.711;
    if List.712 then
        let List.706 : Int1 = CallByName Bool.2;
        ret List.706;
    else
        let List.707 : Int1 = CallByName Bool.1;
        ret List.707;

procedure List.6 (#Attr.2):
    let List.703 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.703;

procedure List.6 (#Attr.2):
    let List.731 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.731;

procedure List.66 (#Attr.2, #Attr.3):
    let List.730 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.730;

procedure List.66 (#Attr.2, #Attr.3):
    let List.750 : [<r>C I64, C List *self] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.750;

procedure List.68 (#Attr.2):
    let List.751 : List {[<r>C I64, C List *self], [<r>C I64, C List *self]} = lowlevel ListWithCapacity #Attr.2;
    ret List.751;

procedure List.71 (#Attr.2, #Attr.3):
    let List.747 : List {[<r>C I64, C List *self], [<r>C I64, C List *self]} = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.747;

procedure List.80 (Bool.25, Bool.26, Bool.27, Bool.28, Bool.29):
    joinpoint List.718 List.593 List.594 List.595 List.596 List.597:
        let List.720 : Int1 = CallByName Num.22 List.596 List.597;
        if List.720 then
            let List.729 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = CallByName List.66 List.593 List.596;
            inc List.729;
            let List.721 : [C {}, C {}] = CallByName List.252 List.594 List.729 List.595;
            let List.726 : U8 = 1i64;
            let List.727 : U8 = GetTagId List.721;
            let List.728 : Int1 = lowlevel Eq List.726 List.727;
            if List.728 then
                let List.598 : {} = UnionAtIndex (Id 1) (Index 0) List.721;
                let List.724 : U64 = 1i64;
                let List.723 : U64 = CallByName Num.51 List.596 List.724;
                jump List.718 List.593 List.598 List.595 List.723 List.597;
            else
                dec List.593;
                let List.599 : {} = UnionAtIndex (Id 0) (Index 0) List.721;
                let List.725 : [C {}, C {}] = TagId(0) List.599;
                ret List.725;
        else
            dec List.593;
            let List.719 : [C {}, C {}] = TagId(1) List.594;
            ret List.719;
    in
    inc Bool.25;
    jump List.718 Bool.25 Bool.26 Bool.27 Bool.28 Bool.29;

procedure Num.148 (Num.232, Num.233):
    let Num.296 : Int1 = CallByName Num.22 Num.232 Num.233;
    if Num.296 then
        ret Num.232;
    else
        ret Num.233;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.289 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.289;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.294 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.294;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.292 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.292;

procedure Test.1 (Bool.24):
    joinpoint Test.26 Test.6:
        let Test.65 : [<r>C I64, C List *self] = StructAtIndex 1 Test.6;
        let Test.66 : U8 = 0i64;
        let Test.67 : U8 = GetTagId Test.65;
        let Test.68 : Int1 = lowlevel Eq Test.66 Test.67;
        if Test.68 then
            let Test.57 : [<r>C I64, C List *self] = StructAtIndex 0 Test.6;
            let Test.58 : U8 = 0i64;
            let Test.59 : U8 = GetTagId Test.57;
            let Test.60 : Int1 = lowlevel Eq Test.58 Test.59;
            if Test.60 then
                let Test.50 : [<r>C I64, C List *self] = StructAtIndex 0 Test.6;
                let Test.8 : I64 = UnionAtIndex (Id 0) (Index 0) Test.50;
                let Test.49 : [<r>C I64, C List *self] = StructAtIndex 1 Test.6;
                dec Test.50;
                let Test.10 : I64 = UnionAtIndex (Id 0) (Index 0) Test.49;
                joinpoint Bool.36:
                    let Test.27 : Int1 = CallByName Num.22 Test.8 Test.10;
                    ret Test.27;
                in
                let Bool.37 : Int1 = lowlevel RefCountIsUnique Test.49;
                if Bool.37 then
                    free Test.49;
                    jump Bool.36;
                else
                    decref Test.49;
                    jump Bool.36;
            else
                let Test.39 : [<r>C I64, C List *self] = StructAtIndex 0 Test.6;
                let Test.42 : [<r>C I64, C List *self] = StructAtIndex 1 Test.6;
                let Test.41 : List [<r>C I64, C List *self] = Array [Test.42];
                let Test.40 : [<r>C I64, C List *self] = TagId(1) Test.41;
                let Test.38 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = Struct {Test.39, Test.40};
                jump Test.26 Test.38;
        else
            let Test.61 : [<r>C I64, C List *self] = StructAtIndex 0 Test.6;
            let Test.62 : U8 = 1i64;
            let Test.63 : U8 = GetTagId Test.61;
            let Test.64 : Int1 = lowlevel Eq Test.62 Test.63;
            if Test.64 then
                let Test.52 : [<r>C I64, C List *self] = StructAtIndex 0 Test.6;
                let Test.12 : List [<r>C I64, C List *self] = UnionAtIndex (Id 1) (Index 0) Test.52;
                inc Test.12;
                let Test.51 : [<r>C I64, C List *self] = StructAtIndex 1 Test.6;
                dec Test.52;
                let Test.14 : List [<r>C I64, C List *self] = UnionAtIndex (Id 1) (Index 0) Test.51;
                joinpoint Bool.38:
                    let Test.35 : {} = Struct {};
                    let Test.33 : List {[<r>C I64, C List *self], [<r>C I64, C List *self]} = CallByName List.23 Test.12 Test.14 Test.35;
                    let Test.34 : {} = Struct {};
                    let Test.29 : Int1 = CallByName List.56 Test.33 Test.34;
                    dec Test.33;
                    if Test.29 then
                        let Test.31 : U64 = CallByName List.6 Test.12;
                        dec Test.12;
                        let Test.32 : U64 = CallByName List.6 Test.14;
                        dec Test.14;
                        let Test.30 : Int1 = CallByName Num.22 Test.31 Test.32;
                        ret Test.30;
                    else
                        dec Test.12;
                        dec Test.14;
                        let Test.28 : Int1 = CallByName Bool.1;
                        ret Test.28;
                in
                let Bool.39 : Int1 = lowlevel RefCountIsUnique Test.51;
                if Bool.39 then
                    free Test.51;
                    jump Bool.38;
                else
                    inc Test.14;
                    decref Test.51;
                    jump Bool.38;
            else
                let Test.48 : [<r>C I64, C List *self] = StructAtIndex 0 Test.6;
                let Test.47 : List [<r>C I64, C List *self] = Array [Test.48];
                let Test.45 : [<r>C I64, C List *self] = TagId(1) Test.47;
                let Test.46 : [<r>C I64, C List *self] = StructAtIndex 1 Test.6;
                let Test.44 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = Struct {Test.45, Test.46};
                jump Test.26 Test.44;
    in
    jump Test.26 Bool.24;

procedure Test.15 (Test.16, Test.17):
    let Test.36 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = Struct {Test.16, Test.17};
    ret Test.36;

procedure Test.0 ():
    let Test.76 : I64 = 10i64;
    let Test.75 : [<r>C I64, C List *self] = TagId(0) Test.76;
    let Test.74 : List [<r>C I64, C List *self] = Array [Test.75];
    let Test.69 : [<r>C I64, C List *self] = TagId(1) Test.74;
    let Test.73 : I64 = 20i64;
    let Test.72 : [<r>C I64, C List *self] = TagId(0) Test.73;
    let Test.71 : List [<r>C I64, C List *self] = Array [Test.72];
    let Test.70 : [<r>C I64, C List *self] = TagId(1) Test.71;
    let Test.25 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = Struct {Test.69, Test.70};
    let Test.24 : Int1 = CallByName Test.1 Test.25;
    ret Test.24;
