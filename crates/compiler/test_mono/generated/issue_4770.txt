procedure Bool.1 ():
    let Bool.23 : Int1 = false;
    ret Bool.23;

procedure Bool.2 ():
    let Bool.22 : Int1 = true;
    ret Bool.22;

procedure List.107 (Bool.30, Bool.31, Bool.32, Bool.33, Bool.34, Bool.35):
    joinpoint List.721 List.292 List.293 List.294 List.295 List.296 List.297:
        let List.723 : Int1 = CallByName Num.22 List.296 List.297;
        if List.723 then
            let List.729 : [<r>C I64, C List *self] = CallByName List.66 List.292 List.296;
            inc List.729;
            let List.730 : [<r>C I64, C List *self] = CallByName List.66 List.293 List.296;
            inc List.730;
            let List.298 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = CallByName Test.15 List.729 List.730;
            let List.725 : List {[<r>C I64, C List *self], [<r>C I64, C List *self]} = CallByName List.71 List.294 List.298;
            let List.727 : U64 = 1i64;
            let List.726 : U64 = CallByName Num.51 List.296 List.727;
            jump List.721 List.292 List.293 List.725 List.295 List.726 List.297;
        else
            dec List.292;
            dec List.293;
            ret List.294;
    in
    inc Bool.30;
    inc Bool.31;
    jump List.721 Bool.30 Bool.31 Bool.32 Bool.33 Bool.34 Bool.35;

procedure List.117 (List.571, List.572, List.573):
    let List.697 : U64 = 0i64;
    let List.698 : U64 = CallByName List.6 List.571;
    let List.696 : [C {}, C {}] = CallByName List.80 List.571 List.572 List.573 List.697 List.698;
    ret List.696;

procedure List.23 (List.288, List.289, List.290):
    let List.733 : U64 = CallByName List.6 List.288;
    let List.734 : U64 = CallByName List.6 List.289;
    let List.291 : U64 = CallByName Num.148 List.733 List.734;
    let List.719 : List {[<r>C I64, C List *self], [<r>C I64, C List *self]} = CallByName List.68 List.291;
    let List.720 : U64 = 0i64;
    let List.718 : List {[<r>C I64, C List *self], [<r>C I64, C List *self]} = CallByName List.107 List.288 List.289 List.719 List.290 List.720 List.291;
    ret List.718;

procedure List.249 (List.685, List.250, List.248):
    let List.715 : Int1 = CallByName Test.1 List.250;
    if List.715 then
        let List.717 : {} = Struct {};
        let List.716 : [C {}, C {}] = TagId(1) List.717;
        ret List.716;
    else
        let List.714 : {} = Struct {};
        let List.713 : [C {}, C {}] = TagId(0) List.714;
        ret List.713;

procedure List.56 (List.247, List.248):
    let List.694 : {} = Struct {};
    let List.686 : [C {}, C {}] = CallByName List.117 List.247 List.694 List.248;
    let List.691 : U8 = 1i64;
    let List.692 : U8 = GetTagId List.686;
    let List.693 : Int1 = lowlevel Eq List.691 List.692;
    if List.693 then
        let List.687 : Int1 = CallByName Bool.2;
        ret List.687;
    else
        let List.688 : Int1 = CallByName Bool.1;
        ret List.688;

procedure List.6 (#Attr.2):
    let List.684 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.684;

procedure List.6 (#Attr.2):
    let List.712 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.712;

procedure List.66 (#Attr.2, #Attr.3):
    let List.711 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.711;

procedure List.66 (#Attr.2, #Attr.3):
    let List.731 : [<r>C I64, C List *self] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.731;

procedure List.68 (#Attr.2):
    let List.732 : List {[<r>C I64, C List *self], [<r>C I64, C List *self]} = lowlevel ListWithCapacity #Attr.2;
    ret List.732;

procedure List.71 (#Attr.2, #Attr.3):
    let List.728 : List {[<r>C I64, C List *self], [<r>C I64, C List *self]} = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.728;

procedure List.80 (Bool.25, Bool.26, Bool.27, Bool.28, Bool.29):
    joinpoint List.699 List.574 List.575 List.576 List.577 List.578:
        let List.701 : Int1 = CallByName Num.22 List.577 List.578;
        if List.701 then
            let List.710 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = CallByName List.66 List.574 List.577;
            inc List.710;
            let List.702 : [C {}, C {}] = CallByName List.249 List.575 List.710 List.576;
            let List.707 : U8 = 1i64;
            let List.708 : U8 = GetTagId List.702;
            let List.709 : Int1 = lowlevel Eq List.707 List.708;
            if List.709 then
                let List.579 : {} = UnionAtIndex (Id 1) (Index 0) List.702;
                let List.705 : U64 = 1i64;
                let List.704 : U64 = CallByName Num.51 List.577 List.705;
                jump List.699 List.574 List.579 List.576 List.704 List.578;
            else
                dec List.574;
                let List.580 : {} = UnionAtIndex (Id 0) (Index 0) List.702;
                let List.706 : [C {}, C {}] = TagId(0) List.580;
                ret List.706;
        else
            dec List.574;
            let List.700 : [C {}, C {}] = TagId(1) List.575;
            ret List.700;
    in
    inc Bool.25;
    jump List.699 Bool.25 Bool.26 Bool.27 Bool.28 Bool.29;

procedure Num.148 (Num.232, Num.233):
    let Num.296 : Int1 = CallByName Num.22 Num.232 Num.233;
    if Num.296 then
        ret Num.232;
    else
        ret Num.233;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.289 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.289;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.294 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.294;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.292 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.292;

procedure Test.1 (Bool.24):
    joinpoint Test.26 Test.6:
        let Test.65 : [<r>C I64, C List *self] = StructAtIndex 1 Test.6;
        let Test.66 : U8 = 0i64;
        let Test.67 : U8 = GetTagId Test.65;
        let Test.68 : Int1 = lowlevel Eq Test.66 Test.67;
        if Test.68 then
            let Test.57 : [<r>C I64, C List *self] = StructAtIndex 0 Test.6;
            let Test.58 : U8 = 0i64;
            let Test.59 : U8 = GetTagId Test.57;
            let Test.60 : Int1 = lowlevel Eq Test.58 Test.59;
            if Test.60 then
                let Test.50 : [<r>C I64, C List *self] = StructAtIndex 0 Test.6;
                let Test.8 : I64 = UnionAtIndex (Id 0) (Index 0) Test.50;
                let Test.49 : [<r>C I64, C List *self] = StructAtIndex 1 Test.6;
                dec Test.50;
                let Test.10 : I64 = UnionAtIndex (Id 0) (Index 0) Test.49;
                joinpoint Bool.36:
                    let Test.27 : Int1 = CallByName Num.22 Test.8 Test.10;
                    ret Test.27;
                in
                let Bool.37 : Int1 = lowlevel RefCountIsUnique Test.49;
                if Bool.37 then
                    free Test.49;
                    jump Bool.36;
                else
                    decref Test.49;
                    jump Bool.36;
            else
                let Test.39 : [<r>C I64, C List *self] = StructAtIndex 0 Test.6;
                let Test.42 : [<r>C I64, C List *self] = StructAtIndex 1 Test.6;
                let Test.41 : List [<r>C I64, C List *self] = Array [Test.42];
                let Test.40 : [<r>C I64, C List *self] = TagId(1) Test.41;
                let Test.38 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = Struct {Test.39, Test.40};
                jump Test.26 Test.38;
        else
            let Test.61 : [<r>C I64, C List *self] = StructAtIndex 0 Test.6;
            let Test.62 : U8 = 1i64;
            let Test.63 : U8 = GetTagId Test.61;
            let Test.64 : Int1 = lowlevel Eq Test.62 Test.63;
            if Test.64 then
                let Test.52 : [<r>C I64, C List *self] = StructAtIndex 0 Test.6;
                let Test.12 : List [<r>C I64, C List *self] = UnionAtIndex (Id 1) (Index 0) Test.52;
                inc Test.12;
                let Test.51 : [<r>C I64, C List *self] = StructAtIndex 1 Test.6;
                dec Test.52;
                let Test.14 : List [<r>C I64, C List *self] = UnionAtIndex (Id 1) (Index 0) Test.51;
                joinpoint Bool.38:
                    let Test.35 : {} = Struct {};
                    let Test.33 : List {[<r>C I64, C List *self], [<r>C I64, C List *self]} = CallByName List.23 Test.12 Test.14 Test.35;
                    let Test.34 : {} = Struct {};
                    let Test.29 : Int1 = CallByName List.56 Test.33 Test.34;
                    dec Test.33;
                    if Test.29 then
                        let Test.31 : U64 = CallByName List.6 Test.12;
                        dec Test.12;
                        let Test.32 : U64 = CallByName List.6 Test.14;
                        dec Test.14;
                        let Test.30 : Int1 = CallByName Num.22 Test.31 Test.32;
                        ret Test.30;
                    else
                        dec Test.12;
                        dec Test.14;
                        let Test.28 : Int1 = CallByName Bool.1;
                        ret Test.28;
                in
                let Bool.39 : Int1 = lowlevel RefCountIsUnique Test.51;
                if Bool.39 then
                    free Test.51;
                    jump Bool.38;
                else
                    inc Test.14;
                    decref Test.51;
                    jump Bool.38;
            else
                let Test.48 : [<r>C I64, C List *self] = StructAtIndex 0 Test.6;
                let Test.47 : List [<r>C I64, C List *self] = Array [Test.48];
                let Test.45 : [<r>C I64, C List *self] = TagId(1) Test.47;
                let Test.46 : [<r>C I64, C List *self] = StructAtIndex 1 Test.6;
                let Test.44 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = Struct {Test.45, Test.46};
                jump Test.26 Test.44;
    in
    jump Test.26 Bool.24;

procedure Test.15 (Test.16, Test.17):
    let Test.36 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = Struct {Test.16, Test.17};
    ret Test.36;

procedure Test.0 ():
    let Test.76 : I64 = 10i64;
    let Test.75 : [<r>C I64, C List *self] = TagId(0) Test.76;
    let Test.74 : List [<r>C I64, C List *self] = Array [Test.75];
    let Test.69 : [<r>C I64, C List *self] = TagId(1) Test.74;
    let Test.73 : I64 = 20i64;
    let Test.72 : [<r>C I64, C List *self] = TagId(0) Test.73;
    let Test.71 : List [<r>C I64, C List *self] = Array [Test.72];
    let Test.70 : [<r>C I64, C List *self] = TagId(1) Test.71;
    let Test.25 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = Struct {Test.69, Test.70};
    let Test.24 : Int1 = CallByName Test.1 Test.25;
    ret Test.24;
