procedure Bool.1 ():
    let Bool.25 : Int1 = false;
    ret Bool.25;

procedure Bool.2 ():
    let Bool.24 : Int1 = true;
    ret Bool.24;

procedure List.207 (List.537, List.208, List.206):
    let List.567 : Int1 = CallByName Test.1 List.208;
    if List.567 then
        let List.569 : {} = Struct {};
        let List.568 : [C {}, C {}] = TagId(1) List.569;
        ret List.568;
    else
        let List.566 : {} = Struct {};
        let List.565 : [C {}, C {}] = TagId(0) List.566;
        ret List.565;

procedure List.23 (#Attr.2, #Attr.3, #Attr.4):
    let List.570 : List {[<r>C I64, C List *self], [<r>C I64, C List *self]} = lowlevel ListMap2 { xs: `#Attr.#arg1`, ys: `#Attr.#arg2` } #Attr.2 #Attr.3 Test.15 #Attr.4;
    decref #Attr.3;
    decref #Attr.2;
    ret List.570;

procedure List.56 (List.205, List.206):
    let List.546 : {} = Struct {};
    let List.538 : [C {}, C {}] = CallByName List.96 List.205 List.546 List.206;
    let List.543 : U8 = 1i64;
    let List.544 : U8 = GetTagId List.538;
    let List.545 : Int1 = lowlevel Eq List.543 List.544;
    if List.545 then
        let List.539 : Int1 = CallByName Bool.2;
        ret List.539;
    else
        let List.540 : Int1 = CallByName Bool.1;
        ret List.540;

procedure List.6 (#Attr.2):
    let List.536 : U64 = lowlevel ListLen #Attr.2;
    ret List.536;

procedure List.6 (#Attr.2):
    let List.564 : U64 = lowlevel ListLen #Attr.2;
    ret List.564;

procedure List.66 (#Attr.2, #Attr.3):
    let List.563 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.563;

procedure List.80 (#Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4, #Derived_gen.5):
    joinpoint List.551 List.453 List.454 List.455 List.456 List.457:
        let List.553 : Int1 = CallByName Num.22 List.456 List.457;
        if List.553 then
            let List.562 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = CallByName List.66 List.453 List.456;
            inc List.562;
            let List.554 : [C {}, C {}] = CallByName List.207 List.454 List.562 List.455;
            let List.559 : U8 = 1i64;
            let List.560 : U8 = GetTagId List.554;
            let List.561 : Int1 = lowlevel Eq List.559 List.560;
            if List.561 then
                let List.458 : {} = UnionAtIndex (Id 1) (Index 0) List.554;
                let List.557 : U64 = 1i64;
                let List.556 : U64 = CallByName Num.51 List.456 List.557;
                jump List.551 List.453 List.458 List.455 List.556 List.457;
            else
                dec List.453;
                let List.459 : {} = UnionAtIndex (Id 0) (Index 0) List.554;
                let List.558 : [C {}, C {}] = TagId(0) List.459;
                ret List.558;
        else
            dec List.453;
            let List.552 : [C {}, C {}] = TagId(1) List.454;
            ret List.552;
    in
    jump List.551 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4 #Derived_gen.5;

procedure List.96 (List.450, List.451, List.452):
    let List.549 : U64 = 0i64;
    let List.550 : U64 = CallByName List.6 List.450;
    let List.548 : [C {}, C {}] = CallByName List.80 List.450 List.451 List.452 List.549 List.550;
    ret List.548;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.292 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.292;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.295 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.295;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.294 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.294;

procedure Test.1 (#Derived_gen.0):
    joinpoint Test.26 Test.6:
        let Test.65 : [<r>C I64, C List *self] = StructAtIndex 1 Test.6;
        let Test.66 : U8 = 0i64;
        let Test.67 : U8 = GetTagId Test.65;
        let Test.68 : Int1 = lowlevel Eq Test.66 Test.67;
        if Test.68 then
            let Test.57 : [<r>C I64, C List *self] = StructAtIndex 0 Test.6;
            let Test.58 : U8 = 0i64;
            let Test.59 : U8 = GetTagId Test.57;
            let Test.60 : Int1 = lowlevel Eq Test.58 Test.59;
            if Test.60 then
                let Test.50 : [<r>C I64, C List *self] = StructAtIndex 0 Test.6;
                let Test.8 : I64 = UnionAtIndex (Id 0) (Index 0) Test.50;
                let Test.49 : [<r>C I64, C List *self] = StructAtIndex 1 Test.6;
                dec Test.50;
                let Test.10 : I64 = UnionAtIndex (Id 0) (Index 0) Test.49;
                joinpoint #Derived_gen.6:
                    let Test.27 : Int1 = CallByName Num.22 Test.8 Test.10;
                    ret Test.27;
                in
                let #Derived_gen.7 : Int1 = lowlevel RefCountIsUnique Test.49;
                if #Derived_gen.7 then
                    free Test.49;
                    jump #Derived_gen.6;
                else
                    decref Test.49;
                    jump #Derived_gen.6;
            else
                let Test.39 : [<r>C I64, C List *self] = StructAtIndex 0 Test.6;
                let Test.42 : [<r>C I64, C List *self] = StructAtIndex 1 Test.6;
                let Test.41 : List [<r>C I64, C List *self] = Array [Test.42];
                let Test.40 : [<r>C I64, C List *self] = TagId(1) Test.41;
                let Test.38 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = Struct {Test.39, Test.40};
                jump Test.26 Test.38;
        else
            let Test.61 : [<r>C I64, C List *self] = StructAtIndex 0 Test.6;
            let Test.62 : U8 = 1i64;
            let Test.63 : U8 = GetTagId Test.61;
            let Test.64 : Int1 = lowlevel Eq Test.62 Test.63;
            if Test.64 then
                let Test.52 : [<r>C I64, C List *self] = StructAtIndex 0 Test.6;
                let Test.12 : List [<r>C I64, C List *self] = UnionAtIndex (Id 1) (Index 0) Test.52;
                inc 2 Test.12;
                let Test.51 : [<r>C I64, C List *self] = StructAtIndex 1 Test.6;
                dec Test.52;
                let Test.14 : List [<r>C I64, C List *self] = UnionAtIndex (Id 1) (Index 0) Test.51;
                inc Test.14;
                joinpoint #Derived_gen.8:
                    let Test.35 : {} = Struct {};
                    let Test.33 : List {[<r>C I64, C List *self], [<r>C I64, C List *self]} = CallByName List.23 Test.12 Test.14 Test.35;
                    let Test.34 : {} = Struct {};
                    let Test.29 : Int1 = CallByName List.56 Test.33 Test.34;
                    if Test.29 then
                        let Test.31 : U64 = CallByName List.6 Test.12;
                        dec Test.12;
                        let Test.32 : U64 = CallByName List.6 Test.14;
                        dec Test.14;
                        let Test.30 : Int1 = CallByName Num.22 Test.31 Test.32;
                        ret Test.30;
                    else
                        dec Test.12;
                        dec Test.14;
                        let Test.28 : Int1 = CallByName Bool.1;
                        ret Test.28;
                in
                let #Derived_gen.9 : Int1 = lowlevel RefCountIsUnique Test.51;
                if #Derived_gen.9 then
                    free Test.51;
                    jump #Derived_gen.8;
                else
                    inc Test.14;
                    decref Test.51;
                    jump #Derived_gen.8;
            else
                let Test.48 : [<r>C I64, C List *self] = StructAtIndex 0 Test.6;
                let Test.47 : List [<r>C I64, C List *self] = Array [Test.48];
                let Test.45 : [<r>C I64, C List *self] = TagId(1) Test.47;
                let Test.46 : [<r>C I64, C List *self] = StructAtIndex 1 Test.6;
                let Test.44 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = Struct {Test.45, Test.46};
                jump Test.26 Test.44;
    in
    jump Test.26 #Derived_gen.0;

procedure Test.15 (Test.16, Test.17):
    let Test.36 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = Struct {Test.16, Test.17};
    ret Test.36;

procedure Test.0 ():
    let Test.76 : I64 = 10i64;
    let Test.75 : [<r>C I64, C List *self] = TagId(0) Test.76;
    let Test.74 : List [<r>C I64, C List *self] = Array [Test.75];
    let Test.69 : [<r>C I64, C List *self] = TagId(1) Test.74;
    let Test.73 : I64 = 20i64;
    let Test.72 : [<r>C I64, C List *self] = TagId(0) Test.73;
    let Test.71 : List [<r>C I64, C List *self] = Array [Test.72];
    let Test.70 : [<r>C I64, C List *self] = TagId(1) Test.71;
    let Test.25 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = Struct {Test.69, Test.70};
    let Test.24 : Int1 = CallByName Test.1 Test.25;
    ret Test.24;
