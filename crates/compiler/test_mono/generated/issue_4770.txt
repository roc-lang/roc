procedure Bool.1 ():
    let Bool.25 : Int1 = false;
    ret Bool.25;

procedure Bool.2 ():
    let Bool.24 : Int1 = true;
    ret Bool.24;

procedure List.105 (#Derived_gen.6, #Derived_gen.7, #Derived_gen.8, #Derived_gen.9, #Derived_gen.10, #Derived_gen.11):
    joinpoint List.697 List.290 List.291 List.292 List.293 List.294 List.295:
        let List.699 : Int1 = CallByName Num.22 List.294 List.295;
        if List.699 then
            let List.705 : [<r>C I64, C List *self] = CallByName List.66 List.290 List.294;
            inc List.705;
            let List.706 : [<r>C I64, C List *self] = CallByName List.66 List.291 List.294;
            inc List.706;
            let List.296 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = CallByName Test.15 List.705 List.706;
            let List.701 : List {[<r>C I64, C List *self], [<r>C I64, C List *self]} = CallByName List.71 List.292 List.296;
            let List.703 : U64 = 1i64;
            let List.702 : U64 = CallByName Num.51 List.294 List.703;
            jump List.697 List.290 List.291 List.701 List.293 List.702 List.295;
        else
            dec List.291;
            dec List.290;
            ret List.292;
    in
    inc #Derived_gen.6;
    inc #Derived_gen.7;
    jump List.697 #Derived_gen.6 #Derived_gen.7 #Derived_gen.8 #Derived_gen.9 #Derived_gen.10 #Derived_gen.11;

procedure List.115 (List.562, List.563, List.564):
    let List.673 : U64 = 0i64;
    let List.674 : U64 = CallByName List.6 List.562;
    let List.672 : [C {}, C {}] = CallByName List.80 List.562 List.563 List.564 List.673 List.674;
    ret List.672;

procedure List.23 (List.286, List.287, List.288):
    let List.709 : U64 = CallByName List.6 List.286;
    let List.710 : U64 = CallByName List.6 List.287;
    let List.289 : U64 = CallByName Num.148 List.709 List.710;
    let List.695 : List {[<r>C I64, C List *self], [<r>C I64, C List *self]} = CallByName List.68 List.289;
    let List.696 : U64 = 0i64;
    let List.694 : List {[<r>C I64, C List *self], [<r>C I64, C List *self]} = CallByName List.105 List.286 List.287 List.695 List.288 List.696 List.289;
    ret List.694;

procedure List.247 (List.661, List.248, List.246):
    let List.691 : Int1 = CallByName Test.1 List.248;
    if List.691 then
        let List.693 : {} = Struct {};
        let List.692 : [C {}, C {}] = TagId(1) List.693;
        ret List.692;
    else
        let List.690 : {} = Struct {};
        let List.689 : [C {}, C {}] = TagId(0) List.690;
        ret List.689;

procedure List.56 (List.245, List.246):
    let List.670 : {} = Struct {};
    let List.662 : [C {}, C {}] = CallByName List.115 List.245 List.670 List.246;
    let List.667 : U8 = 1i64;
    let List.668 : U8 = GetTagId List.662;
    let List.669 : Int1 = lowlevel Eq List.667 List.668;
    if List.669 then
        let List.663 : Int1 = CallByName Bool.2;
        ret List.663;
    else
        let List.664 : Int1 = CallByName Bool.1;
        ret List.664;

procedure List.6 (#Attr.2):
    let List.660 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.660;

procedure List.6 (#Attr.2):
    let List.688 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.688;

procedure List.66 (#Attr.2, #Attr.3):
    let List.687 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.687;

procedure List.66 (#Attr.2, #Attr.3):
    let List.707 : [<r>C I64, C List *self] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.707;

procedure List.68 (#Attr.2):
    let List.708 : List {[<r>C I64, C List *self], [<r>C I64, C List *self]} = lowlevel ListWithCapacity #Attr.2;
    ret List.708;

procedure List.71 (#Attr.2, #Attr.3):
    let List.704 : List {[<r>C I64, C List *self], [<r>C I64, C List *self]} = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.704;

procedure List.80 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.675 List.565 List.566 List.567 List.568 List.569:
        let List.677 : Int1 = CallByName Num.22 List.568 List.569;
        if List.677 then
            let List.686 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = CallByName List.66 List.565 List.568;
            inc List.686;
            let List.678 : [C {}, C {}] = CallByName List.247 List.566 List.686 List.567;
            let List.683 : U8 = 1i64;
            let List.684 : U8 = GetTagId List.678;
            let List.685 : Int1 = lowlevel Eq List.683 List.684;
            if List.685 then
                let List.570 : {} = UnionAtIndex (Id 1) (Index 0) List.678;
                let List.681 : U64 = 1i64;
                let List.680 : U64 = CallByName Num.51 List.568 List.681;
                jump List.675 List.565 List.570 List.567 List.680 List.569;
            else
                dec List.565;
                let List.571 : {} = UnionAtIndex (Id 0) (Index 0) List.678;
                let List.682 : [C {}, C {}] = TagId(0) List.571;
                ret List.682;
        else
            dec List.565;
            let List.676 : [C {}, C {}] = TagId(1) List.566;
            ret List.676;
    in
    inc #Derived_gen.0;
    jump List.675 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.148 (Num.229, Num.230):
    let Num.292 : Int1 = CallByName Num.22 Num.229 Num.230;
    if Num.292 then
        ret Num.229;
    else
        ret Num.230;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.285 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.285;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.290 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.290;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.288 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.288;

procedure Test.1 (#Derived_gen.5):
    joinpoint Test.26 Test.6:
        let Test.65 : [<r>C I64, C List *self] = StructAtIndex 1 Test.6;
        let Test.66 : U8 = 0i64;
        let Test.67 : U8 = GetTagId Test.65;
        let Test.68 : Int1 = lowlevel Eq Test.66 Test.67;
        if Test.68 then
            let Test.57 : [<r>C I64, C List *self] = StructAtIndex 0 Test.6;
            let Test.58 : U8 = 0i64;
            let Test.59 : U8 = GetTagId Test.57;
            let Test.60 : Int1 = lowlevel Eq Test.58 Test.59;
            if Test.60 then
                let Test.50 : [<r>C I64, C List *self] = StructAtIndex 0 Test.6;
                let Test.8 : I64 = UnionAtIndex (Id 0) (Index 0) Test.50;
                let Test.49 : [<r>C I64, C List *self] = StructAtIndex 1 Test.6;
                dec Test.50;
                let Test.10 : I64 = UnionAtIndex (Id 0) (Index 0) Test.49;
                joinpoint #Derived_gen.12:
                    let Test.27 : Int1 = CallByName Num.22 Test.8 Test.10;
                    ret Test.27;
                in
                let #Derived_gen.13 : Int1 = lowlevel RefCountIsUnique Test.49;
                if #Derived_gen.13 then
                    free Test.49;
                    jump #Derived_gen.12;
                else
                    decref Test.49;
                    jump #Derived_gen.12;
            else
                let Test.39 : [<r>C I64, C List *self] = StructAtIndex 0 Test.6;
                let Test.42 : [<r>C I64, C List *self] = StructAtIndex 1 Test.6;
                let Test.41 : List [<r>C I64, C List *self] = Array [Test.42];
                let Test.40 : [<r>C I64, C List *self] = TagId(1) Test.41;
                let Test.38 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = Struct {Test.39, Test.40};
                jump Test.26 Test.38;
        else
            let Test.61 : [<r>C I64, C List *self] = StructAtIndex 0 Test.6;
            let Test.62 : U8 = 1i64;
            let Test.63 : U8 = GetTagId Test.61;
            let Test.64 : Int1 = lowlevel Eq Test.62 Test.63;
            if Test.64 then
                let Test.52 : [<r>C I64, C List *self] = StructAtIndex 0 Test.6;
                let Test.12 : List [<r>C I64, C List *self] = UnionAtIndex (Id 1) (Index 0) Test.52;
                inc Test.12;
                let Test.51 : [<r>C I64, C List *self] = StructAtIndex 1 Test.6;
                dec Test.52;
                let Test.14 : List [<r>C I64, C List *self] = UnionAtIndex (Id 1) (Index 0) Test.51;
                joinpoint #Derived_gen.14:
                    let Test.35 : {} = Struct {};
                    let Test.33 : List {[<r>C I64, C List *self], [<r>C I64, C List *self]} = CallByName List.23 Test.12 Test.14 Test.35;
                    let Test.34 : {} = Struct {};
                    let Test.29 : Int1 = CallByName List.56 Test.33 Test.34;
                    dec Test.33;
                    if Test.29 then
                        let Test.31 : U64 = CallByName List.6 Test.12;
                        dec Test.12;
                        let Test.32 : U64 = CallByName List.6 Test.14;
                        dec Test.14;
                        let Test.30 : Int1 = CallByName Num.22 Test.31 Test.32;
                        ret Test.30;
                    else
                        dec Test.12;
                        dec Test.14;
                        let Test.28 : Int1 = CallByName Bool.1;
                        ret Test.28;
                in
                let #Derived_gen.15 : Int1 = lowlevel RefCountIsUnique Test.51;
                if #Derived_gen.15 then
                    free Test.51;
                    jump #Derived_gen.14;
                else
                    inc Test.14;
                    decref Test.51;
                    jump #Derived_gen.14;
            else
                let Test.48 : [<r>C I64, C List *self] = StructAtIndex 0 Test.6;
                let Test.47 : List [<r>C I64, C List *self] = Array [Test.48];
                let Test.45 : [<r>C I64, C List *self] = TagId(1) Test.47;
                let Test.46 : [<r>C I64, C List *self] = StructAtIndex 1 Test.6;
                let Test.44 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = Struct {Test.45, Test.46};
                jump Test.26 Test.44;
    in
    jump Test.26 #Derived_gen.5;

procedure Test.15 (Test.16, Test.17):
    let Test.36 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = Struct {Test.16, Test.17};
    ret Test.36;

procedure Test.0 ():
    let Test.76 : I64 = 10i64;
    let Test.75 : [<r>C I64, C List *self] = TagId(0) Test.76;
    let Test.74 : List [<r>C I64, C List *self] = Array [Test.75];
    let Test.69 : [<r>C I64, C List *self] = TagId(1) Test.74;
    let Test.73 : I64 = 20i64;
    let Test.72 : [<r>C I64, C List *self] = TagId(0) Test.73;
    let Test.71 : List [<r>C I64, C List *self] = Array [Test.72];
    let Test.70 : [<r>C I64, C List *self] = TagId(1) Test.71;
    let Test.25 : {[<r>C I64, C List *self], [<r>C I64, C List *self]} = Struct {Test.69, Test.70};
    let Test.24 : Int1 = CallByName Test.1 Test.25;
    ret Test.24;
