procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Inspect.30 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.1):
    let #Derived_gen.7 : Str = "a";
    let #Derived_gen.8 : Str = CallByName Inspect.47 #Derived.1;
    let #Derived_gen.6 : {Str, Str} = Struct {#Derived_gen.7, #Derived_gen.8};
    let #Derived_gen.5 : List {Str, Str} = Array [#Derived_gen.6];
    let #Derived_gen.4 : List {Str, Str} = CallByName Inspect.45 #Derived_gen.5;
    let #Derived_gen.3 : Str = CallByName Inspect.31 #Derived_gen.4 #Derived.3;
    dec #Derived_gen.4;
    ret #Derived_gen.3;

procedure Bool.1 ():
    let Bool.24 : Int1 = false;
    ret Bool.24;

procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Inspect.229 (Inspect.230, Inspect.228):
    let Inspect.352 : Str = "{";
    let Inspect.328 : Str = CallByName Inspect.63 Inspect.230 Inspect.352;
    dec Inspect.352;
    let Inspect.324 : {Str, Int1} = CallByName Inspect.231 Inspect.328 Inspect.228;
    dec Inspect.328;
    let Inspect.325 : {} = Struct {};
    let Inspect.320 : Str = CallByName Inspect.243 Inspect.324;
    let Inspect.321 : Str = "}";
    let Inspect.319 : Str = CallByName Inspect.63 Inspect.320 Inspect.321;
    dec Inspect.321;
    ret Inspect.319;

procedure Inspect.231 (Inspect.232, Inspect.228):
    let Inspect.351 : Int1 = CallByName Bool.1;
    inc Inspect.232;
    let Inspect.332 : {Str, Int1} = Struct {Inspect.232, Inspect.351};
    let Inspect.333 : {} = Struct {};
    let Inspect.331 : {Str, Int1} = CallByName List.18 Inspect.228 Inspect.332 Inspect.333;
    ret Inspect.331;

procedure Inspect.233 (Inspect.334, Inspect.335):
    let Inspect.236 : Str = StructAtIndex 0 Inspect.335;
    let Inspect.237 : Str = StructAtIndex 1 Inspect.335;
    let Inspect.234 : Str = StructAtIndex 0 Inspect.334;
    let Inspect.235 : Int1 = StructAtIndex 1 Inspect.334;
    joinpoint Inspect.349 Inspect.238:
        let Inspect.346 : Str = CallByName Inspect.63 Inspect.238 Inspect.236;
        dec Inspect.236;
        let Inspect.347 : Str = ": ";
        let Inspect.341 : Str = CallByName Inspect.63 Inspect.346 Inspect.347;
        dec Inspect.347;
        let Inspect.337 : Str = CallByName Inspect.239 Inspect.341 Inspect.237;
        dec Inspect.237;
        let Inspect.338 : {} = Struct {};
        let Inspect.336 : {Str, Int1} = CallByName Inspect.241 Inspect.337;
        dec Inspect.337;
        ret Inspect.336;
    in
    if Inspect.235 then
        let Inspect.350 : Str = ", ";
        let Inspect.348 : Str = CallByName Inspect.63 Inspect.234 Inspect.350;
        dec Inspect.350;
        jump Inspect.349 Inspect.348;
    else
        jump Inspect.349 Inspect.234;

procedure Inspect.239 (Inspect.240, Inspect.237):
    let Inspect.344 : Str = CallByName Inspect.31 Inspect.237 Inspect.240;
    ret Inspect.344;

procedure Inspect.241 (Inspect.242):
    let Inspect.340 : Int1 = CallByName Bool.2;
    inc Inspect.242;
    let Inspect.339 : {Str, Int1} = Struct {Inspect.242, Inspect.340};
    ret Inspect.339;

procedure Inspect.243 (Inspect.326):
    let Inspect.327 : Str = StructAtIndex 0 Inspect.326;
    ret Inspect.327;

procedure Inspect.250 (Inspect.251, Inspect.249):
    let Inspect.361 : Str = "\"";
    let Inspect.360 : Str = CallByName Inspect.63 Inspect.251 Inspect.361;
    dec Inspect.361;
    let Inspect.358 : Str = CallByName Inspect.63 Inspect.360 Inspect.249;
    let Inspect.359 : Str = "\"";
    let Inspect.357 : Str = CallByName Inspect.63 Inspect.358 Inspect.359;
    dec Inspect.359;
    ret Inspect.357;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.31 (Inspect.303, Inspect.149):
    let Inspect.314 : Str = CallByName Inspect.229 Inspect.149 Inspect.303;
    ret Inspect.314;

procedure Inspect.31 (Inspect.303, Inspect.149):
    let Inspect.345 : Str = CallByName Inspect.250 Inspect.149 Inspect.303;
    ret Inspect.345;

procedure Inspect.33 (Inspect.152):
    let Inspect.305 : Str = CallByName Inspect.5 Inspect.152;
    let Inspect.304 : Str = CallByName Inspect.64 Inspect.305;
    ret Inspect.304;

procedure Inspect.39 (Inspect.301):
    let Inspect.311 : Str = "";
    ret Inspect.311;

procedure Inspect.45 (Inspect.228):
    let Inspect.315 : List {Str, Str} = CallByName Inspect.30 Inspect.228;
    ret Inspect.315;

procedure Inspect.47 (Inspect.249):
    let Inspect.353 : Str = CallByName Inspect.30 Inspect.249;
    ret Inspect.353;

procedure Inspect.5 (Inspect.150):
    let Inspect.312 : Str = CallByName #Derived.0 Inspect.150;
    let Inspect.309 : {} = Struct {};
    let Inspect.308 : Str = CallByName Inspect.39 Inspect.309;
    let Inspect.307 : Str = CallByName #Derived.2 Inspect.308 Inspect.312;
    ret Inspect.307;

procedure Inspect.63 (Inspect.300, Inspect.296):
    let Inspect.323 : Str = CallByName Str.3 Inspect.300 Inspect.296;
    ret Inspect.323;

procedure Inspect.64 (Inspect.302):
    ret Inspect.302;

procedure List.100 (#Derived_gen.12, #Derived_gen.13, #Derived_gen.14, #Derived_gen.15, #Derived_gen.16):
    joinpoint List.662 List.174 List.175 List.176 List.177 List.178:
        let List.664 : Int1 = CallByName Num.22 List.177 List.178;
        if List.664 then
            let List.668 : {Str, Str} = CallByName List.66 List.174 List.177;
            inc List.668;
            let List.179 : {Str, Int1} = CallByName Inspect.233 List.175 List.668;
            let List.667 : U64 = 1i64;
            let List.666 : U64 = CallByName Num.51 List.177 List.667;
            jump List.662 List.174 List.179 List.176 List.666 List.178;
        else
            dec List.174;
            ret List.175;
    in
    inc #Derived_gen.12;
    jump List.662 #Derived_gen.12 #Derived_gen.13 #Derived_gen.14 #Derived_gen.15 #Derived_gen.16;

procedure List.18 (List.171, List.172, List.173):
    let List.660 : U64 = 0i64;
    let List.661 : U64 = CallByName List.6 List.171;
    let List.659 : {Str, Int1} = CallByName List.100 List.171 List.172 List.173 List.660 List.661;
    ret List.659;

procedure List.6 (#Attr.2):
    let List.670 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.670;

procedure List.66 (#Attr.2, #Attr.3):
    let List.669 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.669;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.286 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.286;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.285 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.285;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.246 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.246;

procedure Test.0 ():
    let Test.3 : Str = "foo";
    let Test.1 : Str = CallByName Inspect.33 Test.3;
    ret Test.1;
