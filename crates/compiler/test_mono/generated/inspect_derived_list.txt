procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : List I64 = CallByName Inspect.30 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.3 (#Derived.2):
    let #Derived_gen.7 : I64 = CallByName Inspect.57 #Derived.2;
    ret #Derived_gen.7;

procedure #Derived.4 (#Derived.5, #Derived.1):
    let #Derived_gen.5 : {} = Struct {};
    let #Derived_gen.6 : {} = Struct {};
    let #Derived_gen.4 : {List I64, {}, {}} = CallByName Inspect.40 #Derived.1 #Derived_gen.5 #Derived_gen.6;
    let #Derived_gen.3 : Str = CallByName Inspect.31 #Derived_gen.4 #Derived.5;
    ret #Derived_gen.3;

procedure Bool.1 ():
    let Bool.22 : Int1 = false;
    ret Bool.22;

procedure Bool.2 ():
    let Bool.21 : Int1 = true;
    ret Bool.21;

procedure Inspect.156 (Inspect.157, #Attr.12):
    let Inspect.155 : {} = StructAtIndex 2 #Attr.12;
    let Inspect.154 : {} = StructAtIndex 1 #Attr.12;
    let Inspect.153 : List I64 = StructAtIndex 0 #Attr.12;
    let Inspect.333 : Str = "[";
    let Inspect.158 : Str = CallByName Inspect.63 Inspect.157 Inspect.333;
    dec Inspect.333;
    let Inspect.332 : Int1 = CallByName Bool.1;
    let Inspect.318 : {Str, Int1} = Struct {Inspect.158, Inspect.332};
    let Inspect.317 : {Str, Int1} = CallByName List.18 Inspect.153 Inspect.318 Inspect.155;
    dec Inspect.153;
    let Inspect.159 : Str = StructAtIndex 0 Inspect.317;
    let Inspect.314 : Str = "]";
    let Inspect.313 : Str = CallByName Inspect.63 Inspect.159 Inspect.314;
    dec Inspect.314;
    ret Inspect.313;

procedure Inspect.160 (Inspect.320, Inspect.163, Inspect.155):
    let Inspect.161 : Str = StructAtIndex 0 Inspect.320;
    let Inspect.162 : Int1 = StructAtIndex 1 Inspect.320;
    joinpoint Inspect.330 Inspect.164:
        let Inspect.327 : I64 = CallByName #Derived.3 Inspect.163;
        let Inspect.323 : Str = CallByName Inspect.31 Inspect.327 Inspect.164;
        let Inspect.324 : {} = Struct {};
        let Inspect.322 : {Str, Int1} = CallByName Inspect.165 Inspect.323;
        dec Inspect.323;
        ret Inspect.322;
    in
    if Inspect.162 then
        let Inspect.331 : Str = ", ";
        let Inspect.329 : Str = CallByName Inspect.63 Inspect.161 Inspect.331;
        dec Inspect.331;
        jump Inspect.330 Inspect.329;
    else
        jump Inspect.330 Inspect.161;

procedure Inspect.165 (Inspect.166):
    let Inspect.326 : Int1 = CallByName Bool.2;
    inc Inspect.166;
    let Inspect.325 : {Str, Int1} = Struct {Inspect.166, Inspect.326};
    ret Inspect.325;

procedure Inspect.273 (Inspect.274, Inspect.272):
    let Inspect.339 : Str = CallByName Num.96 Inspect.272;
    let Inspect.338 : Str = CallByName Inspect.63 Inspect.274 Inspect.339;
    dec Inspect.339;
    ret Inspect.338;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.31 (Inspect.298, Inspect.149):
    let Inspect.309 : Str = CallByName Inspect.156 Inspect.149 Inspect.298;
    ret Inspect.309;

procedure Inspect.31 (Inspect.298, Inspect.149):
    let Inspect.328 : Str = CallByName Inspect.273 Inspect.149 Inspect.298;
    ret Inspect.328;

procedure Inspect.33 (Inspect.152):
    let Inspect.300 : Str = CallByName Inspect.5 Inspect.152;
    let Inspect.299 : Str = CallByName Inspect.64 Inspect.300;
    ret Inspect.299;

procedure Inspect.39 (Inspect.296):
    let Inspect.306 : Str = "";
    ret Inspect.306;

procedure Inspect.40 (Inspect.153, Inspect.154, Inspect.155):
    inc Inspect.153;
    let Inspect.311 : {List I64, {}, {}} = Struct {Inspect.153, Inspect.154, Inspect.155};
    let Inspect.310 : {List I64, {}, {}} = CallByName Inspect.30 Inspect.311;
    ret Inspect.310;

procedure Inspect.5 (Inspect.150):
    let Inspect.307 : List I64 = CallByName #Derived.0 Inspect.150;
    let Inspect.304 : {} = Struct {};
    let Inspect.303 : Str = CallByName Inspect.39 Inspect.304;
    let Inspect.302 : Str = CallByName #Derived.4 Inspect.303 Inspect.307;
    dec Inspect.307;
    ret Inspect.302;

procedure Inspect.57 (Inspect.272):
    let Inspect.334 : I64 = CallByName Inspect.30 Inspect.272;
    ret Inspect.334;

procedure Inspect.63 (Inspect.295, Inspect.291):
    let Inspect.316 : Str = CallByName Str.3 Inspect.295 Inspect.291;
    ret Inspect.316;

procedure Inspect.64 (Inspect.297):
    ret Inspect.297;

procedure List.101 (#Derived_gen.10, #Derived_gen.11, #Derived_gen.12, #Derived_gen.13, #Derived_gen.14):
    joinpoint List.678 List.175 List.176 List.177 List.178 List.179:
        let List.680 : Int1 = CallByName Num.22 List.178 List.179;
        if List.680 then
            let List.684 : I64 = CallByName List.66 List.175 List.178;
            let List.180 : {Str, Int1} = CallByName Inspect.160 List.176 List.684 List.177;
            let List.683 : U64 = 1i64;
            let List.682 : U64 = CallByName Num.51 List.178 List.683;
            jump List.678 List.175 List.180 List.177 List.682 List.179;
        else
            dec List.175;
            ret List.176;
    in
    inc #Derived_gen.10;
    jump List.678 #Derived_gen.10 #Derived_gen.11 #Derived_gen.12 #Derived_gen.13 #Derived_gen.14;

procedure List.18 (List.172, List.173, List.174):
    let List.676 : U64 = 0i64;
    let List.677 : U64 = CallByName List.6 List.172;
    let List.675 : {Str, Int1} = CallByName List.101 List.172 List.173 List.174 List.676 List.677;
    ret List.675;

procedure List.6 (#Attr.2):
    let List.686 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.686;

procedure List.66 (#Attr.2, #Attr.3):
    let List.685 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.685;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.285 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.285;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.284 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.284;

procedure Num.96 (#Attr.2):
    let Num.283 : Str = lowlevel NumToStr #Attr.2;
    ret Num.283;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.380 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.380;

procedure Test.0 ():
    let Test.2 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.1 : Str = CallByName Inspect.33 Test.2;
    ret Test.1;
