procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : {Decimal, I64} = CallByName Inspect.30 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.1):
    let #Derived_gen.13 : I64 = StructAtIndex 1 #Derived.1;
    let #Derived_gen.11 : [C I64, C Decimal] = CallByName Inspect.57 #Derived_gen.13;
    let #Derived_gen.12 : Str = "a";
    let #Derived_gen.6 : {[C I64, C Decimal], Str} = Struct {#Derived_gen.11, #Derived_gen.12};
    let #Derived_gen.10 : Decimal = StructAtIndex 0 #Derived.1;
    let #Derived_gen.8 : [C I64, C Decimal] = CallByName Inspect.62 #Derived_gen.10;
    let #Derived_gen.9 : Str = "b";
    let #Derived_gen.7 : {[C I64, C Decimal], Str} = Struct {#Derived_gen.8, #Derived_gen.9};
    let #Derived_gen.5 : List {[C I64, C Decimal], Str} = Array [#Derived_gen.6, #Derived_gen.7];
    let #Derived_gen.4 : List {[C I64, C Decimal], Str} = CallByName Inspect.45 #Derived_gen.5;
    let #Derived_gen.3 : Str = CallByName Inspect.31 #Derived_gen.4 #Derived.3;
    dec #Derived_gen.4;
    ret #Derived_gen.3;

procedure Bool.1 ():
    let Bool.22 : Int1 = false;
    ret Bool.22;

procedure Bool.2 ():
    let Bool.21 : Int1 = true;
    ret Bool.21;

procedure Inspect.225 (Inspect.226, Inspect.224):
    let Inspect.339 : Str = "{";
    let Inspect.227 : Str = CallByName Inspect.63 Inspect.226 Inspect.339;
    dec Inspect.339;
    let Inspect.338 : Int1 = CallByName Bool.1;
    let Inspect.318 : {Str, Int1} = Struct {Inspect.227, Inspect.338};
    let Inspect.319 : {} = Struct {};
    let Inspect.317 : {Str, Int1} = CallByName List.18 Inspect.224 Inspect.318 Inspect.319;
    let Inspect.228 : Str = StructAtIndex 0 Inspect.317;
    let Inspect.314 : Str = "}";
    let Inspect.313 : Str = CallByName Inspect.63 Inspect.228 Inspect.314;
    dec Inspect.314;
    ret Inspect.313;

procedure Inspect.229 (Inspect.320, Inspect.321):
    let Inspect.233 : [C I64, C Decimal] = StructAtIndex 0 Inspect.321;
    let Inspect.232 : Str = StructAtIndex 1 Inspect.321;
    let Inspect.230 : Str = StructAtIndex 0 Inspect.320;
    let Inspect.231 : Int1 = StructAtIndex 1 Inspect.320;
    joinpoint Inspect.336 Inspect.234:
        let Inspect.333 : Str = CallByName Inspect.63 Inspect.234 Inspect.232;
        dec Inspect.232;
        let Inspect.334 : Str = ": ";
        let Inspect.327 : Str = CallByName Inspect.63 Inspect.333 Inspect.334;
        dec Inspect.334;
        let Inspect.323 : Str = CallByName Inspect.235 Inspect.327 Inspect.233;
        let Inspect.324 : {} = Struct {};
        let Inspect.322 : {Str, Int1} = CallByName Inspect.237 Inspect.323;
        dec Inspect.323;
        ret Inspect.322;
    in
    if Inspect.231 then
        let Inspect.337 : Str = ", ";
        let Inspect.335 : Str = CallByName Inspect.63 Inspect.230 Inspect.337;
        dec Inspect.337;
        jump Inspect.336 Inspect.335;
    else
        jump Inspect.336 Inspect.230;

procedure Inspect.235 (Inspect.236, Inspect.233):
    let Inspect.330 : Str = CallByName Inspect.31 Inspect.233 Inspect.236;
    ret Inspect.330;

procedure Inspect.237 (Inspect.238):
    let Inspect.326 : Int1 = CallByName Bool.2;
    inc Inspect.238;
    let Inspect.325 : {Str, Int1} = Struct {Inspect.238, Inspect.326};
    ret Inspect.325;

procedure Inspect.273 (Inspect.274, #Attr.12):
    let Inspect.352 : I64 = UnionAtIndex (Id 0) (Index 0) #Attr.12;
    let Inspect.351 : Str = CallByName Num.96 Inspect.352;
    let Inspect.350 : Str = CallByName Inspect.63 Inspect.274 Inspect.351;
    dec Inspect.351;
    ret Inspect.350;

procedure Inspect.288 (Inspect.289, #Attr.12):
    let Inspect.346 : Decimal = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    let Inspect.345 : Str = CallByName Num.96 Inspect.346;
    let Inspect.344 : Str = CallByName Inspect.63 Inspect.289 Inspect.345;
    dec Inspect.345;
    ret Inspect.344;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.31 (Inspect.298, Inspect.149):
    let Inspect.309 : Str = CallByName Inspect.225 Inspect.149 Inspect.298;
    ret Inspect.309;

procedure Inspect.31 (Inspect.298, Inspect.149):
    let Inspect.332 : U8 = GetTagId Inspect.298;
    switch Inspect.332:
        case 0:
            let Inspect.331 : Str = CallByName Inspect.273 Inspect.149 Inspect.298;
            ret Inspect.331;
    
        default:
            let Inspect.331 : Str = CallByName Inspect.288 Inspect.149 Inspect.298;
            ret Inspect.331;
    

procedure Inspect.33 (Inspect.152):
    let Inspect.300 : Str = CallByName Inspect.5 Inspect.152;
    let Inspect.299 : Str = CallByName Inspect.64 Inspect.300;
    ret Inspect.299;

procedure Inspect.39 (Inspect.296):
    let Inspect.306 : Str = "";
    ret Inspect.306;

procedure Inspect.45 (Inspect.224):
    let Inspect.310 : List {[C I64, C Decimal], Str} = CallByName Inspect.30 Inspect.224;
    ret Inspect.310;

procedure Inspect.5 (Inspect.150):
    let Inspect.307 : {Decimal, I64} = CallByName #Derived.0 Inspect.150;
    let Inspect.304 : {} = Struct {};
    let Inspect.303 : Str = CallByName Inspect.39 Inspect.304;
    let Inspect.302 : Str = CallByName #Derived.2 Inspect.303 Inspect.307;
    ret Inspect.302;

procedure Inspect.57 (Inspect.272):
    let Inspect.348 : [C I64, C Decimal] = TagId(0) Inspect.272;
    let Inspect.347 : [C I64, C Decimal] = CallByName Inspect.30 Inspect.348;
    ret Inspect.347;

procedure Inspect.62 (Inspect.287):
    let Inspect.341 : [C I64, C Decimal] = TagId(1) Inspect.287;
    let Inspect.340 : [C I64, C Decimal] = CallByName Inspect.30 Inspect.341;
    ret Inspect.340;

procedure Inspect.63 (Inspect.295, Inspect.291):
    let Inspect.316 : Str = CallByName Str.3 Inspect.295 Inspect.291;
    ret Inspect.316;

procedure Inspect.64 (Inspect.297):
    ret Inspect.297;

procedure List.101 (#Derived_gen.16, #Derived_gen.17, #Derived_gen.18, #Derived_gen.19, #Derived_gen.20):
    joinpoint List.678 List.175 List.176 List.177 List.178 List.179:
        let List.680 : Int1 = CallByName Num.22 List.178 List.179;
        if List.680 then
            let List.684 : {[C I64, C Decimal], Str} = CallByName List.66 List.175 List.178;
            inc List.684;
            let List.180 : {Str, Int1} = CallByName Inspect.229 List.176 List.684;
            let List.683 : U64 = 1i64;
            let List.682 : U64 = CallByName Num.51 List.178 List.683;
            jump List.678 List.175 List.180 List.177 List.682 List.179;
        else
            dec List.175;
            ret List.176;
    in
    inc #Derived_gen.16;
    jump List.678 #Derived_gen.16 #Derived_gen.17 #Derived_gen.18 #Derived_gen.19 #Derived_gen.20;

procedure List.18 (List.172, List.173, List.174):
    let List.676 : U64 = 0i64;
    let List.677 : U64 = CallByName List.6 List.172;
    let List.675 : {Str, Int1} = CallByName List.101 List.172 List.173 List.174 List.676 List.677;
    ret List.675;

procedure List.6 (#Attr.2):
    let List.686 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.686;

procedure List.66 (#Attr.2, #Attr.3):
    let List.685 : {[C I64, C Decimal], Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.685;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.286 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.286;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.285 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.285;

procedure Num.96 (#Attr.2):
    let Num.283 : Str = lowlevel NumToStr #Attr.2;
    ret Num.283;

procedure Num.96 (#Attr.2):
    let Num.284 : Str = lowlevel NumToStr #Attr.2;
    ret Num.284;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.248 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.248;

procedure Test.0 ():
    let Test.3 : Decimal = 3dec;
    let Test.4 : I64 = 7i64;
    let Test.2 : {Decimal, I64} = Struct {Test.3, Test.4};
    let Test.1 : Str = CallByName Inspect.33 Test.2;
    ret Test.1;
