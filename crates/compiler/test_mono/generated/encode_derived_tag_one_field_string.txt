procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Encode.23 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.3 (#Derived.4, #Derived.5, #Derived.1):
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : List U8 = CallByName Encode.24 #Derived.4 #Derived_gen.4 #Derived.5;
        ret #Derived_gen.3;
    in
    let #Derived_gen.7 : Str = "A";
    let #Derived_gen.9 : Str = CallByName Test.20 #Derived.1;
    let #Derived_gen.8 : List Str = Array [#Derived_gen.9];
    let #Derived_gen.6 : {List Str, {}} = CallByName Test.24 #Derived_gen.7 #Derived_gen.8;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Encode.23 (Encode.100):
    ret Encode.100;

procedure Encode.23 (Encode.100):
    ret Encode.100;

procedure Encode.23 (Encode.100):
    ret Encode.100;

procedure Encode.24 (Encode.101, Encode.109, Encode.103):
    let Encode.113 : List U8 = CallByName #Derived.3 Encode.101 Encode.103 Encode.109;
    ret Encode.113;

procedure Encode.24 (Encode.101, Encode.109, Encode.103):
    let Encode.115 : List U8 = CallByName Test.61 Encode.101 Encode.103 Encode.109;
    ret Encode.115;

procedure Encode.24 (Encode.101, Encode.109, Encode.103):
    let Encode.119 : List U8 = CallByName Test.57 Encode.101 Encode.103 Encode.109;
    ret Encode.119;

procedure Encode.26 (Encode.107, Encode.108):
    let Encode.111 : List U8 = Array [];
    let Encode.112 : Str = CallByName #Derived.0 Encode.107;
    let Encode.110 : List U8 = CallByName Encode.24 Encode.111 Encode.112 Encode.108;
    ret Encode.110;

procedure List.100 (#Derived_gen.22, #Derived_gen.23, #Derived_gen.24, #Derived_gen.25, #Derived_gen.26):
    joinpoint List.662 List.174 List.175 List.176 List.177 List.178:
        let List.664 : Int1 = CallByName Num.22 List.177 List.178;
        if List.664 then
            let List.668 : Str = CallByName List.66 List.174 List.177;
            inc List.668;
            let List.179 : List U8 = CallByName Test.64 List.175 List.668 List.176;
            let List.667 : U64 = 1i64;
            let List.666 : U64 = CallByName Num.51 List.177 List.667;
            jump List.662 List.174 List.179 List.176 List.666 List.178;
        else
            dec List.174;
            ret List.175;
    in
    inc #Derived_gen.22;
    jump List.662 #Derived_gen.22 #Derived_gen.23 #Derived_gen.24 #Derived_gen.25 #Derived_gen.26;

procedure List.13 (#Attr.2, #Attr.3):
    let List.685 : List Str = lowlevel ListPrepend #Attr.2 #Attr.3;
    ret List.685;

procedure List.18 (List.171, List.172, List.173):
    let List.660 : U64 = 0i64;
    let List.661 : U64 = CallByName List.6 List.171;
    let List.659 : List U8 = CallByName List.100 List.171 List.172 List.173 List.660 List.661;
    ret List.659;

procedure List.4 (List.135, List.136):
    let List.681 : U64 = 1i64;
    let List.680 : List U8 = CallByName List.70 List.135 List.681;
    let List.679 : List U8 = CallByName List.71 List.680 List.136;
    ret List.679;

procedure List.6 (#Attr.2):
    let List.684 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.684;

procedure List.66 (#Attr.2, #Attr.3):
    let List.669 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.669;

procedure List.70 (#Attr.2, #Attr.3):
    let List.675 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.675;

procedure List.71 (#Attr.2, #Attr.3):
    let List.673 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.673;

procedure List.8 (#Attr.2, #Attr.3):
    let List.683 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.683;

procedure Num.127 (#Attr.2):
    let Num.286 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.286;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.288 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.288;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.287 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.287;

procedure Num.96 (#Attr.2):
    let Num.285 : Str = lowlevel NumToStr #Attr.2;
    ret Num.285;

procedure Str.12 (#Attr.2):
    let Str.255 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.255;

procedure Str.36 (#Attr.2):
    let Str.256 : U64 = lowlevel StrCountUtf8Bytes #Attr.2;
    ret Str.256;

procedure Str.43 (#Attr.2):
    let Str.253 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8 #Attr.2;
    ret Str.253;

procedure Str.9 (Str.73):
    let Str.74 : {U64, Str, Int1, U8} = CallByName Str.43 Str.73;
    let Str.250 : Int1 = StructAtIndex 2 Str.74;
    if Str.250 then
        let Str.252 : Str = StructAtIndex 1 Str.74;
        let Str.251 : [C {U64, U8}, C Str] = TagId(1) Str.252;
        ret Str.251;
    else
        let Str.248 : U8 = StructAtIndex 3 Str.74;
        let Str.249 : U64 = StructAtIndex 0 Str.74;
        let #Derived_gen.27 : Str = StructAtIndex 1 Str.74;
        dec #Derived_gen.27;
        let Str.247 : {U64, U8} = Struct {Str.249, Str.248};
        let Str.246 : [C {U64, U8}, C Str] = TagId(0) Str.247;
        ret Str.246;

procedure Test.20 (Test.56):
    let Test.297 : Str = CallByName Encode.23 Test.56;
    ret Test.297;

procedure Test.21 (Test.59, Test.60):
    inc Test.59;
    let Test.266 : {List Str, {}} = Struct {Test.59, Test.60};
    let Test.265 : {List Str, {}} = CallByName Encode.23 Test.266;
    ret Test.265;

procedure Test.23 (Test.75):
    let Test.264 : {} = Struct {};
    let Test.263 : {List Str, {}} = CallByName Test.21 Test.75 Test.264;
    ret Test.263;

procedure Test.24 (Test.78, Test.79):
    let Test.285 : Str = CallByName Test.20 Test.78;
    let Test.262 : List Str = CallByName List.13 Test.79 Test.285;
    let Test.261 : {List Str, {}} = CallByName Test.23 Test.262;
    dec Test.262;
    ret Test.261;

procedure Test.3 ():
    let Test.259 : {} = Struct {};
    ret Test.259;

procedure Test.4 (Test.49, Test.50, Test.51):
    let Test.283 : U8 = CallByName Num.127 Test.50;
    let Test.280 : List U8 = CallByName List.4 Test.49 Test.283;
    let Test.282 : Str = CallByName Num.96 Test.51;
    let Test.281 : List U8 = CallByName Str.12 Test.282;
    let Test.278 : List U8 = CallByName List.8 Test.280 Test.281;
    let Test.279 : U8 = 32i64;
    let Test.277 : List U8 = CallByName List.4 Test.278 Test.279;
    ret Test.277;

procedure Test.57 (Test.58, Test.288, Test.56):
    let Test.295 : I64 = 115i64;
    let Test.296 : U64 = CallByName Str.36 Test.56;
    let Test.293 : List U8 = CallByName Test.4 Test.58 Test.295 Test.296;
    let Test.294 : List U8 = CallByName Str.12 Test.56;
    let Test.291 : List U8 = CallByName List.8 Test.293 Test.294;
    let Test.292 : U8 = 32i64;
    let Test.290 : List U8 = CallByName List.4 Test.291 Test.292;
    ret Test.290;

procedure Test.61 (Test.62, Test.267, #Attr.12):
    let Test.60 : {} = StructAtIndex 1 #Attr.12;
    let Test.59 : List Str = StructAtIndex 0 #Attr.12;
    let Test.275 : I64 = 108i64;
    let Test.276 : U64 = CallByName List.6 Test.59;
    let Test.63 : List U8 = CallByName Test.4 Test.62 Test.275 Test.276;
    let Test.269 : List U8 = CallByName List.18 Test.59 Test.63 Test.60;
    dec Test.59;
    ret Test.269;

procedure Test.64 (Test.65, Test.66, Test.60):
    let Test.273 : Str = CallByName Test.76 Test.66;
    let Test.274 : {} = Struct {};
    let Test.272 : List U8 = CallByName Encode.24 Test.65 Test.273 Test.274;
    ret Test.272;

procedure Test.76 (Test.77):
    ret Test.77;

procedure Test.0 ():
    let Test.260 : Str = "foo";
    let Test.258 : {} = CallByName Test.3;
    let Test.257 : List U8 = CallByName Encode.26 Test.260 Test.258;
    let Test.211 : [C {U64, U8}, C Str] = CallByName Str.9 Test.257;
    let Test.254 : U8 = 1i64;
    let Test.255 : U8 = GetTagId Test.211;
    let Test.256 : Int1 = lowlevel Eq Test.254 Test.255;
    if Test.256 then
        let Test.213 : Str = UnionAtIndex (Id 1) (Index 0) Test.211;
        ret Test.213;
    else
        dec Test.211;
        let Test.253 : Str = "<bad>";
        ret Test.253;
