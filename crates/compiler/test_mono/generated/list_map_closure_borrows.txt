procedure List.103 (Bool.21, Bool.22, Bool.23, Bool.24, Bool.25):
    joinpoint List.708 List.178 List.179 List.180 List.181 List.182:
        let List.710 : Int1 = CallByName Num.22 List.181 List.182;
        if List.710 then
            let List.714 : Str = CallByName List.66 List.178 List.181;
            inc List.714;
            let List.183 : List Str = CallByName List.296 List.179 List.714 List.180;
            dec List.714;
            let List.713 : U64 = 1i64;
            let List.712 : U64 = CallByName Num.51 List.181 List.713;
            jump List.708 List.178 List.183 List.180 List.712 List.182;
        else
            dec List.178;
            ret List.179;
    in
    inc Bool.21;
    jump List.708 Bool.21 Bool.22 Bool.23 Bool.24 Bool.25;

procedure List.18 (List.175, List.176, List.177):
    let List.706 : U64 = 0i64;
    let List.707 : U64 = CallByName List.6 List.175;
    let List.705 : List Str = CallByName List.103 List.175 List.176 List.177 List.706 List.707;
    ret List.705;

procedure List.2 (List.123, List.124):
    let List.700 : U64 = CallByName List.6 List.123;
    let List.696 : Int1 = CallByName Num.22 List.124 List.700;
    if List.696 then
        let List.698 : Str = CallByName List.66 List.123 List.124;
        inc List.698;
        let List.697 : [C {}, C Str] = TagId(1) List.698;
        ret List.697;
    else
        let List.695 : {} = Struct {};
        let List.694 : [C {}, C Str] = TagId(0) List.695;
        ret List.694;

procedure List.296 (List.297, List.298, List.294):
    let List.717 : Str = CallByName Test.3 List.298;
    let List.716 : List Str = CallByName List.71 List.297 List.717;
    ret List.716;

procedure List.5 (List.293, List.294):
    let List.295 : U64 = CallByName List.6 List.293;
    let List.703 : List Str = CallByName List.68 List.295;
    let List.702 : List Str = CallByName List.18 List.293 List.703 List.294;
    ret List.702;

procedure List.6 (#Attr.2):
    let List.701 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.701;

procedure List.66 (#Attr.2, #Attr.3):
    let List.699 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.699;

procedure List.68 (#Attr.2):
    let List.719 : List Str = lowlevel ListWithCapacity #Attr.2;
    ret List.719;

procedure List.71 (#Attr.2, #Attr.3):
    let List.718 : List Str = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.718;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.290 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.290;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.291 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.291;

procedure Str.16 (#Attr.2, #Attr.3):
    let Str.388 : Str = lowlevel StrRepeat #Attr.2 #Attr.3;
    ret Str.388;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.389 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.389;

procedure Test.1 ():
    let Test.21 : Str = "lllllllllllllllllllllooooooooooong";
    let Test.22 : Str = "g";
    let Test.20 : Str = CallByName Str.3 Test.21 Test.22;
    dec Test.22;
    let Test.19 : List Str = Array [Test.20];
    ret Test.19;

procedure Test.2 ():
    let Test.15 : List Str = CallByName Test.1;
    let Test.16 : {} = Struct {};
    let Test.14 : List Str = CallByName List.5 Test.15 Test.16;
    dec Test.15;
    ret Test.14;

procedure Test.3 (Test.4):
    let Test.18 : U64 = 2i64;
    let Test.17 : Str = CallByName Str.16 Test.4 Test.18;
    ret Test.17;

procedure Test.0 ():
    let Test.12 : List Str = CallByName Test.2;
    let Test.13 : U64 = 0i64;
    let Test.6 : [C {}, C Str] = CallByName List.2 Test.12 Test.13;
    dec Test.12;
    let Test.9 : U8 = 1i64;
    let Test.10 : U8 = GetTagId Test.6;
    let Test.11 : Int1 = lowlevel Eq Test.9 Test.10;
    if Test.11 then
        let Test.5 : Str = UnionAtIndex (Id 1) (Index 0) Test.6;
        ret Test.5;
    else
        dec Test.6;
        let Test.8 : Str = "Hello, World!\n";
        ret Test.8;
