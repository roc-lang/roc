procedure List.102 (Bool.21, Bool.22, Bool.23, Bool.24, Bool.25):
    joinpoint List.697 List.176 List.177 List.178 List.179 List.180:
        let List.699 : Int1 = CallByName Num.22 List.179 List.180;
        if List.699 then
            let List.703 : Str = CallByName List.66 List.176 List.179;
            inc List.703;
            let List.181 : List Str = CallByName List.285 List.177 List.703 List.178;
            dec List.703;
            let List.702 : U64 = 1i64;
            let List.701 : U64 = CallByName Num.51 List.179 List.702;
            jump List.697 List.176 List.181 List.178 List.701 List.180;
        else
            dec List.176;
            ret List.177;
    in
    inc Bool.21;
    jump List.697 Bool.21 Bool.22 Bool.23 Bool.24 Bool.25;

procedure List.18 (List.173, List.174, List.175):
    let List.695 : U64 = 0i64;
    let List.696 : U64 = CallByName List.6 List.173;
    let List.694 : List Str = CallByName List.102 List.173 List.174 List.175 List.695 List.696;
    ret List.694;

procedure List.2 (List.121, List.122):
    let List.689 : U64 = CallByName List.6 List.121;
    let List.685 : Int1 = CallByName Num.22 List.122 List.689;
    if List.685 then
        let List.687 : Str = CallByName List.66 List.121 List.122;
        inc List.687;
        let List.686 : [C {}, C Str] = TagId(1) List.687;
        ret List.686;
    else
        let List.684 : {} = Struct {};
        let List.683 : [C {}, C Str] = TagId(0) List.684;
        ret List.683;

procedure List.285 (List.286, List.287, List.283):
    let List.706 : Str = CallByName Test.3 List.287;
    let List.705 : List Str = CallByName List.71 List.286 List.706;
    ret List.705;

procedure List.5 (List.282, List.283):
    let List.284 : U64 = CallByName List.6 List.282;
    let List.692 : List Str = CallByName List.68 List.284;
    let List.691 : List Str = CallByName List.18 List.282 List.692 List.283;
    ret List.691;

procedure List.6 (#Attr.2):
    let List.690 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.690;

procedure List.66 (#Attr.2, #Attr.3):
    let List.688 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.688;

procedure List.68 (#Attr.2):
    let List.708 : List Str = lowlevel ListWithCapacity #Attr.2;
    ret List.708;

procedure List.71 (#Attr.2, #Attr.3):
    let List.707 : List Str = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.707;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.290 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.290;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.291 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.291;

procedure Str.16 (#Attr.2, #Attr.3):
    let Str.388 : Str = lowlevel StrRepeat #Attr.2 #Attr.3;
    ret Str.388;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.389 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.389;

procedure Test.1 ():
    let Test.21 : Str = "lllllllllllllllllllllooooooooooong";
    let Test.22 : Str = "g";
    let Test.20 : Str = CallByName Str.3 Test.21 Test.22;
    dec Test.22;
    let Test.19 : List Str = Array [Test.20];
    ret Test.19;

procedure Test.2 ():
    let Test.15 : List Str = CallByName Test.1;
    let Test.16 : {} = Struct {};
    let Test.14 : List Str = CallByName List.5 Test.15 Test.16;
    dec Test.15;
    ret Test.14;

procedure Test.3 (Test.4):
    let Test.18 : U64 = 2i64;
    let Test.17 : Str = CallByName Str.16 Test.4 Test.18;
    ret Test.17;

procedure Test.0 ():
    let Test.12 : List Str = CallByName Test.2;
    let Test.13 : U64 = 0i64;
    let Test.6 : [C {}, C Str] = CallByName List.2 Test.12 Test.13;
    dec Test.12;
    let Test.9 : U8 = 1i64;
    let Test.10 : U8 = GetTagId Test.6;
    let Test.11 : Int1 = lowlevel Eq Test.9 Test.10;
    if Test.11 then
        let Test.5 : Str = UnionAtIndex (Id 1) (Index 0) Test.6;
        ret Test.5;
    else
        dec Test.6;
        let Test.8 : Str = "Hello, World!\n";
        ret Test.8;
