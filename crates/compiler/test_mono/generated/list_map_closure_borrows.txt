procedure List.101 (Bool.21, Bool.22, Bool.23, Bool.24, Bool.25):
    joinpoint List.689 List.175 List.176 List.177 List.178 List.179:
        let List.691 : Int1 = CallByName Num.22 List.178 List.179;
        if List.691 then
            let List.695 : Str = CallByName List.66 List.175 List.178;
            inc List.695;
            let List.180 : List Str = CallByName List.284 List.176 List.695 List.177;
            dec List.695;
            let List.694 : U64 = 1i64;
            let List.693 : U64 = CallByName Num.51 List.178 List.694;
            jump List.689 List.175 List.180 List.177 List.693 List.179;
        else
            dec List.175;
            ret List.176;
    in
    inc Bool.21;
    jump List.689 Bool.21 Bool.22 Bool.23 Bool.24 Bool.25;

procedure List.18 (List.172, List.173, List.174):
    let List.687 : U64 = 0i64;
    let List.688 : U64 = CallByName List.6 List.172;
    let List.686 : List Str = CallByName List.101 List.172 List.173 List.174 List.687 List.688;
    ret List.686;

procedure List.2 (List.120, List.121):
    let List.681 : U64 = CallByName List.6 List.120;
    let List.677 : Int1 = CallByName Num.22 List.121 List.681;
    if List.677 then
        let List.679 : Str = CallByName List.66 List.120 List.121;
        inc List.679;
        let List.678 : [C {}, C Str] = TagId(1) List.679;
        ret List.678;
    else
        let List.676 : {} = Struct {};
        let List.675 : [C {}, C Str] = TagId(0) List.676;
        ret List.675;

procedure List.284 (List.285, List.286, List.282):
    let List.698 : Str = CallByName Test.3 List.286;
    let List.697 : List Str = CallByName List.71 List.285 List.698;
    ret List.697;

procedure List.5 (List.281, List.282):
    let List.283 : U64 = CallByName List.6 List.281;
    let List.684 : List Str = CallByName List.68 List.283;
    let List.683 : List Str = CallByName List.18 List.281 List.684 List.282;
    ret List.683;

procedure List.6 (#Attr.2):
    let List.682 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.682;

procedure List.66 (#Attr.2, #Attr.3):
    let List.680 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.680;

procedure List.68 (#Attr.2):
    let List.700 : List Str = lowlevel ListWithCapacity #Attr.2;
    ret List.700;

procedure List.71 (#Attr.2, #Attr.3):
    let List.699 : List Str = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.699;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.284 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.284;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.285 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.285;

procedure Str.16 (#Attr.2, #Attr.3):
    let Str.385 : Str = lowlevel StrRepeat #Attr.2 #Attr.3;
    ret Str.385;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.386 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.386;

procedure Test.1 ():
    let Test.21 : Str = "lllllllllllllllllllllooooooooooong";
    let Test.22 : Str = "g";
    let Test.20 : Str = CallByName Str.3 Test.21 Test.22;
    dec Test.22;
    let Test.19 : List Str = Array [Test.20];
    ret Test.19;

procedure Test.2 ():
    let Test.15 : List Str = CallByName Test.1;
    let Test.16 : {} = Struct {};
    let Test.14 : List Str = CallByName List.5 Test.15 Test.16;
    dec Test.15;
    ret Test.14;

procedure Test.3 (Test.4):
    let Test.18 : U64 = 2i64;
    let Test.17 : Str = CallByName Str.16 Test.4 Test.18;
    ret Test.17;

procedure Test.0 ():
    let Test.12 : List Str = CallByName Test.2;
    let Test.13 : U64 = 0i64;
    let Test.6 : [C {}, C Str] = CallByName List.2 Test.12 Test.13;
    dec Test.12;
    let Test.9 : U8 = 1i64;
    let Test.10 : U8 = GetTagId Test.6;
    let Test.11 : Int1 = lowlevel Eq Test.9 Test.10;
    if Test.11 then
        let Test.5 : Str = UnionAtIndex (Id 1) (Index 0) Test.6;
        ret Test.5;
    else
        dec Test.6;
        let Test.8 : Str = "Hello, World!\n";
        ret Test.8;
