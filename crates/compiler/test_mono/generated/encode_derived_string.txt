procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.106 : List U8 = CallByName Json.97 Encode.94 Encode.96 Encode.102;
    ret Encode.106;

procedure Encode.25 (Encode.100, Encode.101):
    let Encode.104 : List U8 = Array [];
    let Encode.105 : Str = CallByName Json.18 Encode.100;
    let Encode.103 : List U8 = CallByName Encode.23 Encode.104 Encode.105 Encode.101;
    ret Encode.103;

procedure Json.1 ():
    let Json.396 : {} = Struct {};
    ret Json.396;

procedure Json.18 (Json.96):
    let Json.397 : Str = CallByName Encode.22 Json.96;
    ret Json.397;

procedure Json.97 (Json.98, Json.399, Json.96):
    let Json.408 : I32 = 34i64;
    let Json.407 : U8 = CallByName Num.123 Json.408;
    let Json.405 : List U8 = CallByName List.4 Json.98 Json.407;
    let Json.406 : List U8 = CallByName Str.12 Json.96;
    let Json.402 : List U8 = CallByName List.8 Json.405 Json.406;
    let Json.404 : I32 = 34i64;
    let Json.403 : U8 = CallByName Num.123 Json.404;
    let Json.401 : List U8 = CallByName List.4 Json.402 Json.403;
    ret Json.401;

procedure List.4 (List.101, List.102):
    let List.389 : U64 = 1i64;
    let List.388 : List U8 = CallByName List.70 List.101 List.389;
    let List.387 : List U8 = CallByName List.71 List.388 List.102;
    ret List.387;

procedure List.6 (#Attr.2):
    let List.380 : U64 = lowlevel ListLen #Attr.2;
    ret List.380;

procedure List.70 (#Attr.2, #Attr.3):
    let List.386 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.386;

procedure List.71 (#Attr.2, #Attr.3):
    let List.384 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.384;

procedure List.8 (#Attr.2, #Attr.3):
    let List.390 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.390;

procedure Num.123 (#Attr.2):
    let Num.258 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.258;

procedure Str.12 (#Attr.2):
    let Str.265 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.265;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.260 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.260;

procedure Str.9 (Str.73):
    let Str.258 : U64 = 0i64;
    let Str.259 : U64 = CallByName List.6 Str.73;
    let Str.74 : {U64, Str, Int1, U8} = CallByName Str.48 Str.73 Str.258 Str.259;
    let Str.255 : Int1 = StructAtIndex 2 Str.74;
    if Str.255 then
        let Str.257 : Str = StructAtIndex 1 Str.74;
        inc Str.257;
        dec Str.74;
        let Str.256 : [C {U64, U8}, C Str] = TagId(1) Str.257;
        ret Str.256;
    else
        let Str.253 : U8 = StructAtIndex 3 Str.74;
        let Str.254 : U64 = StructAtIndex 0 Str.74;
        dec Str.74;
        let Str.252 : {U64, U8} = Struct {Str.254, Str.253};
        let Str.251 : [C {U64, U8}, C Str] = TagId(0) Str.252;
        ret Str.251;

procedure Test.0 ():
    let Test.9 : Str = "abc";
    let Test.10 : {} = CallByName Json.1;
    let Test.8 : List U8 = CallByName Encode.25 Test.9 Test.10;
    let Test.1 : [C {U64, U8}, C Str] = CallByName Str.9 Test.8;
    let Test.5 : U8 = 1i64;
    let Test.6 : U8 = GetTagId Test.1;
    let Test.7 : Int1 = lowlevel Eq Test.5 Test.6;
    if Test.7 then
        let Test.2 : Str = UnionAtIndex (Id 1) (Index 0) Test.1;
        inc Test.2;
        dec Test.1;
        ret Test.2;
    else
        dec Test.1;
        let Test.4 : Str = "<bad>";
        ret Test.4;
