procedure Bool.9 (#Attr.2, #Attr.3):
    let Bool.21 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.21;

procedure Str.26 (Str.84):
    let Str.248 : [C {}, C U64] = CallByName Str.67 Str.84;
    ret Str.248;

procedure Str.42 (#Attr.2):
    let Str.256 : {U64, U8} = lowlevel StrToNum #Attr.2;
    ret Str.256;

procedure Str.67 (Str.192):
    let Str.193 : {U64, U8} = CallByName Str.42 Str.192;
    let Str.254 : U8 = StructAtIndex 1 Str.193;
    let Str.255 : U8 = 0i64;
    let Str.251 : Int1 = CallByName Bool.9 Str.254 Str.255;
    if Str.251 then
        let Str.253 : U64 = StructAtIndex 0 Str.193;
        let Str.252 : [C {}, C U64] = TagId(1) Str.253;
        ret Str.252;
    else
        let Str.250 : {} = Struct {};
        let Str.249 : [C {}, C U64] = TagId(0) Str.250;
        ret Str.249;

procedure Test.1 (Test.2):
    joinpoint Test.11 Test.3:
        let Test.7 : [C {}, C U64] = TagId(1) Test.3;
        ret Test.7;
    in
    let Test.10 : [C {}, C U64] = CallByName Str.26 Test.2;
    let Test.15 : U8 = 1i64;
    let Test.16 : U8 = GetTagId Test.10;
    let Test.17 : Int1 = lowlevel Eq Test.15 Test.16;
    if Test.17 then
        let Test.8 : U64 = UnionAtIndex (Id 1) (Index 0) Test.10;
        jump Test.11 Test.8;
    else
        let Test.9 : {} = UnionAtIndex (Id 0) (Index 0) Test.10;
        let Test.14 : [C {}, C U64] = TagId(0) Test.9;
        ret Test.14;

procedure Test.0 ():
    let Test.6 : Str = "123";
    let Test.5 : [C {}, C U64] = CallByName Test.1 Test.6;
    dec Test.6;
    ret Test.5;
