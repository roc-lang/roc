procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.24 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.24;

procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.111 : List U8 = CallByName Test.5 Encode.99 Encode.101 Encode.107;
    ret Encode.111;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.118 : List U8 = CallByName Json.263 Encode.99 Encode.101 Encode.107;
    ret Encode.118;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.123 : List U8 = CallByName Json.181 Encode.99 Encode.101 Encode.107;
    ret Encode.123;

procedure Encode.26 (Encode.105, Encode.106):
    let Encode.109 : List U8 = Array [];
    let Encode.110 : {Str, Str} = CallByName Test.2 Encode.105;
    let Encode.108 : List U8 = CallByName Encode.24 Encode.109 Encode.110 Encode.106;
    ret Encode.108;

procedure Json.1 ():
    let Json.1171 : [C , C [], C , C , C , C ] = TagId(2) ;
    ret Json.1171;

procedure Json.181 (Json.182, Json.1218, Json.180):
    let Json.1221 : List U8 = CallByName Json.25 Json.180;
    let Json.1220 : List U8 = CallByName List.8 Json.182 Json.1221;
    ret Json.1220;

procedure Json.188 (Json.1269, Json.191):
    let Json.189 : U64 = StructAtIndex 0 Json.1269;
    let Json.190 : Int1 = StructAtIndex 1 Json.1269;
    switch Json.191:
        case 34:
            let Json.1272 : Int1 = false;
            let Json.1271 : {U64, Int1} = Struct {Json.189, Json.1272};
            let Json.1270 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) Json.1271;
            ret Json.1270;
    
        case 92:
            let Json.1275 : Int1 = false;
            let Json.1274 : {U64, Int1} = Struct {Json.189, Json.1275};
            let Json.1273 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) Json.1274;
            ret Json.1273;
    
        case 47:
            let Json.1278 : Int1 = false;
            let Json.1277 : {U64, Int1} = Struct {Json.189, Json.1278};
            let Json.1276 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) Json.1277;
            ret Json.1276;
    
        case 8:
            let Json.1281 : Int1 = false;
            let Json.1280 : {U64, Int1} = Struct {Json.189, Json.1281};
            let Json.1279 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) Json.1280;
            ret Json.1279;
    
        case 12:
            let Json.1284 : Int1 = false;
            let Json.1283 : {U64, Int1} = Struct {Json.189, Json.1284};
            let Json.1282 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) Json.1283;
            ret Json.1282;
    
        case 10:
            let Json.1287 : Int1 = false;
            let Json.1286 : {U64, Int1} = Struct {Json.189, Json.1287};
            let Json.1285 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) Json.1286;
            ret Json.1285;
    
        case 13:
            let Json.1290 : Int1 = false;
            let Json.1289 : {U64, Int1} = Struct {Json.189, Json.1290};
            let Json.1288 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) Json.1289;
            ret Json.1288;
    
        case 9:
            let Json.1293 : Int1 = false;
            let Json.1292 : {U64, Int1} = Struct {Json.189, Json.1293};
            let Json.1291 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) Json.1292;
            ret Json.1291;
    
        default:
            let Json.1297 : U64 = 1i64;
            let Json.1296 : U64 = CallByName Num.19 Json.189 Json.1297;
            let Json.1295 : {U64, Int1} = Struct {Json.1296, Json.190};
            let Json.1294 : [C {U64, Int1}, C {U64, Int1}] = TagId(1) Json.1295;
            ret Json.1294;
    

procedure Json.214 (Json.215, Json.216):
    let Json.1240 : List U8 = CallByName Json.26 Json.216;
    let Json.1239 : List U8 = CallByName List.8 Json.215 Json.1240;
    ret Json.1239;

procedure Json.24 (Json.180):
    let Json.1300 : Str = CallByName Encode.23 Json.180;
    ret Json.1300;

procedure Json.25 (Json.183):
    let Json.184 : List U8 = CallByName Str.12 Json.183;
    let Json.1298 : U64 = 0i64;
    let Json.1299 : Int1 = true;
    let Json.185 : {U64, Int1} = Struct {Json.1298, Json.1299};
    let Json.1268 : {} = Struct {};
    inc Json.184;
    let Json.186 : {U64, Int1} = CallByName List.26 Json.184 Json.185 Json.1268;
    let Json.1222 : Int1 = StructAtIndex 1 Json.186;
    let Json.1266 : Int1 = true;
    let Json.1267 : Int1 = lowlevel Eq Json.1266 Json.1222;
    if Json.1267 then
        let Json.1232 : U64 = CallByName List.6 Json.184;
        let Json.1233 : U64 = 2i64;
        let Json.1231 : U64 = CallByName Num.19 Json.1232 Json.1233;
        let Json.1228 : List U8 = CallByName List.68 Json.1231;
        let Json.1230 : U8 = 34i64;
        let Json.1229 : List U8 = Array [Json.1230];
        let Json.1227 : List U8 = CallByName List.8 Json.1228 Json.1229;
        let Json.1224 : List U8 = CallByName List.8 Json.1227 Json.184;
        let Json.1226 : U8 = 34i64;
        let Json.1225 : List U8 = Array [Json.1226];
        let Json.1223 : List U8 = CallByName List.8 Json.1224 Json.1225;
        ret Json.1223;
    else
        inc Json.184;
        let Json.1265 : U64 = StructAtIndex 0 Json.186;
        let Json.1264 : {List U8, List U8} = CallByName List.52 Json.184 Json.1265;
        let Json.210 : List U8 = StructAtIndex 0 Json.1264;
        let Json.212 : List U8 = StructAtIndex 1 Json.1264;
        let Json.1262 : U64 = CallByName List.6 Json.184;
        dec Json.184;
        let Json.1263 : U64 = 120i64;
        let Json.1260 : U64 = CallByName Num.21 Json.1262 Json.1263;
        let Json.1261 : U64 = 100i64;
        let Json.1259 : U64 = CallByName Num.94 Json.1260 Json.1261;
        let Json.1256 : List U8 = CallByName List.68 Json.1259;
        let Json.1258 : U8 = 34i64;
        let Json.1257 : List U8 = Array [Json.1258];
        let Json.1255 : List U8 = CallByName List.8 Json.1256 Json.1257;
        let Json.213 : List U8 = CallByName List.8 Json.1255 Json.210;
        let Json.1238 : {} = Struct {};
        let Json.1235 : List U8 = CallByName List.18 Json.212 Json.213 Json.1238;
        let Json.1237 : U8 = 34i64;
        let Json.1236 : List U8 = Array [Json.1237];
        let Json.1234 : List U8 = CallByName List.8 Json.1235 Json.1236;
        ret Json.1234;

procedure Json.26 (Json.217):
    switch Json.217:
        case 34:
            let Json.1241 : List U8 = Array [92i64, 34i64];
            ret Json.1241;
    
        case 92:
            let Json.1242 : List U8 = Array [92i64, 92i64];
            ret Json.1242;
    
        case 47:
            let Json.1243 : List U8 = Array [92i64, 47i64];
            ret Json.1243;
    
        case 8:
            let Json.1245 : U8 = 98i64;
            let Json.1244 : List U8 = Array [92i64, Json.1245];
            ret Json.1244;
    
        case 12:
            let Json.1247 : U8 = 102i64;
            let Json.1246 : List U8 = Array [92i64, Json.1247];
            ret Json.1246;
    
        case 10:
            let Json.1249 : U8 = 110i64;
            let Json.1248 : List U8 = Array [92i64, Json.1249];
            ret Json.1248;
    
        case 13:
            let Json.1251 : U8 = 114i64;
            let Json.1250 : List U8 = Array [92i64, Json.1251];
            ret Json.1250;
    
        case 9:
            let Json.1253 : U8 = 114i64;
            let Json.1252 : List U8 = Array [92i64, Json.1253];
            ret Json.1252;
    
        default:
            let Json.1254 : List U8 = Array [Json.217];
            ret Json.1254;
    

procedure Json.263 (Json.264, Json.1174, #Attr.12):
    let Json.262 : List Str = StructAtIndex 1 #Attr.12;
    let Json.261 : Str = StructAtIndex 0 #Attr.12;
    let Json.1212 : I64 = 123i64;
    let Json.1211 : U8 = CallByName Num.127 Json.1212;
    let Json.1208 : List U8 = CallByName List.4 Json.264 Json.1211;
    let Json.1210 : I64 = 34i64;
    let Json.1209 : U8 = CallByName Num.127 Json.1210;
    let Json.1206 : List U8 = CallByName List.4 Json.1208 Json.1209;
    let Json.1207 : List U8 = CallByName Str.12 Json.261;
    let Json.1203 : List U8 = CallByName List.8 Json.1206 Json.1207;
    let Json.1205 : I64 = 34i64;
    let Json.1204 : U8 = CallByName Num.127 Json.1205;
    let Json.1200 : List U8 = CallByName List.4 Json.1203 Json.1204;
    let Json.1202 : I64 = 58i64;
    let Json.1201 : U8 = CallByName Num.127 Json.1202;
    let Json.1197 : List U8 = CallByName List.4 Json.1200 Json.1201;
    let Json.1199 : I64 = 91i64;
    let Json.1198 : U8 = CallByName Num.127 Json.1199;
    let Json.267 : List U8 = CallByName List.4 Json.1197 Json.1198;
    let Json.1196 : U64 = CallByName List.6 Json.262;
    let Json.1184 : {List U8, U64} = Struct {Json.267, Json.1196};
    let Json.1183 : {List U8, U64} = CallByName List.18 Json.262 Json.1184 Json.1174;
    let Json.269 : List U8 = StructAtIndex 0 Json.1183;
    let Json.1182 : I64 = 93i64;
    let Json.1181 : U8 = CallByName Num.127 Json.1182;
    let Json.1178 : List U8 = CallByName List.4 Json.269 Json.1181;
    let Json.1180 : I64 = 125i64;
    let Json.1179 : U8 = CallByName Num.127 Json.1180;
    let Json.1177 : List U8 = CallByName List.4 Json.1178 Json.1179;
    ret Json.1177;

procedure Json.266 (Json.1176, Json.272, Json.265):
    let Json.270 : List U8 = StructAtIndex 0 Json.1176;
    let Json.271 : U64 = StructAtIndex 1 Json.1176;
    let Json.273 : List U8 = CallByName Encode.24 Json.270 Json.272 Json.265;
    joinpoint Json.1190 Json.274:
        let Json.1188 : U64 = 1i64;
        let Json.1187 : U64 = CallByName Num.20 Json.271 Json.1188;
        let Json.1186 : {List U8, U64} = Struct {Json.274, Json.1187};
        ret Json.1186;
    in
    let Json.1194 : U64 = 1i64;
    let Json.1191 : Int1 = CallByName Num.24 Json.271 Json.1194;
    if Json.1191 then
        let Json.1193 : I64 = 44i64;
        let Json.1192 : U8 = CallByName Num.127 Json.1193;
        let Json.1189 : List U8 = CallByName List.4 Json.273 Json.1192;
        jump Json.1190 Json.1189;
    else
        jump Json.1190 Json.273;

procedure Json.31 (Json.261, Json.262):
    let Json.1214 : {Str, List Str} = Struct {Json.261, Json.262};
    let Json.1213 : {Str, List Str} = CallByName Encode.23 Json.1214;
    ret Json.1213;

procedure List.145 (List.146, List.147, List.144):
    let List.566 : {List U8, U64} = CallByName Json.266 List.146 List.147 List.144;
    ret List.566;

procedure List.145 (List.146, List.147, List.144):
    let List.586 : List U8 = CallByName Json.214 List.146 List.147;
    ret List.586;

procedure List.18 (List.142, List.143, List.144):
    let List.547 : {List U8, U64} = CallByName List.93 List.142 List.143 List.144;
    ret List.547;

procedure List.18 (List.142, List.143, List.144):
    let List.567 : List U8 = CallByName List.93 List.142 List.143 List.144;
    ret List.567;

procedure List.26 (List.159, List.160, List.161):
    let List.617 : [C {U64, Int1}, C {U64, Int1}] = CallByName List.93 List.159 List.160 List.161;
    let List.620 : U8 = 1i64;
    let List.621 : U8 = GetTagId List.617;
    let List.622 : Int1 = lowlevel Eq List.620 List.621;
    if List.622 then
        let List.162 : {U64, Int1} = UnionAtIndex (Id 1) (Index 0) List.617;
        ret List.162;
    else
        let List.163 : {U64, Int1} = UnionAtIndex (Id 0) (Index 0) List.617;
        ret List.163;

procedure List.4 (List.113, List.114):
    let List.546 : U64 = 1i64;
    let List.545 : List U8 = CallByName List.70 List.113 List.546;
    let List.544 : List U8 = CallByName List.71 List.545 List.114;
    ret List.544;

procedure List.49 (List.376, List.377):
    let List.609 : U64 = StructAtIndex 0 List.377;
    let List.610 : U64 = 0i64;
    let List.607 : Int1 = CallByName Bool.11 List.609 List.610;
    if List.607 then
        dec List.376;
        let List.608 : List U8 = Array [];
        ret List.608;
    else
        let List.604 : U64 = StructAtIndex 1 List.377;
        let List.605 : U64 = StructAtIndex 0 List.377;
        let List.603 : List U8 = CallByName List.72 List.376 List.604 List.605;
        ret List.603;

procedure List.52 (List.391, List.392):
    let List.393 : U64 = CallByName List.6 List.391;
    joinpoint List.615 List.394:
        let List.613 : U64 = 0i64;
        let List.612 : {U64, U64} = Struct {List.394, List.613};
        inc List.391;
        let List.395 : List U8 = CallByName List.49 List.391 List.612;
        let List.611 : U64 = CallByName Num.20 List.393 List.394;
        let List.602 : {U64, U64} = Struct {List.611, List.394};
        let List.396 : List U8 = CallByName List.49 List.391 List.602;
        let List.601 : {List U8, List U8} = Struct {List.395, List.396};
        ret List.601;
    in
    let List.616 : Int1 = CallByName Num.24 List.393 List.392;
    if List.616 then
        jump List.615 List.392;
    else
        jump List.615 List.393;

procedure List.6 (#Attr.2):
    let List.587 : U64 = lowlevel ListLen #Attr.2;
    ret List.587;

procedure List.6 (#Attr.2):
    let List.589 : U64 = lowlevel ListLen #Attr.2;
    ret List.589;

procedure List.66 (#Attr.2, #Attr.3):
    let List.563 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.563;

procedure List.66 (#Attr.2, #Attr.3):
    let List.583 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.583;

procedure List.68 (#Attr.2):
    let List.600 : List U8 = lowlevel ListWithCapacity #Attr.2;
    ret List.600;

procedure List.70 (#Attr.2, #Attr.3):
    let List.525 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.525;

procedure List.71 (#Attr.2, #Attr.3):
    let List.523 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.523;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.606 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.606;

procedure List.8 (#Attr.2, #Attr.3):
    let List.598 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.598;

procedure List.80 (List.647, List.648, List.649, List.650, List.651):
    joinpoint List.553 List.439 List.440 List.441 List.442 List.443:
        let List.555 : Int1 = CallByName Num.22 List.442 List.443;
        if List.555 then
            let List.562 : Str = CallByName List.66 List.439 List.442;
            inc List.562;
            let List.556 : {List U8, U64} = CallByName List.145 List.440 List.562 List.441;
            let List.559 : U64 = 1i64;
            let List.558 : U64 = CallByName Num.19 List.442 List.559;
            jump List.553 List.439 List.556 List.441 List.558 List.443;
        else
            dec List.439;
            ret List.440;
    in
    jump List.553 List.647 List.648 List.649 List.650 List.651;

procedure List.80 (List.664, List.665, List.666, List.667, List.668):
    joinpoint List.573 List.439 List.440 List.441 List.442 List.443:
        let List.575 : Int1 = CallByName Num.22 List.442 List.443;
        if List.575 then
            let List.582 : U8 = CallByName List.66 List.439 List.442;
            let List.576 : List U8 = CallByName List.145 List.440 List.582 List.441;
            let List.579 : U64 = 1i64;
            let List.578 : U64 = CallByName Num.19 List.442 List.579;
            jump List.573 List.439 List.576 List.441 List.578 List.443;
        else
            dec List.439;
            ret List.440;
    in
    jump List.573 List.664 List.665 List.666 List.667 List.668;

procedure List.80 (List.691, List.692, List.693, List.694, List.695):
    joinpoint List.626 List.439 List.440 List.441 List.442 List.443:
        let List.628 : Int1 = CallByName Num.22 List.442 List.443;
        if List.628 then
            let List.637 : U8 = CallByName List.66 List.439 List.442;
            let List.629 : [C {U64, Int1}, C {U64, Int1}] = CallByName Json.188 List.440 List.637;
            let List.634 : U8 = 1i64;
            let List.635 : U8 = GetTagId List.629;
            let List.636 : Int1 = lowlevel Eq List.634 List.635;
            if List.636 then
                let List.444 : {U64, Int1} = UnionAtIndex (Id 1) (Index 0) List.629;
                let List.632 : U64 = 1i64;
                let List.631 : U64 = CallByName Num.19 List.442 List.632;
                jump List.626 List.439 List.444 List.441 List.631 List.443;
            else
                dec List.439;
                let List.445 : {U64, Int1} = UnionAtIndex (Id 0) (Index 0) List.629;
                let List.633 : [C {U64, Int1}, C {U64, Int1}] = TagId(0) List.445;
                ret List.633;
        else
            dec List.439;
            let List.627 : [C {U64, Int1}, C {U64, Int1}] = TagId(1) List.440;
            ret List.627;
    in
    jump List.626 List.691 List.692 List.693 List.694 List.695;

procedure List.93 (List.436, List.437, List.438):
    let List.551 : U64 = 0i64;
    let List.552 : U64 = CallByName List.6 List.436;
    let List.550 : {List U8, U64} = CallByName List.80 List.436 List.437 List.438 List.551 List.552;
    ret List.550;

procedure List.93 (List.436, List.437, List.438):
    let List.571 : U64 = 0i64;
    let List.572 : U64 = CallByName List.6 List.436;
    let List.570 : List U8 = CallByName List.80 List.436 List.437 List.438 List.571 List.572;
    ret List.570;

procedure List.93 (List.436, List.437, List.438):
    let List.624 : U64 = 0i64;
    let List.625 : U64 = CallByName List.6 List.436;
    let List.623 : [C {U64, Int1}, C {U64, Int1}] = CallByName List.80 List.436 List.437 List.438 List.624 List.625;
    ret List.623;

procedure Num.127 (#Attr.2):
    let Num.288 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.288;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.297 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.297;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.301 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.301;

procedure Num.21 (#Attr.2, #Attr.3):
    let Num.294 : U64 = lowlevel NumMul #Attr.2 #Attr.3;
    ret Num.294;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.300 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.300;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.302 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.302;

procedure Num.94 (#Attr.2, #Attr.3):
    let Num.293 : U64 = lowlevel NumDivCeilUnchecked #Attr.2 #Attr.3;
    ret Num.293;

procedure Str.12 (#Attr.2):
    let Str.299 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.299;

procedure Test.2 (Test.10):
    let Test.15 : {Str, Str} = CallByName Encode.23 Test.10;
    ret Test.15;

procedure Test.3 ():
    let Test.9 : Str = "";
    inc Test.9;
    let Test.14 : {Str, Str} = Struct {Test.9, Test.9};
    ret Test.14;

procedure Test.5 (Test.6, Test.7, Test.4):
    joinpoint Test.20 Test.8:
        let Test.18 : List U8 = CallByName Encode.24 Test.6 Test.8 Test.7;
        ret Test.18;
    in
    let Test.25 : Int1 = CallByName Bool.2;
    if Test.25 then
        let Test.26 : Str = "A";
        let Test.29 : Str = StructAtIndex 0 Test.4;
        let #Derived_gen.0 : Str = StructAtIndex 1 Test.4;
        dec #Derived_gen.0;
        let Test.28 : Str = CallByName Json.24 Test.29;
        let Test.27 : List Str = Array [Test.28];
        let Test.19 : {Str, List Str} = CallByName Json.31 Test.26 Test.27;
        jump Test.20 Test.19;
    else
        let Test.21 : Str = "B";
        let Test.24 : Str = StructAtIndex 1 Test.4;
        let #Derived_gen.1 : Str = StructAtIndex 0 Test.4;
        dec #Derived_gen.1;
        let Test.23 : Str = CallByName Json.24 Test.24;
        let Test.22 : List Str = Array [Test.23];
        let Test.19 : {Str, List Str} = CallByName Json.31 Test.21 Test.22;
        jump Test.20 Test.19;

procedure Test.0 ():
    let Test.12 : {Str, Str} = CallByName Test.3;
    let Test.13 : [C , C [], C , C , C , C ] = CallByName Json.1;
    let Test.11 : List U8 = CallByName Encode.26 Test.12 Test.13;
    ret Test.11;
