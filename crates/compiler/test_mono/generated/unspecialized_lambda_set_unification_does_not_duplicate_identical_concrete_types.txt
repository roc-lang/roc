procedure Bool.2 ():
    let Bool.21 : Int1 = true;
    ret Bool.21;

procedure Encode.23 (Encode.100):
    ret Encode.100;

procedure Encode.23 (Encode.100):
    ret Encode.100;

procedure Encode.23 (Encode.100):
    ret Encode.100;

procedure Encode.24 (Encode.101, Encode.109, Encode.103):
    let Encode.113 : List U8 = CallByName Test.213 Encode.101 Encode.103 Encode.109;
    ret Encode.113;

procedure Encode.24 (Encode.101, Encode.109, Encode.103):
    let Encode.117 : List U8 = CallByName Test.63 Encode.101 Encode.103 Encode.109;
    ret Encode.117;

procedure Encode.24 (Encode.101, Encode.109, Encode.103):
    let Encode.118 : List U8 = CallByName Test.59 Encode.101 Encode.103 Encode.109;
    ret Encode.118;

procedure Encode.26 (Encode.107, Encode.108):
    let Encode.111 : List U8 = Array [];
    let Encode.112 : {Str, Str} = CallByName Test.49 Encode.107;
    let Encode.110 : List U8 = CallByName Encode.24 Encode.111 Encode.112 Encode.108;
    ret Encode.110;

procedure List.101 (#Derived_gen.9, #Derived_gen.10, #Derived_gen.11, #Derived_gen.12, #Derived_gen.13):
    joinpoint List.678 List.175 List.176 List.177 List.178 List.179:
        let List.680 : Int1 = CallByName Num.22 List.178 List.179;
        if List.680 then
            let List.684 : Str = CallByName List.66 List.175 List.178;
            inc List.684;
            let List.180 : List U8 = CallByName Test.66 List.176 List.684 List.177;
            let List.683 : U64 = 1i64;
            let List.682 : U64 = CallByName Num.51 List.178 List.683;
            jump List.678 List.175 List.180 List.177 List.682 List.179;
        else
            dec List.175;
            ret List.176;
    in
    inc #Derived_gen.9;
    jump List.678 #Derived_gen.9 #Derived_gen.10 #Derived_gen.11 #Derived_gen.12 #Derived_gen.13;

procedure List.13 (#Attr.2, #Attr.3):
    let List.701 : List Str = lowlevel ListPrepend #Attr.2 #Attr.3;
    ret List.701;

procedure List.18 (List.172, List.173, List.174):
    let List.676 : U64 = 0i64;
    let List.677 : U64 = CallByName List.6 List.172;
    let List.675 : List U8 = CallByName List.101 List.172 List.173 List.174 List.676 List.677;
    ret List.675;

procedure List.4 (List.136, List.137):
    let List.697 : U64 = 1i64;
    let List.696 : List U8 = CallByName List.70 List.136 List.697;
    let List.695 : List U8 = CallByName List.71 List.696 List.137;
    ret List.695;

procedure List.6 (#Attr.2):
    let List.700 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.700;

procedure List.66 (#Attr.2, #Attr.3):
    let List.685 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.685;

procedure List.70 (#Attr.2, #Attr.3):
    let List.691 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.691;

procedure List.71 (#Attr.2, #Attr.3):
    let List.689 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.689;

procedure List.8 (#Attr.2, #Attr.3):
    let List.699 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.699;

procedure Num.127 (#Attr.2):
    let Num.284 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.284;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.286 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.286;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.285 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.285;

procedure Num.96 (#Attr.2):
    let Num.283 : Str = lowlevel NumToStr #Attr.2;
    ret Num.283;

procedure Str.12 (#Attr.2):
    let Str.386 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.386;

procedure Str.36 (#Attr.2):
    let Str.387 : U64 = lowlevel StrCountUtf8Bytes #Attr.2;
    ret Str.387;

procedure Test.20 (Test.58):
    let Test.295 : Str = CallByName Encode.23 Test.58;
    ret Test.295;

procedure Test.21 (Test.61, Test.62):
    inc Test.61;
    let Test.275 : {List Str, {}} = Struct {Test.61, Test.62};
    let Test.274 : {List Str, {}} = CallByName Encode.23 Test.275;
    ret Test.274;

procedure Test.213 (Test.214, Test.215, Test.212):
    joinpoint Test.267 Test.216:
        let Test.265 : List U8 = CallByName Encode.24 Test.214 Test.216 Test.215;
        ret Test.265;
    in
    let Test.308 : Int1 = CallByName Bool.2;
    if Test.308 then
        let Test.309 : Str = "A";
        let Test.312 : Str = StructAtIndex 0 Test.212;
        let #Derived_gen.17 : Str = StructAtIndex 1 Test.212;
        dec #Derived_gen.17;
        let Test.311 : Str = CallByName Test.20 Test.312;
        let Test.310 : List Str = Array [Test.311];
        let Test.266 : {List Str, {}} = CallByName Test.24 Test.309 Test.310;
        jump Test.267 Test.266;
    else
        let Test.268 : Str = "B";
        let Test.307 : Str = StructAtIndex 1 Test.212;
        let #Derived_gen.18 : Str = StructAtIndex 0 Test.212;
        dec #Derived_gen.18;
        let Test.306 : Str = CallByName Test.20 Test.307;
        let Test.269 : List Str = Array [Test.306];
        let Test.266 : {List Str, {}} = CallByName Test.24 Test.268 Test.269;
        jump Test.267 Test.266;

procedure Test.23 (Test.77):
    let Test.273 : {} = Struct {};
    let Test.272 : {List Str, {}} = CallByName Test.21 Test.77 Test.273;
    ret Test.272;

procedure Test.24 (Test.80, Test.81):
    let Test.294 : Str = CallByName Test.20 Test.80;
    let Test.271 : List Str = CallByName List.13 Test.81 Test.294;
    let Test.270 : {List Str, {}} = CallByName Test.23 Test.271;
    dec Test.271;
    ret Test.270;

procedure Test.3 ():
    let Test.260 : {} = Struct {};
    ret Test.260;

procedure Test.4 (Test.51, Test.52, Test.53):
    let Test.292 : U8 = CallByName Num.127 Test.52;
    let Test.289 : List U8 = CallByName List.4 Test.51 Test.292;
    let Test.291 : Str = CallByName Num.96 Test.53;
    let Test.290 : List U8 = CallByName Str.12 Test.291;
    let Test.287 : List U8 = CallByName List.8 Test.289 Test.290;
    let Test.288 : U8 = 32i64;
    let Test.286 : List U8 = CallByName List.4 Test.287 Test.288;
    ret Test.286;

procedure Test.49 (Test.255):
    let Test.262 : {Str, Str} = CallByName Encode.23 Test.255;
    ret Test.262;

procedure Test.50 ():
    let Test.217 : Str = "";
    inc Test.217;
    let Test.261 : {Str, Str} = Struct {Test.217, Test.217};
    ret Test.261;

procedure Test.59 (Test.60, Test.297, Test.58):
    let Test.304 : I64 = 115i64;
    let Test.305 : U64 = CallByName Str.36 Test.58;
    let Test.302 : List U8 = CallByName Test.4 Test.60 Test.304 Test.305;
    let Test.303 : List U8 = CallByName Str.12 Test.58;
    let Test.300 : List U8 = CallByName List.8 Test.302 Test.303;
    let Test.301 : U8 = 32i64;
    let Test.299 : List U8 = CallByName List.4 Test.300 Test.301;
    ret Test.299;

procedure Test.63 (Test.64, Test.276, #Attr.12):
    let Test.62 : {} = StructAtIndex 1 #Attr.12;
    let Test.61 : List Str = StructAtIndex 0 #Attr.12;
    let Test.284 : I64 = 108i64;
    let Test.285 : U64 = CallByName List.6 Test.61;
    let Test.65 : List U8 = CallByName Test.4 Test.64 Test.284 Test.285;
    let Test.278 : List U8 = CallByName List.18 Test.61 Test.65 Test.62;
    dec Test.61;
    ret Test.278;

procedure Test.66 (Test.67, Test.68, Test.62):
    let Test.282 : Str = CallByName Test.78 Test.68;
    let Test.283 : {} = Struct {};
    let Test.281 : List U8 = CallByName Encode.24 Test.67 Test.282 Test.283;
    ret Test.281;

procedure Test.78 (Test.79):
    ret Test.79;

procedure Test.0 ():
    let Test.258 : {Str, Str} = CallByName Test.50;
    let Test.259 : {} = CallByName Test.3;
    let Test.257 : List U8 = CallByName Encode.26 Test.258 Test.259;
    ret Test.257;
