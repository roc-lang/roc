procedure List.3 (List.131, List.132, List.133):
    let List.697 : {List I64, I64} = CallByName List.64 List.131 List.132 List.133;
    let List.696 : List I64 = StructAtIndex 0 List.697;
    ret List.696;

procedure List.6 (#Attr.2):
    let List.695 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.695;

procedure List.64 (List.128, List.129, List.130):
    let List.702 : U64 = CallByName List.6 List.128;
    let List.699 : Int1 = CallByName Num.22 List.129 List.702;
    if List.699 then
        let List.700 : {List I64, I64} = CallByName List.67 List.128 List.129 List.130;
        ret List.700;
    else
        let List.698 : {List I64, I64} = Struct {List.128, List.130};
        ret List.698;

procedure List.67 (#Attr.2, #Attr.3, #Attr.4):
    let List.701 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.701;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.289 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.289;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.290 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.290;

procedure Test.1 ():
    let Test.8 : List I64 = Array [1i64, 2i64, 3i64];
    ret Test.8;

procedure Test.2 (Test.3):
    let Test.12 : U64 = 0i64;
    let Test.13 : I64 = 0i64;
    let Test.11 : List I64 = CallByName List.3 Test.3 Test.12 Test.13;
    ret Test.11;

procedure Test.0 ():
    let Test.10 : List I64 = CallByName Test.1;
    let Test.9 : List I64 = CallByName Test.2 Test.10;
    let Test.5 : U64 = CallByName List.6 Test.9;
    dec Test.9;
    let Test.7 : List I64 = CallByName Test.1;
    let Test.6 : U64 = CallByName List.6 Test.7;
    dec Test.7;
    let Test.4 : U64 = CallByName Num.19 Test.5 Test.6;
    ret Test.4;
