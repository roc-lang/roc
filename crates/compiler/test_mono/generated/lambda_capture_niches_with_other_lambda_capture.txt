procedure Test.1 (Test.5):
    let Test.16 : [C {}, C U64, C Str] = TagId(0) Test.5;
    ret Test.16;

procedure Test.1 (Test.5):
    let Test.30 : [C {}, C U64, C Str] = TagId(1) Test.5;
    ret Test.30;

procedure Test.2 (Test.7):
    let Test.23 : [C {}, C U64, C Str] = TagId(2) Test.7;
    ret Test.23;

procedure Test.6 (Test.17, #Attr.12):
    let Test.20 : {} = UnionAtIndex (Id 0) (Index 0) #Attr.12;
    let Test.19 : Str = "";
    ret Test.19;

procedure Test.6 (Test.17, #Attr.12):
    let Test.34 : U64 = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    let Test.33 : Str = "";
    ret Test.33;

procedure Test.8 (Test.24, #Attr.12):
    let Test.27 : Str = UnionAtIndex (Id 2) (Index 0) #Attr.12;
    ret Test.27;

procedure Test.0 ():
    let Test.3 : U8 = 0u8;
    joinpoint Test.13 Test.4:
        let Test.11 : {} = Struct {};
        let Test.12 : U8 = GetTagId Test.4;
        switch Test.12:
            case 0:
                let Test.10 : Str = CallByName Test.6 Test.11 Test.4;
                ret Test.10;
        
            case 1:
                let Test.10 : Str = CallByName Test.6 Test.11 Test.4;
                ret Test.10;
        
            default:
                let Test.10 : Str = CallByName Test.8 Test.11 Test.4;
                ret Test.10;
        
    in
    switch Test.3:
        case 0:
            let Test.15 : {} = Struct {};
            let Test.14 : [C {}, C U64, C Str] = CallByName Test.1 Test.15;
            jump Test.13 Test.14;
    
        case 1:
            let Test.22 : Str = "foo";
            let Test.21 : [C {}, C U64, C Str] = CallByName Test.2 Test.22;
            jump Test.13 Test.21;
    
        default:
            let Test.29 : U64 = 1i64;
            let Test.28 : [C {}, C U64, C Str] = CallByName Test.1 Test.29;
            jump Test.13 Test.28;
    
