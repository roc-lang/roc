procedure Test.2 (Test.5):
    let Test.17 : [<rnu><null>, C I64 *self] = TagId(1) ;
    let Test.16 : [<rnu><null>, C I64 *self] = CallByName Test.3 Test.17 Test.5;
    ret Test.16;

procedure Test.3 (Bool.21, Bool.22):
    joinpoint Test.18 Test.7 Test.8:
        let Test.22 : U8 = 1i64;
        let Test.23 : U8 = GetTagId Test.8;
        let Test.24 : Int1 = lowlevel Eq Test.22 Test.23;
        if Test.24 then
            ret Test.7;
        else
            let Test.9 : I64 = UnionAtIndex (Id 0) (Index 0) Test.8;
            let Test.10 : [<rnu><null>, C I64 *self] = UnionAtIndex (Id 0) (Index 1) Test.8;
            joinpoint Bool.23 Bool.25:
                let Test.21 : [<rnu><null>, C I64 *self] = Reuse Bool.25 UpdateModeId { id: 1 } TagId(0) Test.9 Test.7;
                jump Test.18 Test.21 Test.10;
            in
            let Bool.24 : Int1 = lowlevel RefCountIsUnique Test.8;
            if Bool.24 then
                jump Bool.23 Test.8;
            else
                inc Test.10;
                decref Test.8;
                let Bool.26 : [<rnu><null>, C I64 *self] = NullPointer;
                jump Bool.23 Bool.26;
    in
    jump Test.18 Bool.21 Bool.22;

procedure Test.0 ():
    let Test.25 : I64 = 42i64;
    let Test.26 : [<rnu><null>, C I64 *self] = TagId(1) ;
    let Test.15 : [<rnu><null>, C I64 *self] = TagId(0) Test.25 Test.26;
    let Test.14 : [<rnu><null>, C I64 *self] = CallByName Test.2 Test.15;
    ret Test.14;
