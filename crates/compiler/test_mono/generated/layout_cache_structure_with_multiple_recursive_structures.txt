procedure List.18 (List.145, List.146, List.147):
    let List.536 : U64 = 0i64;
    let List.537 : U64 = CallByName List.6 List.145;
    let List.535 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName List.86 List.145 List.146 List.147 List.536 List.537;
    ret List.535;

procedure List.6 (#Attr.2):
    let List.546 : U64 = lowlevel ListLen #Attr.2;
    ret List.546;

procedure List.66 (#Attr.2, #Attr.3):
    let List.545 : [<rnu>C *self, <null>] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.545;

procedure List.86 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.538 List.148 List.149 List.150 List.151 List.152:
        let List.540 : Int1 = CallByName Num.22 List.151 List.152;
        if List.540 then
            let List.544 : [<rnu>C *self, <null>] = CallByName List.66 List.148 List.151;
            inc List.544;
            let List.153 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName Test.7 List.149 List.544;
            let List.543 : U64 = 1i64;
            let List.542 : U64 = CallByName Num.51 List.151 List.543;
            jump List.538 List.148 List.153 List.150 List.542 List.152;
        else
            dec List.148;
            ret List.149;
    in
    jump List.538 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.292 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.292;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.291 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.291;

procedure Test.7 (Test.11, Test.12):
    let Test.17 : {[<rnu>C *self, <null>], [<rnu><null>, C {[<rnu>C *self, <null>], *self}]} = Struct {Test.12, Test.11};
    let Test.16 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = TagId(0) Test.17;
    ret Test.16;

procedure Test.0 ():
    let Test.6 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = TagId(1) ;
    let Test.8 : List [<rnu>C *self, <null>] = Array [];
    let Test.15 : {} = Struct {};
    let Test.9 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName List.18 Test.8 Test.6 Test.15;
    ret Test.9;
