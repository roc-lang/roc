procedure List.100 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.662 List.174 List.175 List.176 List.177 List.178:
        let List.664 : Int1 = CallByName Num.22 List.177 List.178;
        if List.664 then
            let List.668 : [<rnu>C *self, <null>] = CallByName List.66 List.174 List.177;
            inc List.668;
            let List.179 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName Test.7 List.175 List.668;
            let List.667 : U64 = 1i64;
            let List.666 : U64 = CallByName Num.51 List.177 List.667;
            jump List.662 List.174 List.179 List.176 List.666 List.178;
        else
            dec List.174;
            ret List.175;
    in
    inc #Derived_gen.0;
    jump List.662 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure List.18 (List.171, List.172, List.173):
    let List.660 : U64 = 0i64;
    let List.661 : U64 = CallByName List.6 List.171;
    let List.659 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName List.100 List.171 List.172 List.173 List.660 List.661;
    ret List.659;

procedure List.6 (#Attr.2):
    let List.670 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.670;

procedure List.66 (#Attr.2, #Attr.3):
    let List.669 : [<rnu>C *self, <null>] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.669;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.286 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.286;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.285 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.285;

procedure Test.7 (Test.11, Test.12):
    let Test.17 : {[<rnu>C *self, <null>], [<rnu><null>, C {[<rnu>C *self, <null>], *self}]} = Struct {Test.12, Test.11};
    let Test.16 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = TagId(0) Test.17;
    ret Test.16;

procedure Test.0 ():
    let Test.6 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = TagId(1) ;
    let Test.8 : List [<rnu>C *self, <null>] = Array [];
    let Test.15 : {} = Struct {};
    let Test.9 : [<rnu><null>, C {[<rnu>C *self, <null>], *self}] = CallByName List.18 Test.8 Test.6 Test.15;
    dec Test.8;
    ret Test.9;
