procedure Bool.9 (#Attr.2, #Attr.3):
    let Bool.21 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.21;

procedure List.120 (List.590, List.591, List.592):
    let List.720 : U64 = 0i64;
    let List.721 : U64 = CallByName List.6 List.590;
    let List.719 : [C U64, C U64] = CallByName List.80 List.590 List.591 List.592 List.720 List.721;
    ret List.719;

procedure List.26 (List.217, List.218, List.219):
    let List.713 : [C U64, C U64] = CallByName List.120 List.217 List.218 List.219;
    let List.716 : U8 = 1i64;
    let List.717 : U8 = GetTagId List.713;
    let List.718 : Int1 = lowlevel Eq List.716 List.717;
    if List.718 then
        let List.220 : U64 = UnionAtIndex (Id 1) (Index 0) List.713;
        ret List.220;
    else
        let List.221 : U64 = UnionAtIndex (Id 0) (Index 0) List.713;
        ret List.221;

procedure List.38 (List.414, List.415):
    let List.712 : U64 = CallByName List.6 List.414;
    let List.416 : U64 = CallByName Num.77 List.712 List.415;
    let List.702 : List U8 = CallByName List.43 List.414 List.416;
    ret List.702;

procedure List.43 (List.412, List.413):
    let List.710 : U64 = CallByName List.6 List.412;
    let List.709 : U64 = CallByName Num.77 List.710 List.413;
    let List.704 : {U64, U64} = Struct {List.413, List.709};
    let List.703 : List U8 = CallByName List.49 List.412 List.704;
    ret List.703;

procedure List.49 (List.497, List.498):
    let List.706 : U64 = StructAtIndex 1 List.498;
    let List.707 : U64 = StructAtIndex 0 List.498;
    let List.705 : List U8 = CallByName List.72 List.497 List.706 List.707;
    ret List.705;

procedure List.6 (#Attr.2):
    let List.711 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.711;

procedure List.66 (#Attr.2, #Attr.3):
    let List.734 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.734;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.708 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.708;

procedure List.80 (Bool.22, Bool.23, Bool.24, Bool.25, Bool.26):
    joinpoint List.722 List.593 List.594 List.595 List.596 List.597:
        let List.724 : Int1 = CallByName Num.22 List.596 List.597;
        if List.724 then
            let List.733 : U8 = CallByName List.66 List.593 List.596;
            let List.725 : [C U64, C U64] = CallByName Test.3 List.594 List.733;
            let List.730 : U8 = 1i64;
            let List.731 : U8 = GetTagId List.725;
            let List.732 : Int1 = lowlevel Eq List.730 List.731;
            if List.732 then
                let List.598 : U64 = UnionAtIndex (Id 1) (Index 0) List.725;
                let List.728 : U64 = 1i64;
                let List.727 : U64 = CallByName Num.51 List.596 List.728;
                jump List.722 List.593 List.598 List.595 List.727 List.597;
            else
                dec List.593;
                let List.599 : U64 = UnionAtIndex (Id 0) (Index 0) List.725;
                let List.729 : [C U64, C U64] = TagId(0) List.599;
                ret List.729;
        else
            dec List.593;
            let List.723 : [C U64, C U64] = TagId(1) List.594;
            ret List.723;
    in
    inc Bool.22;
    jump List.722 Bool.22 Bool.23 Bool.24 Bool.25 Bool.26;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.292 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.292;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.291 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.291;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.290 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.290;

procedure Test.3 (Test.4, Test.12):
    let Test.13 : [C U64, C U64] = TagId(0) Test.4;
    ret Test.13;

procedure Test.0 (Test.1):
    let Test.10 : U64 = 0i64;
    let Test.11 : {} = Struct {};
    let Test.2 : U64 = CallByName List.26 Test.1 Test.10 Test.11;
    let Test.9 : U64 = 0i64;
    let Test.7 : Int1 = CallByName Bool.9 Test.2 Test.9;
    if Test.7 then
        ret Test.1;
    else
        let Test.6 : List U8 = CallByName List.38 Test.1 Test.2;
        ret Test.6;
