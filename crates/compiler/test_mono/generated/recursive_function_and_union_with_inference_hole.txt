procedure List.102 (Bool.22, Bool.23, Bool.24, Bool.25, Bool.26):
    joinpoint List.689 List.176 List.177 List.178 List.179 List.180:
        let List.691 : Int1 = CallByName Num.22 List.179 List.180;
        if List.691 then
            let List.695 : [<rnnu>C List *self] = CallByName List.66 List.176 List.179;
            inc List.695;
            let List.181 : List [<rnnu>C List *self] = CallByName List.285 List.177 List.695 List.178;
            let List.694 : U64 = 1i64;
            let List.693 : U64 = CallByName Num.51 List.179 List.694;
            jump List.689 List.176 List.181 List.178 List.693 List.180;
        else
            dec List.176;
            ret List.177;
    in
    inc Bool.22;
    jump List.689 Bool.22 Bool.23 Bool.24 Bool.25 Bool.26;

procedure List.18 (List.173, List.174, List.175):
    let List.687 : U64 = 0i64;
    let List.688 : U64 = CallByName List.6 List.173;
    let List.686 : List [<rnnu>C List *self] = CallByName List.102 List.173 List.174 List.175 List.687 List.688;
    ret List.686;

procedure List.285 (List.286, List.287, List.283):
    let List.700 : [<rnnu>C List *self] = CallByName Test.2 List.287;
    let List.699 : List [<rnnu>C List *self] = CallByName List.71 List.286 List.700;
    ret List.699;

procedure List.5 (List.282, List.283):
    let List.284 : U64 = CallByName List.6 List.282;
    let List.684 : List [<rnnu>C List *self] = CallByName List.68 List.284;
    let List.683 : List [<rnnu>C List *self] = CallByName List.18 List.282 List.684 List.283;
    ret List.683;

procedure List.6 (#Attr.2):
    let List.697 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.697;

procedure List.66 (#Attr.2, #Attr.3):
    let List.696 : [<rnnu>C List *self] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.696;

procedure List.68 (#Attr.2):
    let List.702 : List [<rnnu>C List *self] = lowlevel ListWithCapacity #Attr.2;
    ret List.702;

procedure List.71 (#Attr.2, #Attr.3):
    let List.701 : List [<rnnu>C List *self] = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.701;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.290 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.290;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.289 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.289;

procedure Test.2 (Test.5):
    let Test.6 : List [<rnnu>C List *self] = UnionAtIndex (Id 0) (Index 0) Test.5;
    inc Test.6;
    let Bool.30 : [<rnnu>C List *self] = Reset { symbol: Test.5, id: UpdateModeId { id: 0 } };
    let Test.15 : {} = Struct {};
    let Test.7 : List [<rnnu>C List *self] = CallByName List.5 Test.6 Test.15;
    dec Test.6;
    let Test.14 : [<rnnu>C List *self] = Reuse Bool.30 UpdateModeId { id: 0 } TagId(0) Test.7;
    ret Test.14;

procedure Test.0 ():
    let Test.16 : List [<rnnu>C List *self] = Array [];
    let Test.12 : [<rnnu>C List *self] = TagId(0) Test.16;
    let Test.10 : [<rnnu>C List *self] = CallByName Test.2 Test.12;
    dec Test.10;
    let Test.11 : Str = "";
    ret Test.11;
