procedure List.104 (Bool.22, Bool.23, Bool.24, Bool.25, Bool.26):
    joinpoint List.708 List.179 List.180 List.181 List.182 List.183:
        let List.710 : Int1 = CallByName Num.22 List.182 List.183;
        if List.710 then
            let List.714 : [<rnnu>C List *self] = CallByName List.66 List.179 List.182;
            inc List.714;
            let List.184 : List [<rnnu>C List *self] = CallByName List.297 List.180 List.714 List.181;
            let List.713 : U64 = 1i64;
            let List.712 : U64 = CallByName Num.51 List.182 List.713;
            jump List.708 List.179 List.184 List.181 List.712 List.183;
        else
            dec List.179;
            ret List.180;
    in
    inc Bool.22;
    jump List.708 Bool.22 Bool.23 Bool.24 Bool.25 Bool.26;

procedure List.18 (List.176, List.177, List.178):
    let List.706 : U64 = 0i64;
    let List.707 : U64 = CallByName List.6 List.176;
    let List.705 : List [<rnnu>C List *self] = CallByName List.104 List.176 List.177 List.178 List.706 List.707;
    ret List.705;

procedure List.297 (List.298, List.299, List.295):
    let List.719 : [<rnnu>C List *self] = CallByName Test.2 List.299;
    let List.718 : List [<rnnu>C List *self] = CallByName List.71 List.298 List.719;
    ret List.718;

procedure List.5 (List.294, List.295):
    let List.296 : U64 = CallByName List.6 List.294;
    let List.703 : List [<rnnu>C List *self] = CallByName List.68 List.296;
    let List.702 : List [<rnnu>C List *self] = CallByName List.18 List.294 List.703 List.295;
    ret List.702;

procedure List.6 (#Attr.2):
    let List.716 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.716;

procedure List.66 (#Attr.2, #Attr.3):
    let List.715 : [<rnnu>C List *self] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.715;

procedure List.68 (#Attr.2):
    let List.721 : List [<rnnu>C List *self] = lowlevel ListWithCapacity #Attr.2;
    ret List.721;

procedure List.71 (#Attr.2, #Attr.3):
    let List.720 : List [<rnnu>C List *self] = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.720;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.290 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.290;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.289 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.289;

procedure Test.2 (Test.5):
    let Test.6 : List [<rnnu>C List *self] = UnionAtIndex (Id 0) (Index 0) Test.5;
    inc Test.6;
    let Bool.30 : [<rnnu>C List *self] = Reset { symbol: Test.5, id: UpdateModeId { id: 0 } };
    let Test.15 : {} = Struct {};
    let Test.7 : List [<rnnu>C List *self] = CallByName List.5 Test.6 Test.15;
    dec Test.6;
    let Test.14 : [<rnnu>C List *self] = Reuse Bool.30 UpdateModeId { id: 0 } TagId(0) Test.7;
    ret Test.14;

procedure Test.0 ():
    let Test.16 : List [<rnnu>C List *self] = Array [];
    let Test.12 : [<rnnu>C List *self] = TagId(0) Test.16;
    let Test.10 : [<rnnu>C List *self] = CallByName Test.2 Test.12;
    dec Test.10;
    let Test.11 : Str = "";
    ret Test.11;
