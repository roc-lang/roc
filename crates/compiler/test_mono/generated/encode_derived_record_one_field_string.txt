procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Encode.23 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.4, #Derived.1):
    let #Derived_gen.7 : Str = "a";
    let #Derived_gen.8 : Str = CallByName Test.20 #Derived.1;
    let #Derived_gen.6 : {Str, Str} = Struct {#Derived_gen.7, #Derived_gen.8};
    let #Derived_gen.5 : List {Str, Str} = Array [#Derived_gen.6];
    let #Derived_gen.4 : List {Str, Str} = CallByName Test.22 #Derived_gen.5;
    let #Derived_gen.3 : List U8 = CallByName Encode.24 #Derived.3 #Derived_gen.4 #Derived.4;
    dec #Derived_gen.4;
    ret #Derived_gen.3;

procedure Encode.23 (Encode.100):
    ret Encode.100;

procedure Encode.23 (Encode.100):
    ret Encode.100;

procedure Encode.23 (Encode.100):
    ret Encode.100;

procedure Encode.24 (Encode.101, Encode.109, Encode.103):
    let Encode.113 : List U8 = CallByName #Derived.2 Encode.101 Encode.103 Encode.109;
    ret Encode.113;

procedure Encode.24 (Encode.101, Encode.109, Encode.103):
    let Encode.115 : List U8 = CallByName Test.68 Encode.101 Encode.103 Encode.109;
    ret Encode.115;

procedure Encode.24 (Encode.101, Encode.109, Encode.103):
    let Encode.120 : List U8 = CallByName Test.57 Encode.101 Encode.103 Encode.109;
    ret Encode.120;

procedure Encode.26 (Encode.107, Encode.108):
    let Encode.111 : List U8 = Array [];
    let Encode.112 : Str = CallByName #Derived.0 Encode.107;
    let Encode.110 : List U8 = CallByName Encode.24 Encode.111 Encode.112 Encode.108;
    ret Encode.110;

procedure List.101 (#Derived_gen.19, #Derived_gen.20, #Derived_gen.21, #Derived_gen.22, #Derived_gen.23):
    joinpoint List.678 List.175 List.176 List.177 List.178 List.179:
        let List.680 : Int1 = CallByName Num.22 List.178 List.179;
        if List.680 then
            let List.684 : {Str, Str} = CallByName List.66 List.175 List.178;
            inc List.684;
            let List.180 : List U8 = CallByName Test.71 List.176 List.684;
            let List.683 : U64 = 1i64;
            let List.682 : U64 = CallByName Num.51 List.178 List.683;
            jump List.678 List.175 List.180 List.177 List.682 List.179;
        else
            dec List.175;
            ret List.176;
    in
    inc #Derived_gen.19;
    jump List.678 #Derived_gen.19 #Derived_gen.20 #Derived_gen.21 #Derived_gen.22 #Derived_gen.23;

procedure List.18 (List.172, List.173, List.174):
    let List.676 : U64 = 0i64;
    let List.677 : U64 = CallByName List.6 List.172;
    let List.675 : List U8 = CallByName List.101 List.172 List.173 List.174 List.676 List.677;
    ret List.675;

procedure List.4 (List.136, List.137):
    let List.697 : U64 = 1i64;
    let List.696 : List U8 = CallByName List.70 List.136 List.697;
    let List.695 : List U8 = CallByName List.71 List.696 List.137;
    ret List.695;

procedure List.6 (#Attr.2):
    let List.700 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.700;

procedure List.66 (#Attr.2, #Attr.3):
    let List.685 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.685;

procedure List.70 (#Attr.2, #Attr.3):
    let List.691 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.691;

procedure List.71 (#Attr.2, #Attr.3):
    let List.689 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.689;

procedure List.8 (#Attr.2, #Attr.3):
    let List.699 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.699;

procedure Num.127 (#Attr.2):
    let Num.284 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.284;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.286 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.286;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.285 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.285;

procedure Num.96 (#Attr.2):
    let Num.283 : Str = lowlevel NumToStr #Attr.2;
    ret Num.283;

procedure Str.12 (#Attr.2):
    let Str.395 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.395;

procedure Str.36 (#Attr.2):
    let Str.396 : U64 = lowlevel StrCountUtf8Bytes #Attr.2;
    ret Str.396;

procedure Str.43 (#Attr.2):
    let Str.393 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8 #Attr.2;
    ret Str.393;

procedure Str.9 (Str.79):
    let Str.80 : {U64, Str, Int1, U8} = CallByName Str.43 Str.79;
    let Str.390 : Int1 = StructAtIndex 2 Str.80;
    if Str.390 then
        let Str.392 : Str = StructAtIndex 1 Str.80;
        let Str.391 : [C {U64, U8}, C Str] = TagId(1) Str.392;
        ret Str.391;
    else
        let Str.388 : U64 = StructAtIndex 0 Str.80;
        let Str.389 : U8 = StructAtIndex 3 Str.80;
        let #Derived_gen.24 : Str = StructAtIndex 1 Str.80;
        dec #Derived_gen.24;
        let Str.387 : {U64, U8} = Struct {Str.388, Str.389};
        let Str.385 : [C {U64, U8}, C Str] = TagId(0) Str.387;
        ret Str.385;

procedure Test.20 (Test.56):
    let Test.292 : Str = CallByName Encode.23 Test.56;
    ret Test.292;

procedure Test.22 (Test.67):
    let Test.260 : List {Str, Str} = CallByName Encode.23 Test.67;
    ret Test.260;

procedure Test.3 ():
    let Test.258 : {} = Struct {};
    ret Test.258;

procedure Test.4 (Test.49, Test.50, Test.51):
    let Test.289 : U8 = CallByName Num.127 Test.50;
    let Test.286 : List U8 = CallByName List.4 Test.49 Test.289;
    let Test.288 : Str = CallByName Num.96 Test.51;
    let Test.287 : List U8 = CallByName Str.12 Test.288;
    let Test.284 : List U8 = CallByName List.8 Test.286 Test.287;
    let Test.285 : U8 = 32i64;
    let Test.283 : List U8 = CallByName List.4 Test.284 Test.285;
    ret Test.283;

procedure Test.57 (Test.58, Test.274, Test.56):
    let Test.281 : I64 = 115i64;
    let Test.282 : U64 = CallByName Str.36 Test.56;
    let Test.279 : List U8 = CallByName Test.4 Test.58 Test.281 Test.282;
    let Test.280 : List U8 = CallByName Str.12 Test.56;
    let Test.277 : List U8 = CallByName List.8 Test.279 Test.280;
    let Test.278 : U8 = 32i64;
    let Test.276 : List U8 = CallByName List.4 Test.277 Test.278;
    ret Test.276;

procedure Test.68 (Test.69, Test.262, Test.67):
    let Test.290 : I64 = 114i64;
    let Test.291 : U64 = CallByName List.6 Test.67;
    let Test.70 : List U8 = CallByName Test.4 Test.69 Test.290 Test.291;
    let Test.265 : {} = Struct {};
    let Test.264 : List U8 = CallByName List.18 Test.67 Test.70 Test.265;
    ret Test.264;

procedure Test.71 (Test.72, Test.266):
    let Test.73 : Str = StructAtIndex 0 Test.266;
    let Test.74 : Str = StructAtIndex 1 Test.266;
    let Test.270 : Str = CallByName Test.20 Test.73;
    let Test.271 : {} = Struct {};
    let Test.268 : List U8 = CallByName Encode.24 Test.72 Test.270 Test.271;
    let Test.269 : {} = Struct {};
    let Test.267 : List U8 = CallByName Encode.24 Test.268 Test.74 Test.269;
    ret Test.267;

procedure Test.0 ():
    let Test.259 : Str = "foo";
    let Test.257 : {} = CallByName Test.3;
    let Test.255 : List U8 = CallByName Encode.26 Test.259 Test.257;
    let Test.210 : [C {U64, U8}, C Str] = CallByName Str.9 Test.255;
    let Test.252 : U8 = 1i64;
    let Test.253 : U8 = GetTagId Test.210;
    let Test.254 : Int1 = lowlevel Eq Test.252 Test.253;
    if Test.254 then
        let Test.211 : Str = UnionAtIndex (Id 1) (Index 0) Test.210;
        ret Test.211;
    else
        dec Test.210;
        let Test.251 : Str = "<bad>";
        ret Test.251;
