procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Encode.22 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.4, #Derived.1):
    let #Derived_gen.7 : Str = "a";
    let #Derived_gen.8 : Str = CallByName Json.18 #Derived.1;
    let #Derived_gen.6 : {Str, Str} = Struct {#Derived_gen.7, #Derived_gen.8};
    let #Derived_gen.5 : List {Str, Str} = Array [#Derived_gen.6];
    let #Derived_gen.4 : List {Str, Str} = CallByName Json.20 #Derived_gen.5;
    let #Derived_gen.3 : List U8 = CallByName Encode.23 #Derived.3 #Derived_gen.4 #Derived.4;
    ret #Derived_gen.3;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.106 : List U8 = CallByName #Derived.2 Encode.94 Encode.96 Encode.102;
    ret Encode.106;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.113 : List U8 = CallByName Json.113 Encode.94 Encode.96 Encode.102;
    ret Encode.113;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.116 : List U8 = CallByName Json.97 Encode.94 Encode.96 Encode.102;
    ret Encode.116;

procedure Encode.25 (Encode.100, Encode.101):
    let Encode.104 : List U8 = Array [];
    let Encode.105 : Str = CallByName #Derived.0 Encode.100;
    let Encode.103 : List U8 = CallByName Encode.23 Encode.104 Encode.105 Encode.101;
    ret Encode.103;

procedure Json.1 ():
    let Json.396 : {} = Struct {};
    ret Json.396;

procedure Json.113 (Json.114, Json.399, Json.112):
    let Json.432 : I32 = 123i64;
    let Json.431 : U8 = CallByName Num.123 Json.432;
    let Json.116 : List U8 = CallByName List.4 Json.114 Json.431;
    let Json.430 : U64 = CallByName List.6 Json.112;
    let Json.407 : {List U8, U64} = Struct {Json.116, Json.430};
    let Json.408 : {} = Struct {};
    let Json.406 : {List U8, U64} = CallByName List.18 Json.112 Json.407 Json.408;
    dec Json.112;
    let Json.118 : List U8 = StructAtIndex 0 Json.406;
    inc Json.118;
    dec Json.406;
    let Json.405 : I32 = 125i64;
    let Json.404 : U8 = CallByName Num.123 Json.405;
    let Json.403 : List U8 = CallByName List.4 Json.118 Json.404;
    ret Json.403;

procedure Json.115 (Json.401, Json.402):
    let Json.121 : Str = StructAtIndex 0 Json.402;
    inc Json.121;
    let Json.122 : Str = StructAtIndex 1 Json.402;
    inc Json.122;
    dec Json.402;
    let Json.119 : List U8 = StructAtIndex 0 Json.401;
    inc Json.119;
    let Json.120 : U64 = StructAtIndex 1 Json.401;
    dec Json.401;
    let Json.429 : I32 = 34i64;
    let Json.428 : U8 = CallByName Num.123 Json.429;
    let Json.426 : List U8 = CallByName List.4 Json.119 Json.428;
    let Json.427 : List U8 = CallByName Str.12 Json.121;
    let Json.423 : List U8 = CallByName List.8 Json.426 Json.427;
    let Json.425 : I32 = 34i64;
    let Json.424 : U8 = CallByName Num.123 Json.425;
    let Json.420 : List U8 = CallByName List.4 Json.423 Json.424;
    let Json.422 : I32 = 58i64;
    let Json.421 : U8 = CallByName Num.123 Json.422;
    let Json.418 : List U8 = CallByName List.4 Json.420 Json.421;
    let Json.419 : {} = Struct {};
    let Json.123 : List U8 = CallByName Encode.23 Json.418 Json.122 Json.419;
    joinpoint Json.413 Json.124:
        let Json.411 : U64 = 1i64;
        let Json.410 : U64 = CallByName Num.20 Json.120 Json.411;
        let Json.409 : {List U8, U64} = Struct {Json.124, Json.410};
        ret Json.409;
    in
    let Json.417 : U64 = 1i64;
    let Json.414 : Int1 = CallByName Num.24 Json.120 Json.417;
    if Json.414 then
        let Json.416 : I32 = 44i64;
        let Json.415 : U8 = CallByName Num.123 Json.416;
        let Json.412 : List U8 = CallByName List.4 Json.123 Json.415;
        jump Json.413 Json.412;
    else
        jump Json.413 Json.123;

procedure Json.18 (Json.96):
    let Json.433 : Str = CallByName Encode.22 Json.96;
    ret Json.433;

procedure Json.20 (Json.112):
    let Json.397 : List {Str, Str} = CallByName Encode.22 Json.112;
    ret Json.397;

procedure Json.97 (Json.98, Json.435, Json.96):
    let Json.444 : I32 = 34i64;
    let Json.443 : U8 = CallByName Num.123 Json.444;
    let Json.441 : List U8 = CallByName List.4 Json.98 Json.443;
    let Json.442 : List U8 = CallByName Str.12 Json.96;
    let Json.438 : List U8 = CallByName List.8 Json.441 Json.442;
    let Json.440 : I32 = 34i64;
    let Json.439 : U8 = CallByName Num.123 Json.440;
    let Json.437 : List U8 = CallByName List.4 Json.438 Json.439;
    ret Json.437;

procedure List.133 (List.134, List.135, List.132):
    let List.426 : {List U8, U64} = CallByName Json.115 List.134 List.135;
    ret List.426;

procedure List.18 (List.130, List.131, List.132):
    let List.408 : {List U8, U64} = CallByName List.75 List.130 List.131 List.132;
    ret List.408;

procedure List.4 (List.101, List.102):
    let List.407 : U64 = 1i64;
    let List.406 : List U8 = CallByName List.70 List.101 List.407;
    let List.405 : List U8 = CallByName List.71 List.406 List.102;
    ret List.405;

procedure List.6 (#Attr.2):
    let List.380 : U64 = lowlevel ListLen #Attr.2;
    ret List.380;

procedure List.6 (#Attr.2):
    let List.429 : U64 = lowlevel ListLen #Attr.2;
    ret List.429;

procedure List.66 (#Attr.2, #Attr.3):
    let List.423 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.423;

procedure List.70 (#Attr.2, #Attr.3):
    let List.386 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.386;

procedure List.71 (#Attr.2, #Attr.3):
    let List.384 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.384;

procedure List.75 (List.356, List.357, List.358):
    let List.412 : U64 = 0i64;
    let List.413 : U64 = CallByName List.6 List.356;
    let List.411 : {List U8, U64} = CallByName List.86 List.356 List.357 List.358 List.412 List.413;
    ret List.411;

procedure List.8 (#Attr.2, #Attr.3):
    let List.428 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.428;

procedure List.86 (List.439, List.440, List.441, List.442, List.443):
    joinpoint List.414 List.359 List.360 List.361 List.362 List.363:
        let List.416 : Int1 = CallByName Num.22 List.362 List.363;
        if List.416 then
            let List.422 : {Str, Str} = CallByName List.66 List.359 List.362;
            let List.417 : {List U8, U64} = CallByName List.133 List.360 List.422 List.361;
            let List.420 : U64 = 1i64;
            let List.419 : U64 = CallByName Num.19 List.362 List.420;
            jump List.414 List.359 List.417 List.361 List.419 List.363;
        else
            ret List.360;
    in
    jump List.414 List.439 List.440 List.441 List.442 List.443;

procedure Num.123 (#Attr.2):
    let Num.264 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.264;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.267 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.267;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.265 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.265;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.268 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.268;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.266 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.266;

procedure Str.12 (#Attr.2):
    let Str.266 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.266;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.260 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.260;

procedure Str.9 (Str.73):
    let Str.258 : U64 = 0i64;
    let Str.259 : U64 = CallByName List.6 Str.73;
    let Str.74 : {U64, Str, Int1, U8} = CallByName Str.48 Str.73 Str.258 Str.259;
    let Str.255 : Int1 = StructAtIndex 2 Str.74;
    if Str.255 then
        let Str.257 : Str = StructAtIndex 1 Str.74;
        inc Str.257;
        dec Str.74;
        let Str.256 : [C {U64, U8}, C Str] = TagId(1) Str.257;
        ret Str.256;
    else
        let Str.253 : U8 = StructAtIndex 3 Str.74;
        let Str.254 : U64 = StructAtIndex 0 Str.74;
        dec Str.74;
        let Str.252 : {U64, U8} = Struct {Str.254, Str.253};
        let Str.251 : [C {U64, U8}, C Str] = TagId(0) Str.252;
        ret Str.251;

procedure Test.0 ():
    let Test.11 : Str = "foo";
    let Test.10 : {} = CallByName Json.1;
    let Test.8 : List U8 = CallByName Encode.25 Test.11 Test.10;
    let Test.1 : [C {U64, U8}, C Str] = CallByName Str.9 Test.8;
    let Test.5 : U8 = 1i64;
    let Test.6 : U8 = GetTagId Test.1;
    let Test.7 : Int1 = lowlevel Eq Test.5 Test.6;
    if Test.7 then
        let Test.2 : Str = UnionAtIndex (Id 1) (Index 0) Test.1;
        inc Test.2;
        dec Test.1;
        ret Test.2;
    else
        dec Test.1;
        let Test.4 : Str = "<bad>";
        ret Test.4;
