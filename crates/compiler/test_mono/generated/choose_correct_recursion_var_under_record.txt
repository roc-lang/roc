procedure Bool.1 ():
    let Bool.24 : Int1 = false;
    ret Bool.24;

procedure List.2 (List.105, List.106):
    let List.583 : U64 = CallByName List.6 List.105;
    let List.579 : Int1 = CallByName Num.22 List.106 List.583;
    if List.579 then
        let List.581 : Str = CallByName List.66 List.105 List.106;
        inc List.581;
        dec List.105;
        let List.580 : [C {}, C Str] = TagId(1) List.581;
        ret List.580;
    else
        dec List.105;
        let List.578 : {} = Struct {};
        let List.577 : [C {}, C Str] = TagId(0) List.578;
        ret List.577;

procedure List.5 (#Attr.2, #Attr.3):
    let List.585 : List Str = lowlevel ListMap { xs: `#Attr.#arg1` } #Attr.2 Test.10 #Attr.3;
    decref #Attr.2;
    ret List.585;

procedure List.6 (#Attr.2):
    let List.584 : U64 = lowlevel ListLen #Attr.2;
    ret List.584;

procedure List.66 (#Attr.2, #Attr.3):
    let List.582 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.582;

procedure List.9 (List.331):
    let List.576 : U64 = 0i64;
    let List.569 : [C {}, C Str] = CallByName List.2 List.331 List.576;
    let List.573 : U8 = 1i64;
    let List.574 : U8 = GetTagId List.569;
    let List.575 : Int1 = lowlevel Eq List.573 List.574;
    if List.575 then
        let List.332 : Str = UnionAtIndex (Id 1) (Index 0) List.569;
        let List.570 : [C {}, C Str] = TagId(1) List.332;
        ret List.570;
    else
        dec List.569;
        let List.572 : {} = Struct {};
        let List.571 : [C {}, C Str] = TagId(0) List.572;
        ret List.571;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.297 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.297;

procedure Result.5 (Result.12, Result.13):
    let Result.39 : U8 = 1i64;
    let Result.40 : U8 = GetTagId Result.12;
    let Result.41 : Int1 = lowlevel Eq Result.39 Result.40;
    if Result.41 then
        dec Result.13;
        let Result.14 : Str = UnionAtIndex (Id 1) (Index 0) Result.12;
        ret Result.14;
    else
        dec Result.12;
        ret Result.13;

procedure Test.10 (Test.11):
    let Test.12 : Str = CallByName Test.2 Test.11;
    let Test.26 : Int1 = CallByName Bool.1;
    if Test.26 then
        ret Test.12;
    else
        dec Test.12;
        let Test.25 : Str = "foo";
        ret Test.25;

procedure Test.2 (Test.6):
    let Test.29 : U8 = 1i64;
    let Test.30 : U8 = GetTagId Test.6;
    let Test.31 : Int1 = lowlevel Eq Test.29 Test.30;
    if Test.31 then
        let Test.7 : [<r>C List *self, C *self] = UnionAtIndex (Id 1) (Index 0) Test.6;
        joinpoint #Derived_gen.1:
            let Test.8 : Str = CallByName Test.2 Test.7;
            let Test.18 : Int1 = CallByName Bool.1;
            if Test.18 then
                ret Test.8;
            else
                dec Test.8;
                let Test.17 : Str = "foo";
                ret Test.17;
        in
        let #Derived_gen.2 : Int1 = lowlevel RefCountIsUnique Test.6;
        if #Derived_gen.2 then
            free Test.6;
            jump #Derived_gen.1;
        else
            inc Test.7;
            decref Test.6;
            jump #Derived_gen.1;
    else
        let Test.9 : List [<r>C List [<r>C List *self, C *self], C [<r>C List *self, C *self]] = UnionAtIndex (Id 0) (Index 0) Test.6;
        joinpoint #Derived_gen.3:
            let Test.24 : {} = Struct {};
            let Test.23 : List Str = CallByName List.5 Test.9 Test.24;
            let Test.21 : [C {}, C Str] = CallByName List.9 Test.23;
            let Test.22 : Str = "foo";
            let Test.20 : Str = CallByName Result.5 Test.21 Test.22;
            ret Test.20;
        in
        let #Derived_gen.4 : Int1 = lowlevel RefCountIsUnique Test.6;
        if #Derived_gen.4 then
            free Test.6;
            jump #Derived_gen.3;
        else
            inc Test.9;
            decref Test.6;
            jump #Derived_gen.3;

procedure Test.0 ():
    let Test.32 : List [<r>C List [<r>C List *self, C *self], C [<r>C List *self, C *self]] = Array [];
    let Test.15 : [<r>C List *self, C *self] = TagId(0) Test.32;
    let Test.14 : Str = CallByName Test.2 Test.15;
    ret Test.14;
