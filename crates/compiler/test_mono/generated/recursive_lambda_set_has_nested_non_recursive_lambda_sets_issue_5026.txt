procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Test.10 (Test.26):
    dec Test.26;
    let Test.30 : Int1 = CallByName Bool.2;
    if Test.30 then
        let Test.31 : [<rnu><null>, C {}] = CallByName Test.0;
        ret Test.31;
    else
        let Test.27 : [<rnu><null>, C {}] = TagId(1) ;
        ret Test.27;

procedure Test.11 (Test.28):
    let Test.29 : Str = "done";
    ret Test.29;

procedure Test.2 (Test.5):
    let Test.17 : [<rnu><null>, C {}] = TagId(0) Test.5;
    ret Test.17;

procedure Test.3 (Test.7):
    let Test.14 : [<rnu><null>, C {}] = CallByName Test.2 Test.7;
    ret Test.14;

procedure Test.6 (Test.16, #Attr.12):
    let Test.23 : {} = UnionAtIndex (Id 0) (Index 0) #Attr.12;
    joinpoint #Derived_gen.2:
        let Test.19 : {} = Struct {};
        let Test.22 : Str = "foobar";
        let Test.20 : [<rnu><null>, C {}] = CallByName Test.8 Test.22 Test.23;
        let Test.21 : U8 = GetTagId Test.20;
        switch Test.21:
            case 0:
                let Test.18 : Str = CallByName Test.6 Test.19 Test.20;
                ret Test.18;
        
            default:
                dec Test.20;
                let Test.18 : Str = CallByName Test.11 Test.19;
                ret Test.18;
        
    in
    let #Derived_gen.3 : Int1 = lowlevel RefCountIsUnique #Attr.12;
    if #Derived_gen.3 then
        free #Attr.12;
        jump #Derived_gen.2;
    else
        decref #Attr.12;
        jump #Derived_gen.2;

procedure Test.8 (Test.9, Test.7):
    let Test.25 : [<rnu><null>, C {}] = CallByName Test.10 Test.9;
    ret Test.25;

procedure Test.0 ():
    let Test.13 : {} = Struct {};
    let Test.12 : [<rnu><null>, C {}] = CallByName Test.3 Test.13;
    ret Test.12;
