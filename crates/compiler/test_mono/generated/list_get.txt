procedure List.2 (List.123, List.124):
    let List.700 : U64 = CallByName List.6 List.123;
    let List.696 : Int1 = CallByName Num.22 List.124 List.700;
    if List.696 then
        let List.698 : I64 = CallByName List.66 List.123 List.124;
        let List.697 : [C {}, C I64] = TagId(1) List.698;
        ret List.697;
    else
        let List.695 : {} = Struct {};
        let List.694 : [C {}, C I64] = TagId(0) List.695;
        ret List.694;

procedure List.6 (#Attr.2):
    let List.701 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.701;

procedure List.66 (#Attr.2, #Attr.3):
    let List.699 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.699;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.289 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.289;

procedure Test.1 (Test.2):
    let Test.6 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.7 : U64 = 0i64;
    let Test.5 : [C {}, C I64] = CallByName List.2 Test.6 Test.7;
    dec Test.6;
    ret Test.5;

procedure Test.0 ():
    let Test.4 : {} = Struct {};
    let Test.3 : [C {}, C I64] = CallByName Test.1 Test.4;
    ret Test.3;
