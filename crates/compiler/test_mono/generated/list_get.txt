procedure List.2 (List.90, List.91):
    let List.386 : U64 = CallByName List.6 List.90;
    let List.382 : Int1 = CallByName Num.22 List.91 List.386;
    if List.382 then
        let List.384 : I64 = CallByName List.66 List.90 List.91;
        let List.383 : [C {}, C I64] = TagId(1) List.384;
        ret List.383;
    else
        let List.381 : {} = Struct {};
        let List.380 : [C {}, C I64] = TagId(0) List.381;
        ret List.380;

procedure List.6 (#Attr.2):
    let List.387 : U64 = lowlevel ListLen #Attr.2;
    ret List.387;

procedure List.66 (#Attr.2, #Attr.3):
    let List.385 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.385;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.257 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.257;

procedure Test.1 (Test.2):
    let Test.6 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.7 : U64 = 0i64;
    let Test.5 : [C {}, C I64] = CallByName List.2 Test.6 Test.7;
    dec Test.6;
    ret Test.5;

procedure Test.0 ():
    let Test.4 : {} = Struct {};
    let Test.3 : [C {}, C I64] = CallByName Test.1 Test.4;
    ret Test.3;
