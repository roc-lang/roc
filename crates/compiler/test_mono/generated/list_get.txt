procedure List.2 (List.120, List.121):
    let List.681 : U64 = CallByName List.6 List.120;
    let List.677 : Int1 = CallByName Num.22 List.121 List.681;
    if List.677 then
        let List.679 : I64 = CallByName List.66 List.120 List.121;
        let List.678 : [C {}, C I64] = TagId(1) List.679;
        ret List.678;
    else
        let List.676 : {} = Struct {};
        let List.675 : [C {}, C I64] = TagId(0) List.676;
        ret List.675;

procedure List.6 (#Attr.2):
    let List.682 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.682;

procedure List.66 (#Attr.2, #Attr.3):
    let List.680 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.680;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.283 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.283;

procedure Test.1 (Test.2):
    let Test.6 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.7 : U64 = 0i64;
    let Test.5 : [C {}, C I64] = CallByName List.2 Test.6 Test.7;
    dec Test.6;
    ret Test.5;

procedure Test.0 ():
    let Test.4 : {} = Struct {};
    let Test.3 : [C {}, C I64] = CallByName Test.1 Test.4;
    ret Test.3;
