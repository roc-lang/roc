procedure List.2 (List.119, List.120):
    let List.665 : U64 = CallByName List.6 List.119;
    let List.661 : Int1 = CallByName Num.22 List.120 List.665;
    if List.661 then
        let List.663 : I64 = CallByName List.66 List.119 List.120;
        let List.662 : [C {}, C I64] = TagId(1) List.663;
        ret List.662;
    else
        let List.660 : {} = Struct {};
        let List.659 : [C {}, C I64] = TagId(0) List.660;
        ret List.659;

procedure List.6 (#Attr.2):
    let List.666 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.666;

procedure List.66 (#Attr.2, #Attr.3):
    let List.664 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.664;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.285 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.285;

procedure Test.1 (Test.2):
    let Test.6 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.7 : U64 = 0i64;
    let Test.5 : [C {}, C I64] = CallByName List.2 Test.6 Test.7;
    dec Test.6;
    ret Test.5;

procedure Test.0 ():
    let Test.4 : {} = Struct {};
    let Test.3 : [C {}, C I64] = CallByName Test.1 Test.4;
    ret Test.3;
