procedure List.2 (List.100, List.101):
    let List.541 : U64 = CallByName List.6 List.100;
    let List.537 : Int1 = CallByName Num.22 List.101 List.541;
    if List.537 then
        let List.539 : I64 = CallByName List.66 List.100 List.101;
        dec List.100;
        let List.538 : [C {}, C I64] = TagId(1) List.539;
        ret List.538;
    else
        dec List.100;
        let List.536 : {} = Struct {};
        let List.535 : [C {}, C I64] = TagId(0) List.536;
        ret List.535;

procedure List.6 (#Attr.2):
    let List.542 : U64 = lowlevel ListLen #Attr.2;
    ret List.542;

procedure List.66 (#Attr.2, #Attr.3):
    let List.540 : I64 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.540;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.292 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.292;

procedure Test.1 (Test.2):
    let Test.6 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.7 : U64 = 0i64;
    let Test.5 : [C {}, C I64] = CallByName List.2 Test.6 Test.7;
    ret Test.5;

procedure Test.0 ():
    let Test.4 : {} = Struct {};
    let Test.3 : [C {}, C I64] = CallByName Test.1 Test.4;
    ret Test.3;
