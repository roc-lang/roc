procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : {Str, Str} = CallByName Encode.23 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.4 (#Derived.5, #Derived.6, #Derived.1):
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : List U8 = CallByName Encode.24 #Derived.5 #Derived_gen.4 #Derived.6;
        ret #Derived_gen.3;
    in
    let #Derived.2 : Str = StructAtIndex 0 #Derived.1;
    let #Derived.3 : Str = StructAtIndex 1 #Derived.1;
    let #Derived_gen.7 : Str = "A";
    let #Derived_gen.9 : Str = CallByName Test.19 #Derived.2;
    let #Derived_gen.10 : Str = CallByName Test.19 #Derived.3;
    let #Derived_gen.8 : List Str = Array [#Derived_gen.9, #Derived_gen.10];
    let #Derived_gen.6 : {List Str, {}} = CallByName Test.23 #Derived_gen.7 #Derived_gen.8;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.111 : List U8 = CallByName #Derived.4 Encode.99 Encode.101 Encode.107;
    ret Encode.111;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.113 : List U8 = CallByName Test.60 Encode.99 Encode.101 Encode.107;
    ret Encode.113;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.118 : List U8 = CallByName Test.56 Encode.99 Encode.101 Encode.107;
    ret Encode.118;

procedure Encode.26 (Encode.105, Encode.106):
    let Encode.109 : List U8 = Array [];
    let Encode.110 : {Str, Str} = CallByName #Derived.0 Encode.105;
    let Encode.108 : List U8 = CallByName Encode.24 Encode.109 Encode.110 Encode.106;
    ret Encode.108;

procedure List.13 (#Attr.2, #Attr.3):
    let List.600 : List Str = lowlevel ListPrepend #Attr.2 #Attr.3;
    ret List.600;

procedure List.18 (List.160, List.161, List.162):
    let List.575 : U64 = 0i64;
    let List.576 : U64 = CallByName List.6 List.160;
    let List.574 : List U8 = CallByName List.92 List.160 List.161 List.162 List.575 List.576;
    ret List.574;

procedure List.4 (List.124, List.125):
    let List.596 : U64 = 1i64;
    let List.595 : List U8 = CallByName List.70 List.124 List.596;
    let List.594 : List U8 = CallByName List.71 List.595 List.125;
    ret List.594;

procedure List.6 (#Attr.2):
    let List.599 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.599;

procedure List.66 (#Attr.2, #Attr.3):
    let List.584 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.584;

procedure List.70 (#Attr.2, #Attr.3):
    let List.590 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.590;

procedure List.71 (#Attr.2, #Attr.3):
    let List.588 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.588;

procedure List.8 (#Attr.2, #Attr.3):
    let List.598 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.598;

procedure List.92 (#Derived_gen.14, #Derived_gen.15, #Derived_gen.16, #Derived_gen.17, #Derived_gen.18):
    joinpoint List.577 List.163 List.164 List.165 List.166 List.167:
        let List.579 : Int1 = CallByName Num.22 List.166 List.167;
        if List.579 then
            let List.583 : Str = CallByName List.66 List.163 List.166;
            inc List.583;
            let List.168 : List U8 = CallByName Test.63 List.164 List.583 List.165;
            let List.582 : U64 = 1i64;
            let List.581 : U64 = CallByName Num.51 List.166 List.582;
            jump List.577 List.163 List.168 List.165 List.581 List.167;
        else
            dec List.163;
            ret List.164;
    in
    jump List.577 #Derived_gen.14 #Derived_gen.15 #Derived_gen.16 #Derived_gen.17 #Derived_gen.18;

procedure Num.127 (#Attr.2):
    let Num.280 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.280;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.282 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.282;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.281 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.281;

procedure Num.96 (#Attr.2):
    let Num.279 : Str = lowlevel NumToStr #Attr.2;
    ret Num.279;

procedure Str.12 (#Attr.2):
    let Str.241 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.241;

procedure Str.36 (#Attr.2):
    let Str.242 : U64 = lowlevel StrCountUtf8Bytes #Attr.2;
    ret Str.242;

procedure Str.43 (#Attr.2):
    let Str.239 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8 #Attr.2;
    ret Str.239;

procedure Str.9 (Str.67):
    let Str.68 : {U64, Str, Int1, U8} = CallByName Str.43 Str.67;
    let Str.236 : Int1 = StructAtIndex 2 Str.68;
    if Str.236 then
        let Str.238 : Str = StructAtIndex 1 Str.68;
        let Str.237 : [C {U64, U8}, C Str] = TagId(1) Str.238;
        ret Str.237;
    else
        let Str.234 : U8 = StructAtIndex 3 Str.68;
        let Str.235 : U64 = StructAtIndex 0 Str.68;
        let #Derived_gen.28 : Str = StructAtIndex 1 Str.68;
        dec #Derived_gen.28;
        let Str.233 : {U64, U8} = Struct {Str.235, Str.234};
        let Str.232 : [C {U64, U8}, C Str] = TagId(0) Str.233;
        ret Str.232;

procedure Test.19 (Test.55):
    let Test.300 : Str = CallByName Encode.23 Test.55;
    ret Test.300;

procedure Test.2 ():
    let Test.258 : {} = Struct {};
    ret Test.258;

procedure Test.20 (Test.58, Test.59):
    let Test.266 : {List Str, {}} = Struct {Test.58, Test.59};
    let Test.265 : {List Str, {}} = CallByName Encode.23 Test.266;
    ret Test.265;

procedure Test.22 (Test.74):
    let Test.264 : {} = Struct {};
    let Test.263 : {List Str, {}} = CallByName Test.20 Test.74 Test.264;
    ret Test.263;

procedure Test.23 (Test.77, Test.78):
    let Test.285 : Str = CallByName Test.19 Test.77;
    let Test.262 : List Str = CallByName List.13 Test.78 Test.285;
    let Test.261 : {List Str, {}} = CallByName Test.22 Test.262;
    ret Test.261;

procedure Test.3 (Test.48, Test.49, Test.50):
    let Test.283 : U8 = CallByName Num.127 Test.49;
    let Test.280 : List U8 = CallByName List.4 Test.48 Test.283;
    let Test.282 : Str = CallByName Num.96 Test.50;
    let Test.281 : List U8 = CallByName Str.12 Test.282;
    let Test.278 : List U8 = CallByName List.8 Test.280 Test.281;
    let Test.279 : U8 = 32i64;
    let Test.277 : List U8 = CallByName List.4 Test.278 Test.279;
    ret Test.277;

procedure Test.56 (Test.57, Test.288, Test.55):
    let Test.295 : I64 = 115i64;
    let Test.296 : U64 = CallByName Str.36 Test.55;
    let Test.293 : List U8 = CallByName Test.3 Test.57 Test.295 Test.296;
    let Test.294 : List U8 = CallByName Str.12 Test.55;
    let Test.291 : List U8 = CallByName List.8 Test.293 Test.294;
    let Test.292 : U8 = 32i64;
    let Test.290 : List U8 = CallByName List.4 Test.291 Test.292;
    ret Test.290;

procedure Test.60 (Test.61, Test.267, #Attr.12):
    let Test.59 : {} = StructAtIndex 1 #Attr.12;
    let Test.58 : List Str = StructAtIndex 0 #Attr.12;
    let Test.275 : I64 = 108i64;
    let Test.276 : U64 = CallByName List.6 Test.58;
    let Test.62 : List U8 = CallByName Test.3 Test.61 Test.275 Test.276;
    let Test.269 : List U8 = CallByName List.18 Test.58 Test.62 Test.59;
    ret Test.269;

procedure Test.63 (Test.64, Test.65, Test.59):
    let Test.273 : Str = CallByName Test.75 Test.65;
    let Test.274 : {} = Struct {};
    let Test.272 : List U8 = CallByName Encode.24 Test.64 Test.273 Test.274;
    ret Test.272;

procedure Test.75 (Test.76):
    ret Test.76;

procedure Test.0 ():
    let Test.260 : Str = "foo";
    let Test.259 : Str = "foo";
    let Test.209 : {Str, Str} = Struct {Test.259, Test.260};
    let Test.257 : {} = CallByName Test.2;
    let Test.256 : List U8 = CallByName Encode.26 Test.209 Test.257;
    let Test.210 : [C {U64, U8}, C Str] = CallByName Str.9 Test.256;
    let Test.253 : U8 = 1i64;
    let Test.254 : U8 = GetTagId Test.210;
    let Test.255 : Int1 = lowlevel Eq Test.253 Test.254;
    if Test.255 then
        let Test.212 : Str = UnionAtIndex (Id 1) (Index 0) Test.210;
        ret Test.212;
    else
        dec Test.210;
        let Test.252 : Str = "<bad>";
        ret Test.252;
