procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : {Str, Str} = CallByName Encode.22 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.4 (#Derived.5, #Derived.6, #Derived.1):
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : List U8 = CallByName Encode.23 #Derived.5 #Derived_gen.4 #Derived.6;
        ret #Derived_gen.3;
    in
    let #Derived.2 : Str = StructAtIndex 0 #Derived.1;
    inc #Derived.2;
    let #Derived.3 : Str = StructAtIndex 1 #Derived.1;
    inc #Derived.3;
    dec #Derived.1;
    let #Derived_gen.7 : Str = "A";
    let #Derived_gen.9 : Str = CallByName Json.18 #Derived.2;
    let #Derived_gen.10 : Str = CallByName Json.18 #Derived.3;
    let #Derived_gen.8 : List Str = Array [#Derived_gen.9, #Derived_gen.10];
    let #Derived_gen.6 : {Str, List Str} = CallByName Json.21 #Derived_gen.7 #Derived_gen.8;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.22 (Encode.93):
    ret Encode.93;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.106 : List U8 = CallByName #Derived.4 Encode.94 Encode.96 Encode.102;
    ret Encode.106;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.113 : List U8 = CallByName Json.127 Encode.94 Encode.96 Encode.102;
    ret Encode.113;

procedure Encode.23 (Encode.94, Encode.102, Encode.96):
    let Encode.117 : List U8 = CallByName Json.97 Encode.94 Encode.96 Encode.102;
    ret Encode.117;

procedure Encode.25 (Encode.100, Encode.101):
    let Encode.104 : List U8 = Array [];
    let Encode.105 : {Str, Str} = CallByName #Derived.0 Encode.100;
    let Encode.103 : List U8 = CallByName Encode.23 Encode.104 Encode.105 Encode.101;
    ret Encode.103;

procedure Json.1 ():
    let Json.396 : {} = Struct {};
    ret Json.396;

procedure Json.127 (Json.128, Json.399, #Attr.12):
    let Json.126 : List Str = StructAtIndex 1 #Attr.12;
    inc Json.126;
    let Json.125 : Str = StructAtIndex 0 #Attr.12;
    inc Json.125;
    dec #Attr.12;
    let Json.437 : I32 = 123i64;
    let Json.436 : U8 = CallByName Num.123 Json.437;
    let Json.433 : List U8 = CallByName List.4 Json.128 Json.436;
    let Json.435 : I32 = 34i64;
    let Json.434 : U8 = CallByName Num.123 Json.435;
    let Json.431 : List U8 = CallByName List.4 Json.433 Json.434;
    let Json.432 : List U8 = CallByName Str.12 Json.125;
    let Json.428 : List U8 = CallByName List.8 Json.431 Json.432;
    let Json.430 : I32 = 34i64;
    let Json.429 : U8 = CallByName Num.123 Json.430;
    let Json.425 : List U8 = CallByName List.4 Json.428 Json.429;
    let Json.427 : I32 = 58i64;
    let Json.426 : U8 = CallByName Num.123 Json.427;
    let Json.422 : List U8 = CallByName List.4 Json.425 Json.426;
    let Json.424 : I32 = 91i64;
    let Json.423 : U8 = CallByName Num.123 Json.424;
    let Json.130 : List U8 = CallByName List.4 Json.422 Json.423;
    let Json.421 : U64 = CallByName List.6 Json.126;
    let Json.409 : {List U8, U64} = Struct {Json.130, Json.421};
    let Json.410 : {} = Struct {};
    let Json.408 : {List U8, U64} = CallByName List.18 Json.126 Json.409 Json.410;
    dec Json.126;
    let Json.132 : List U8 = StructAtIndex 0 Json.408;
    inc Json.132;
    dec Json.408;
    let Json.407 : I32 = 93i64;
    let Json.406 : U8 = CallByName Num.123 Json.407;
    let Json.403 : List U8 = CallByName List.4 Json.132 Json.406;
    let Json.405 : I32 = 125i64;
    let Json.404 : U8 = CallByName Num.123 Json.405;
    let Json.402 : List U8 = CallByName List.4 Json.403 Json.404;
    ret Json.402;

procedure Json.129 (Json.401, Json.135):
    let Json.133 : List U8 = StructAtIndex 0 Json.401;
    inc Json.133;
    let Json.134 : U64 = StructAtIndex 1 Json.401;
    dec Json.401;
    let Json.420 : {} = Struct {};
    let Json.136 : List U8 = CallByName Encode.23 Json.133 Json.135 Json.420;
    joinpoint Json.415 Json.137:
        let Json.413 : U64 = 1i64;
        let Json.412 : U64 = CallByName Num.20 Json.134 Json.413;
        let Json.411 : {List U8, U64} = Struct {Json.137, Json.412};
        ret Json.411;
    in
    let Json.419 : U64 = 1i64;
    let Json.416 : Int1 = CallByName Num.24 Json.134 Json.419;
    if Json.416 then
        let Json.418 : I32 = 44i64;
        let Json.417 : U8 = CallByName Num.123 Json.418;
        let Json.414 : List U8 = CallByName List.4 Json.136 Json.417;
        jump Json.415 Json.414;
    else
        jump Json.415 Json.136;

procedure Json.18 (Json.96):
    let Json.450 : Str = CallByName Encode.22 Json.96;
    ret Json.450;

procedure Json.21 (Json.125, Json.126):
    let Json.398 : {Str, List Str} = Struct {Json.125, Json.126};
    let Json.397 : {Str, List Str} = CallByName Encode.22 Json.398;
    ret Json.397;

procedure Json.97 (Json.98, Json.440, Json.96):
    let Json.449 : I32 = 34i64;
    let Json.448 : U8 = CallByName Num.123 Json.449;
    let Json.446 : List U8 = CallByName List.4 Json.98 Json.448;
    let Json.447 : List U8 = CallByName Str.12 Json.96;
    let Json.443 : List U8 = CallByName List.8 Json.446 Json.447;
    let Json.445 : I32 = 34i64;
    let Json.444 : U8 = CallByName Num.123 Json.445;
    let Json.442 : List U8 = CallByName List.4 Json.443 Json.444;
    ret Json.442;

procedure List.133 (List.134, List.135, List.132):
    let List.432 : {List U8, U64} = CallByName Json.129 List.134 List.135;
    ret List.432;

procedure List.18 (List.130, List.131, List.132):
    let List.414 : {List U8, U64} = CallByName List.75 List.130 List.131 List.132;
    ret List.414;

procedure List.4 (List.101, List.102):
    let List.413 : U64 = 1i64;
    let List.412 : List U8 = CallByName List.70 List.101 List.413;
    let List.411 : List U8 = CallByName List.71 List.412 List.102;
    ret List.411;

procedure List.6 (#Attr.2):
    let List.380 : U64 = lowlevel ListLen #Attr.2;
    ret List.380;

procedure List.6 (#Attr.2):
    let List.433 : U64 = lowlevel ListLen #Attr.2;
    ret List.433;

procedure List.66 (#Attr.2, #Attr.3):
    let List.429 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.429;

procedure List.70 (#Attr.2, #Attr.3):
    let List.386 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.386;

procedure List.71 (#Attr.2, #Attr.3):
    let List.384 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.384;

procedure List.75 (List.356, List.357, List.358):
    let List.418 : U64 = 0i64;
    let List.419 : U64 = CallByName List.6 List.356;
    let List.417 : {List U8, U64} = CallByName List.86 List.356 List.357 List.358 List.418 List.419;
    ret List.417;

procedure List.8 (#Attr.2, #Attr.3):
    let List.435 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.435;

procedure List.86 (List.445, List.446, List.447, List.448, List.449):
    joinpoint List.420 List.359 List.360 List.361 List.362 List.363:
        let List.422 : Int1 = CallByName Num.22 List.362 List.363;
        if List.422 then
            let List.428 : Str = CallByName List.66 List.359 List.362;
            let List.423 : {List U8, U64} = CallByName List.133 List.360 List.428 List.361;
            let List.426 : U64 = 1i64;
            let List.425 : U64 = CallByName Num.19 List.362 List.426;
            jump List.420 List.359 List.423 List.361 List.425 List.363;
        else
            ret List.360;
    in
    jump List.420 List.445 List.446 List.447 List.448 List.449;

procedure Num.123 (#Attr.2):
    let Num.266 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.266;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.269 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.269;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.267 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.267;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.270 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.270;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.268 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.268;

procedure Str.12 (#Attr.2):
    let Str.266 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.266;

procedure Str.48 (#Attr.2, #Attr.3, #Attr.4):
    let Str.260 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8Range #Attr.2 #Attr.3 #Attr.4;
    ret Str.260;

procedure Str.9 (Str.73):
    let Str.258 : U64 = 0i64;
    let Str.259 : U64 = CallByName List.6 Str.73;
    let Str.74 : {U64, Str, Int1, U8} = CallByName Str.48 Str.73 Str.258 Str.259;
    let Str.255 : Int1 = StructAtIndex 2 Str.74;
    if Str.255 then
        let Str.257 : Str = StructAtIndex 1 Str.74;
        inc Str.257;
        dec Str.74;
        let Str.256 : [C {U64, U8}, C Str] = TagId(1) Str.257;
        ret Str.256;
    else
        let Str.253 : U8 = StructAtIndex 3 Str.74;
        let Str.254 : U64 = StructAtIndex 0 Str.74;
        dec Str.74;
        let Str.252 : {U64, U8} = Struct {Str.254, Str.253};
        let Str.251 : [C {U64, U8}, C Str] = TagId(0) Str.252;
        ret Str.251;

procedure Test.0 ():
    let Test.13 : Str = "foo";
    let Test.12 : Str = "foo";
    let Test.1 : {Str, Str} = Struct {Test.12, Test.13};
    let Test.11 : {} = CallByName Json.1;
    let Test.10 : List U8 = CallByName Encode.25 Test.1 Test.11;
    let Test.2 : [C {U64, U8}, C Str] = CallByName Str.9 Test.10;
    let Test.7 : U8 = 1i64;
    let Test.8 : U8 = GetTagId Test.2;
    let Test.9 : Int1 = lowlevel Eq Test.7 Test.8;
    if Test.9 then
        let Test.4 : Str = UnionAtIndex (Id 1) (Index 0) Test.2;
        inc Test.4;
        dec Test.2;
        ret Test.4;
    else
        dec Test.2;
        let Test.6 : Str = "<bad>";
        ret Test.6;
