procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Inspect.30 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.1):
    let #Derived_gen.7 : Str = "a";
    let #Derived_gen.8 : Str = CallByName #Derived.4 #Derived.1;
    let #Derived_gen.6 : {Str, Str} = Struct {#Derived_gen.7, #Derived_gen.8};
    let #Derived_gen.5 : List {Str, Str} = Array [#Derived_gen.6];
    let #Derived_gen.4 : List {Str, Str} = CallByName Inspect.45 #Derived_gen.5;
    let #Derived_gen.3 : Str = CallByName Inspect.31 #Derived_gen.4 #Derived.3;
    dec #Derived_gen.4;
    ret #Derived_gen.3;

procedure #Derived.4 (#Derived.5):
    let #Derived_gen.10 : Str = CallByName Inspect.30 #Derived.5;
    ret #Derived_gen.10;

procedure #Derived.6 (#Derived.7, #Derived.5):
    let #Derived_gen.17 : Str = "b";
    let #Derived_gen.18 : Str = CallByName Inspect.47 #Derived.5;
    let #Derived_gen.16 : {Str, Str} = Struct {#Derived_gen.17, #Derived_gen.18};
    let #Derived_gen.15 : List {Str, Str} = Array [#Derived_gen.16];
    let #Derived_gen.14 : List {Str, Str} = CallByName Inspect.45 #Derived_gen.15;
    let #Derived_gen.13 : Str = CallByName Inspect.31 #Derived_gen.14 #Derived.7;
    dec #Derived_gen.14;
    ret #Derived_gen.13;

procedure Bool.1 ():
    let Bool.25 : Int1 = false;
    ret Bool.25;

procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Bool.9 (#Attr.2, #Attr.3):
    let Bool.26 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.26;

procedure Bool.9 (#Attr.2, #Attr.3):
    let Bool.27 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.27;

procedure Inspect.225 (Inspect.226, Inspect.224):
    let Inspect.338 : Str = "{";
    let Inspect.227 : Str = CallByName Inspect.63 Inspect.226 Inspect.338;
    dec Inspect.338;
    let Inspect.337 : Int1 = CallByName Bool.1;
    let Inspect.318 : {Str, Int1} = Struct {Inspect.227, Inspect.337};
    let Inspect.319 : {} = Struct {};
    let Inspect.317 : {Str, Int1} = CallByName List.18 Inspect.224 Inspect.318 Inspect.319;
    let Inspect.228 : Str = StructAtIndex 0 Inspect.317;
    let Inspect.314 : Str = "}";
    let Inspect.313 : Str = CallByName Inspect.63 Inspect.228 Inspect.314;
    dec Inspect.314;
    ret Inspect.313;

procedure Inspect.225 (Inspect.226, Inspect.224):
    let Inspect.369 : Str = "{";
    let Inspect.227 : Str = CallByName Inspect.63 Inspect.226 Inspect.369;
    dec Inspect.369;
    let Inspect.368 : Int1 = CallByName Bool.1;
    let Inspect.349 : {Str, Int1} = Struct {Inspect.227, Inspect.368};
    let Inspect.350 : {} = Struct {};
    let Inspect.348 : {Str, Int1} = CallByName List.18 Inspect.224 Inspect.349 Inspect.350;
    let Inspect.228 : Str = StructAtIndex 0 Inspect.348;
    let Inspect.345 : Str = "}";
    let Inspect.344 : Str = CallByName Inspect.63 Inspect.228 Inspect.345;
    dec Inspect.345;
    ret Inspect.344;

procedure Inspect.229 (Inspect.320, Inspect.321):
    let Inspect.232 : Str = StructAtIndex 0 Inspect.321;
    let Inspect.233 : Str = StructAtIndex 1 Inspect.321;
    let Inspect.230 : Str = StructAtIndex 0 Inspect.320;
    let Inspect.231 : Int1 = StructAtIndex 1 Inspect.320;
    joinpoint Inspect.335 Inspect.234:
        let Inspect.332 : Str = CallByName Inspect.63 Inspect.234 Inspect.232;
        dec Inspect.232;
        let Inspect.333 : Str = ": ";
        let Inspect.327 : Str = CallByName Inspect.63 Inspect.332 Inspect.333;
        dec Inspect.333;
        let Inspect.323 : Str = CallByName Inspect.235 Inspect.327 Inspect.233;
        let Inspect.324 : {} = Struct {};
        let Inspect.322 : {Str, Int1} = CallByName Inspect.237 Inspect.323;
        dec Inspect.323;
        ret Inspect.322;
    in
    if Inspect.231 then
        let Inspect.336 : Str = ", ";
        let Inspect.334 : Str = CallByName Inspect.63 Inspect.230 Inspect.336;
        dec Inspect.336;
        jump Inspect.335 Inspect.334;
    else
        jump Inspect.335 Inspect.230;

procedure Inspect.229 (Inspect.320, Inspect.321):
    let Inspect.232 : Str = StructAtIndex 0 Inspect.321;
    let Inspect.233 : Str = StructAtIndex 1 Inspect.321;
    let Inspect.230 : Str = StructAtIndex 0 Inspect.320;
    let Inspect.231 : Int1 = StructAtIndex 1 Inspect.320;
    joinpoint Inspect.366 Inspect.234:
        let Inspect.363 : Str = CallByName Inspect.63 Inspect.234 Inspect.232;
        dec Inspect.232;
        let Inspect.364 : Str = ": ";
        let Inspect.358 : Str = CallByName Inspect.63 Inspect.363 Inspect.364;
        dec Inspect.364;
        let Inspect.354 : Str = CallByName Inspect.235 Inspect.358 Inspect.233;
        dec Inspect.233;
        let Inspect.355 : {} = Struct {};
        let Inspect.353 : {Str, Int1} = CallByName Inspect.237 Inspect.354;
        dec Inspect.354;
        ret Inspect.353;
    in
    if Inspect.231 then
        let Inspect.367 : Str = ", ";
        let Inspect.365 : Str = CallByName Inspect.63 Inspect.230 Inspect.367;
        dec Inspect.367;
        jump Inspect.366 Inspect.365;
    else
        jump Inspect.366 Inspect.230;

procedure Inspect.235 (Inspect.236, Inspect.233):
    let Inspect.330 : Str = CallByName Inspect.31 Inspect.233 Inspect.236;
    ret Inspect.330;

procedure Inspect.235 (Inspect.236, Inspect.233):
    let Inspect.361 : Str = CallByName Inspect.31 Inspect.233 Inspect.236;
    ret Inspect.361;

procedure Inspect.237 (Inspect.238):
    let Inspect.357 : Int1 = CallByName Bool.2;
    inc Inspect.238;
    let Inspect.356 : {Str, Int1} = Struct {Inspect.238, Inspect.357};
    ret Inspect.356;

procedure Inspect.245 (Inspect.246, Inspect.244):
    let Inspect.377 : Str = "\"";
    let Inspect.376 : Str = CallByName Inspect.63 Inspect.246 Inspect.377;
    dec Inspect.377;
    let Inspect.374 : Str = CallByName Inspect.63 Inspect.376 Inspect.244;
    let Inspect.375 : Str = "\"";
    let Inspect.373 : Str = CallByName Inspect.63 Inspect.374 Inspect.375;
    dec Inspect.375;
    ret Inspect.373;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.31 (Inspect.298, Inspect.149):
    let Inspect.309 : Str = CallByName Inspect.225 Inspect.149 Inspect.298;
    ret Inspect.309;

procedure Inspect.31 (Inspect.298, Inspect.149):
    let Inspect.331 : Str = CallByName #Derived.6 Inspect.149 Inspect.298;
    ret Inspect.331;

procedure Inspect.31 (Inspect.298, Inspect.149):
    let Inspect.340 : Str = CallByName Inspect.225 Inspect.149 Inspect.298;
    ret Inspect.340;

procedure Inspect.31 (Inspect.298, Inspect.149):
    let Inspect.362 : Str = CallByName Inspect.245 Inspect.149 Inspect.298;
    ret Inspect.362;

procedure Inspect.33 (Inspect.152):
    let Inspect.300 : Str = CallByName Inspect.5 Inspect.152;
    let Inspect.299 : Str = CallByName Inspect.64 Inspect.300;
    ret Inspect.299;

procedure Inspect.39 (Inspect.296):
    let Inspect.306 : Str = "";
    ret Inspect.306;

procedure Inspect.45 (Inspect.224):
    let Inspect.310 : List {Str, Str} = CallByName Inspect.30 Inspect.224;
    ret Inspect.310;

procedure Inspect.45 (Inspect.224):
    let Inspect.341 : List {Str, Str} = CallByName Inspect.30 Inspect.224;
    ret Inspect.341;

procedure Inspect.47 (Inspect.243):
    let Inspect.387 : Str = "\u{feff}";
    let Inspect.388 : Str = "\\u(feff)";
    let Inspect.384 : Str = CallByName Str.45 Inspect.243 Inspect.387 Inspect.388;
    dec Inspect.388;
    dec Inspect.387;
    let Inspect.385 : Str = "\u{200b}";
    let Inspect.386 : Str = "\\u(200b)";
    let Inspect.381 : Str = CallByName Str.45 Inspect.384 Inspect.385 Inspect.386;
    dec Inspect.386;
    dec Inspect.385;
    let Inspect.382 : Str = "\u{200c}";
    let Inspect.383 : Str = "\\u(200c)";
    let Inspect.378 : Str = CallByName Str.45 Inspect.381 Inspect.382 Inspect.383;
    dec Inspect.382;
    dec Inspect.383;
    let Inspect.379 : Str = "\u{200d}";
    let Inspect.380 : Str = "\\u(200d)";
    let Inspect.244 : Str = CallByName Str.45 Inspect.378 Inspect.379 Inspect.380;
    dec Inspect.380;
    dec Inspect.379;
    let Inspect.370 : Str = CallByName Inspect.30 Inspect.244;
    ret Inspect.370;

procedure Inspect.5 (Inspect.150):
    let Inspect.307 : Str = CallByName #Derived.0 Inspect.150;
    let Inspect.304 : {} = Struct {};
    let Inspect.303 : Str = CallByName Inspect.39 Inspect.304;
    let Inspect.302 : Str = CallByName #Derived.2 Inspect.303 Inspect.307;
    ret Inspect.302;

procedure Inspect.63 (Inspect.295, Inspect.291):
    let Inspect.347 : Str = CallByName Str.3 Inspect.295 Inspect.291;
    ret Inspect.347;

procedure Inspect.64 (Inspect.297):
    ret Inspect.297;

procedure List.101 (#Derived_gen.33, #Derived_gen.34, #Derived_gen.35, #Derived_gen.36, #Derived_gen.37):
    joinpoint List.678 List.175 List.176 List.177 List.178 List.179:
        let List.680 : Int1 = CallByName Num.22 List.178 List.179;
        if List.680 then
            let List.684 : {Str, Str} = CallByName List.66 List.175 List.178;
            inc List.684;
            let List.180 : {Str, Int1} = CallByName Inspect.229 List.176 List.684;
            let List.683 : U64 = 1i64;
            let List.682 : U64 = CallByName Num.51 List.178 List.683;
            jump List.678 List.175 List.180 List.177 List.682 List.179;
        else
            dec List.175;
            ret List.176;
    in
    inc #Derived_gen.33;
    jump List.678 #Derived_gen.33 #Derived_gen.34 #Derived_gen.35 #Derived_gen.36 #Derived_gen.37;

procedure List.101 (#Derived_gen.38, #Derived_gen.39, #Derived_gen.40, #Derived_gen.41, #Derived_gen.42):
    joinpoint List.690 List.175 List.176 List.177 List.178 List.179:
        let List.692 : Int1 = CallByName Num.22 List.178 List.179;
        if List.692 then
            let List.696 : {Str, Str} = CallByName List.66 List.175 List.178;
            inc List.696;
            let List.180 : {Str, Int1} = CallByName Inspect.229 List.176 List.696;
            let List.695 : U64 = 1i64;
            let List.694 : U64 = CallByName Num.51 List.178 List.695;
            jump List.690 List.175 List.180 List.177 List.694 List.179;
        else
            dec List.175;
            ret List.176;
    in
    inc #Derived_gen.38;
    jump List.690 #Derived_gen.38 #Derived_gen.39 #Derived_gen.40 #Derived_gen.41 #Derived_gen.42;

procedure List.18 (List.172, List.173, List.174):
    let List.676 : U64 = 0i64;
    let List.677 : U64 = CallByName List.6 List.172;
    let List.675 : {Str, Int1} = CallByName List.101 List.172 List.173 List.174 List.676 List.677;
    ret List.675;

procedure List.18 (List.172, List.173, List.174):
    let List.688 : U64 = 0i64;
    let List.689 : U64 = CallByName List.6 List.172;
    let List.687 : {Str, Int1} = CallByName List.101 List.172 List.173 List.174 List.688 List.689;
    ret List.687;

procedure List.6 (#Attr.2):
    let List.686 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.686;

procedure List.6 (#Attr.2):
    let List.698 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.698;

procedure List.66 (#Attr.2, #Attr.3):
    let List.685 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.685;

procedure List.66 (#Attr.2, #Attr.3):
    let List.697 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.697;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.290 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.290;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.297 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.297;

procedure Num.23 (#Attr.2, #Attr.3):
    let Num.294 : Int1 = lowlevel NumLte #Attr.2 #Attr.3;
    ret Num.294;

procedure Num.25 (#Attr.2, #Attr.3):
    let Num.291 : Int1 = lowlevel NumGte #Attr.2 #Attr.3;
    ret Num.291;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.296 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.296;

procedure Num.53 (#Attr.2, #Attr.3):
    let Num.293 : U64 = lowlevel NumAddSaturated #Attr.2 #Attr.3;
    ret Num.293;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.295 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.295;

procedure Str.20 (#Attr.2):
    let Str.449 : Str = lowlevel StrWithCapacity #Attr.2;
    ret Str.449;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.381 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.381;

procedure Str.35 (#Attr.2, #Attr.3):
    let Str.439 : U8 = lowlevel StrGetUnsafe #Attr.2 #Attr.3;
    ret Str.439;

procedure Str.36 (#Attr.2):
    let Str.401 : U64 = lowlevel StrCountUtf8Bytes #Attr.2;
    ret Str.401;

procedure Str.37 (#Attr.2, #Attr.3, #Attr.4):
    let Str.399 : Str = lowlevel StrSubstringUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret Str.399;

procedure Str.38 (Str.211, Str.212):
    let Str.395 : [C , C U64] = CallByName Str.63 Str.211 Str.212;
    let Str.408 : U8 = 1i64;
    let Str.409 : U8 = GetTagId Str.395;
    let Str.410 : Int1 = lowlevel Eq Str.408 Str.409;
    if Str.410 then
        let Str.213 : U64 = UnionAtIndex (Id 1) (Index 0) Str.395;
        let Str.404 : U64 = CallByName Str.36 Str.211;
        let Str.405 : U64 = CallByName Str.36 Str.212;
        let Str.403 : U64 = CallByName Num.20 Str.404 Str.405;
        let Str.214 : U64 = CallByName Num.20 Str.403 Str.213;
        let Str.402 : U64 = 0i64;
        inc Str.211;
        let Str.215 : Str = CallByName Str.37 Str.211 Str.402 Str.213;
        let Str.400 : U64 = CallByName Str.36 Str.212;
        let Str.398 : U64 = CallByName Num.51 Str.213 Str.400;
        let Str.216 : Str = CallByName Str.37 Str.211 Str.398 Str.214;
        let Str.397 : {Str, Str} = Struct {Str.216, Str.215};
        let Str.396 : [C {}, C {Str, Str}] = TagId(1) Str.397;
        ret Str.396;
    else
        dec Str.211;
        let Str.407 : {} = Struct {};
        let Str.406 : [C {}, C {Str, Str}] = TagId(0) Str.407;
        ret Str.406;

procedure Str.45 (Str.190, Str.191, Str.192):
    inc Str.190;
    let Str.477 : [C {}, C {Str, Str}] = CallByName Str.38 Str.190 Str.191;
    let Str.485 : U8 = 1i64;
    let Str.486 : U8 = GetTagId Str.477;
    let Str.487 : Int1 = lowlevel Eq Str.485 Str.486;
    if Str.487 then
        let Str.484 : {Str, Str} = UnionAtIndex (Id 1) (Index 0) Str.477;
        let Str.194 : Str = StructAtIndex 0 Str.484;
        let Str.193 : Str = StructAtIndex 1 Str.484;
        let Str.482 : U64 = CallByName Str.36 Str.190;
        dec Str.190;
        let Str.481 : Str = CallByName Str.20 Str.482;
        let Str.480 : Str = CallByName Str.3 Str.481 Str.193;
        dec Str.193;
        let Str.479 : Str = CallByName Str.3 Str.480 Str.192;
        let Str.478 : Str = CallByName Str.62 Str.479 Str.194 Str.191 Str.192;
        ret Str.478;
    else
        dec Str.477;
        ret Str.190;

procedure Str.62 (#Derived_gen.24, #Derived_gen.25, #Derived_gen.26, #Derived_gen.27):
    joinpoint Str.385 Str.195 Str.196 Str.197 Str.198:
        inc Str.196;
        let Str.386 : [C {}, C {Str, Str}] = CallByName Str.38 Str.196 Str.197;
        let Str.392 : U8 = 1i64;
        let Str.393 : U8 = GetTagId Str.386;
        let Str.394 : Int1 = lowlevel Eq Str.392 Str.393;
        if Str.394 then
            dec Str.196;
            let Str.391 : {Str, Str} = UnionAtIndex (Id 1) (Index 0) Str.386;
            let Str.200 : Str = StructAtIndex 0 Str.391;
            let Str.199 : Str = StructAtIndex 1 Str.391;
            let Str.389 : Str = CallByName Str.3 Str.195 Str.199;
            dec Str.199;
            let Str.388 : Str = CallByName Str.3 Str.389 Str.198;
            jump Str.385 Str.388 Str.200 Str.197 Str.198;
        else
            dec Str.198;
            dec Str.386;
            dec Str.197;
            let Str.390 : Str = CallByName Str.3 Str.195 Str.196;
            dec Str.196;
            ret Str.390;
    in
    inc #Derived_gen.27;
    inc #Derived_gen.26;
    jump Str.385 #Derived_gen.24 #Derived_gen.25 #Derived_gen.26 #Derived_gen.27;

procedure Str.63 (Str.220, Str.221):
    let Str.222 : U64 = CallByName Str.36 Str.220;
    let Str.223 : U64 = CallByName Str.36 Str.221;
    let Str.224 : U64 = CallByName Num.77 Str.222 Str.223;
    let Str.412 : U64 = 0i64;
    let Str.411 : [C , C U64] = CallByName Str.64 Str.220 Str.221 Str.412 Str.224;
    ret Str.411;

procedure Str.64 (#Derived_gen.28, #Derived_gen.29, #Derived_gen.30, #Derived_gen.31):
    joinpoint Str.413 Str.225 Str.226 Str.227 Str.228:
        let Str.415 : Int1 = CallByName Num.23 Str.227 Str.228;
        if Str.415 then
            let Str.419 : Int1 = CallByName Str.68 Str.225 Str.227 Str.226;
            if Str.419 then
                dec Str.226;
                dec Str.225;
                let Str.420 : [C , C U64] = TagId(1) Str.227;
                ret Str.420;
            else
                let Str.418 : U64 = 1i64;
                let Str.417 : U64 = CallByName Num.51 Str.227 Str.418;
                jump Str.413 Str.225 Str.226 Str.417 Str.228;
        else
            dec Str.226;
            dec Str.225;
            let Str.414 : [C , C U64] = TagId(0) ;
            ret Str.414;
    in
    inc #Derived_gen.29;
    inc #Derived_gen.28;
    jump Str.413 #Derived_gen.28 #Derived_gen.29 #Derived_gen.30 #Derived_gen.31;

procedure Str.67 (Str.251, Str.252):
    let Str.444 : Int1 = CallByName Num.22 Str.251 Str.252;
    if Str.444 then
        ret Str.251;
    else
        ret Str.252;

procedure Str.68 (Str.253, Str.254, Str.255):
    let Str.256 : U64 = CallByName Str.36 Str.253;
    let Str.257 : U64 = CallByName Str.36 Str.255;
    let Str.442 : U64 = CallByName Num.53 Str.254 Str.257;
    let Str.258 : U64 = CallByName Str.67 Str.442 Str.256;
    let Str.441 : U64 = 0i64;
    inc Str.255;
    inc Str.253;
    let Str.422 : {U64, Str, U64, Str, U64, U64} = Struct {Str.258, Str.253, Str.254, Str.255, Str.441, Str.257};
    let Str.421 : Int1 = CallByName Str.69 Str.422;
    ret Str.421;

procedure Str.69 (Str.259):
    let Str.265 : U64 = StructAtIndex 0 Str.259;
    let Str.260 : Str = StructAtIndex 1 Str.259;
    let Str.261 : U64 = StructAtIndex 2 Str.259;
    let Str.262 : Str = StructAtIndex 3 Str.259;
    let Str.263 : U64 = StructAtIndex 4 Str.259;
    let Str.264 : U64 = StructAtIndex 5 Str.259;
    let Str.266 : Int1 = CallByName Num.25 Str.261 Str.265;
    if Str.266 then
        dec Str.262;
        dec Str.260;
        let Str.267 : Int1 = CallByName Bool.9 Str.263 Str.264;
        ret Str.267;
    else
        let Str.437 : U8 = CallByName Str.35 Str.260 Str.261;
        let Str.438 : U8 = CallByName Str.35 Str.262 Str.263;
        let Str.268 : Int1 = CallByName Bool.9 Str.437 Str.438;
        let Str.427 : U64 = StructAtIndex 0 Str.259;
        let Str.428 : Str = StructAtIndex 1 Str.259;
        let Str.430 : Str = StructAtIndex 3 Str.259;
        let Str.432 : U64 = StructAtIndex 5 Str.259;
        let Str.436 : U64 = 1i64;
        let Str.434 : U64 = CallByName Num.51 Str.263 Str.436;
        let Str.435 : U64 = 1i64;
        let Str.433 : U64 = CallByName Num.51 Str.261 Str.435;
        let Str.426 : {U64, Str, U64, Str, U64, U64} = Struct {Str.427, Str.428, Str.433, Str.430, Str.434, Str.432};
        let Str.269 : Int1 = CallByName Str.69 Str.426;
        if Str.268 then
            ret Str.269;
        else
            let Str.424 : Int1 = CallByName Bool.1;
            ret Str.424;

procedure Test.0 ():
    let Test.4 : Str = "bar";
    let Test.1 : Str = CallByName Inspect.33 Test.4;
    ret Test.1;
