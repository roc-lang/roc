procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Inspect.30 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.1):
    let #Derived_gen.7 : Str = "a";
    let #Derived_gen.8 : Str = CallByName #Derived.4 #Derived.1;
    let #Derived_gen.6 : {Str, Str} = Struct {#Derived_gen.7, #Derived_gen.8};
    let #Derived_gen.5 : List {Str, Str} = Array [#Derived_gen.6];
    let #Derived_gen.4 : List {Str, Str} = CallByName Inspect.45 #Derived_gen.5;
    let #Derived_gen.3 : Str = CallByName Inspect.31 #Derived_gen.4 #Derived.3;
    dec #Derived_gen.4;
    ret #Derived_gen.3;

procedure #Derived.4 (#Derived.5):
    let #Derived_gen.10 : Str = CallByName Inspect.30 #Derived.5;
    ret #Derived_gen.10;

procedure #Derived.6 (#Derived.7, #Derived.5):
    let #Derived_gen.17 : Str = "b";
    let #Derived_gen.18 : Str = CallByName Inspect.47 #Derived.5;
    let #Derived_gen.16 : {Str, Str} = Struct {#Derived_gen.17, #Derived_gen.18};
    let #Derived_gen.15 : List {Str, Str} = Array [#Derived_gen.16];
    let #Derived_gen.14 : List {Str, Str} = CallByName Inspect.45 #Derived_gen.15;
    let #Derived_gen.13 : Str = CallByName Inspect.31 #Derived_gen.14 #Derived.7;
    dec #Derived_gen.14;
    ret #Derived_gen.13;

procedure Bool.1 ():
    let Bool.25 : Int1 = false;
    ret Bool.25;

procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Bool.9 (#Attr.2, #Attr.3):
    let Bool.26 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.26;

procedure Bool.9 (#Attr.2, #Attr.3):
    let Bool.27 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.27;

procedure Inspect.225 (Inspect.226, Inspect.224):
    let Inspect.338 : Str = "{";
    let Inspect.227 : Str = CallByName Inspect.63 Inspect.226 Inspect.338;
    dec Inspect.338;
    let Inspect.337 : Int1 = CallByName Bool.1;
    let Inspect.318 : {Str, Int1} = Struct {Inspect.227, Inspect.337};
    let Inspect.319 : {} = Struct {};
    let Inspect.317 : {Str, Int1} = CallByName List.18 Inspect.224 Inspect.318 Inspect.319;
    let Inspect.228 : Str = StructAtIndex 0 Inspect.317;
    let Inspect.314 : Str = "}";
    let Inspect.313 : Str = CallByName Inspect.63 Inspect.228 Inspect.314;
    dec Inspect.314;
    ret Inspect.313;

procedure Inspect.225 (Inspect.226, Inspect.224):
    let Inspect.369 : Str = "{";
    let Inspect.227 : Str = CallByName Inspect.63 Inspect.226 Inspect.369;
    dec Inspect.369;
    let Inspect.368 : Int1 = CallByName Bool.1;
    let Inspect.349 : {Str, Int1} = Struct {Inspect.227, Inspect.368};
    let Inspect.350 : {} = Struct {};
    let Inspect.348 : {Str, Int1} = CallByName List.18 Inspect.224 Inspect.349 Inspect.350;
    let Inspect.228 : Str = StructAtIndex 0 Inspect.348;
    let Inspect.345 : Str = "}";
    let Inspect.344 : Str = CallByName Inspect.63 Inspect.228 Inspect.345;
    dec Inspect.345;
    ret Inspect.344;

procedure Inspect.229 (Inspect.320, Inspect.321):
    let Inspect.232 : Str = StructAtIndex 0 Inspect.321;
    let Inspect.233 : Str = StructAtIndex 1 Inspect.321;
    let Inspect.230 : Str = StructAtIndex 0 Inspect.320;
    let Inspect.231 : Int1 = StructAtIndex 1 Inspect.320;
    joinpoint Inspect.335 Inspect.234:
        let Inspect.332 : Str = CallByName Inspect.63 Inspect.234 Inspect.232;
        dec Inspect.232;
        let Inspect.333 : Str = ": ";
        let Inspect.327 : Str = CallByName Inspect.63 Inspect.332 Inspect.333;
        dec Inspect.333;
        let Inspect.323 : Str = CallByName Inspect.235 Inspect.327 Inspect.233;
        let Inspect.324 : {} = Struct {};
        let Inspect.322 : {Str, Int1} = CallByName Inspect.237 Inspect.323;
        dec Inspect.323;
        ret Inspect.322;
    in
    if Inspect.231 then
        let Inspect.336 : Str = ", ";
        let Inspect.334 : Str = CallByName Inspect.63 Inspect.230 Inspect.336;
        dec Inspect.336;
        jump Inspect.335 Inspect.334;
    else
        jump Inspect.335 Inspect.230;

procedure Inspect.229 (Inspect.320, Inspect.321):
    let Inspect.232 : Str = StructAtIndex 0 Inspect.321;
    let Inspect.233 : Str = StructAtIndex 1 Inspect.321;
    let Inspect.230 : Str = StructAtIndex 0 Inspect.320;
    let Inspect.231 : Int1 = StructAtIndex 1 Inspect.320;
    joinpoint Inspect.366 Inspect.234:
        let Inspect.363 : Str = CallByName Inspect.63 Inspect.234 Inspect.232;
        dec Inspect.232;
        let Inspect.364 : Str = ": ";
        let Inspect.358 : Str = CallByName Inspect.63 Inspect.363 Inspect.364;
        dec Inspect.364;
        let Inspect.354 : Str = CallByName Inspect.235 Inspect.358 Inspect.233;
        dec Inspect.233;
        let Inspect.355 : {} = Struct {};
        let Inspect.353 : {Str, Int1} = CallByName Inspect.237 Inspect.354;
        dec Inspect.354;
        ret Inspect.353;
    in
    if Inspect.231 then
        let Inspect.367 : Str = ", ";
        let Inspect.365 : Str = CallByName Inspect.63 Inspect.230 Inspect.367;
        dec Inspect.367;
        jump Inspect.366 Inspect.365;
    else
        jump Inspect.366 Inspect.230;

procedure Inspect.235 (Inspect.236, Inspect.233):
    let Inspect.330 : Str = CallByName Inspect.31 Inspect.233 Inspect.236;
    ret Inspect.330;

procedure Inspect.235 (Inspect.236, Inspect.233):
    let Inspect.361 : Str = CallByName Inspect.31 Inspect.233 Inspect.236;
    ret Inspect.361;

procedure Inspect.237 (Inspect.238):
    let Inspect.357 : Int1 = CallByName Bool.2;
    inc Inspect.238;
    let Inspect.356 : {Str, Int1} = Struct {Inspect.238, Inspect.357};
    ret Inspect.356;

procedure Inspect.245 (Inspect.246, Inspect.244):
    let Inspect.377 : Str = "\"";
    let Inspect.376 : Str = CallByName Inspect.63 Inspect.246 Inspect.377;
    dec Inspect.377;
    let Inspect.374 : Str = CallByName Inspect.63 Inspect.376 Inspect.244;
    let Inspect.375 : Str = "\"";
    let Inspect.373 : Str = CallByName Inspect.63 Inspect.374 Inspect.375;
    dec Inspect.375;
    ret Inspect.373;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.31 (Inspect.298, Inspect.149):
    let Inspect.309 : Str = CallByName Inspect.225 Inspect.149 Inspect.298;
    ret Inspect.309;

procedure Inspect.31 (Inspect.298, Inspect.149):
    let Inspect.331 : Str = CallByName #Derived.6 Inspect.149 Inspect.298;
    ret Inspect.331;

procedure Inspect.31 (Inspect.298, Inspect.149):
    let Inspect.340 : Str = CallByName Inspect.225 Inspect.149 Inspect.298;
    ret Inspect.340;

procedure Inspect.31 (Inspect.298, Inspect.149):
    let Inspect.362 : Str = CallByName Inspect.245 Inspect.149 Inspect.298;
    ret Inspect.362;

procedure Inspect.33 (Inspect.152):
    let Inspect.300 : Str = CallByName Inspect.5 Inspect.152;
    let Inspect.299 : Str = CallByName Inspect.64 Inspect.300;
    ret Inspect.299;

procedure Inspect.39 (Inspect.296):
    let Inspect.306 : Str = "";
    ret Inspect.306;

procedure Inspect.45 (Inspect.224):
    let Inspect.310 : List {Str, Str} = CallByName Inspect.30 Inspect.224;
    ret Inspect.310;

procedure Inspect.45 (Inspect.224):
    let Inspect.341 : List {Str, Str} = CallByName Inspect.30 Inspect.224;
    ret Inspect.341;

procedure Inspect.47 (Inspect.243):
    let Inspect.387 : Str = "\u{feff}";
    let Inspect.388 : Str = "\\u(feff)";
    let Inspect.384 : Str = CallByName Str.45 Inspect.243 Inspect.387 Inspect.388;
    dec Inspect.388;
    dec Inspect.387;
    let Inspect.385 : Str = "\u{200b}";
    let Inspect.386 : Str = "\\u(200b)";
    let Inspect.381 : Str = CallByName Str.45 Inspect.384 Inspect.385 Inspect.386;
    dec Inspect.386;
    dec Inspect.385;
    let Inspect.382 : Str = "\u{200c}";
    let Inspect.383 : Str = "\\u(200c)";
    let Inspect.378 : Str = CallByName Str.45 Inspect.381 Inspect.382 Inspect.383;
    dec Inspect.382;
    dec Inspect.383;
    let Inspect.379 : Str = "\u{200d}";
    let Inspect.380 : Str = "\\u(200d)";
    let Inspect.244 : Str = CallByName Str.45 Inspect.378 Inspect.379 Inspect.380;
    dec Inspect.380;
    dec Inspect.379;
    let Inspect.370 : Str = CallByName Inspect.30 Inspect.244;
    ret Inspect.370;

procedure Inspect.5 (Inspect.150):
    let Inspect.307 : Str = CallByName #Derived.0 Inspect.150;
    let Inspect.304 : {} = Struct {};
    let Inspect.303 : Str = CallByName Inspect.39 Inspect.304;
    let Inspect.302 : Str = CallByName #Derived.2 Inspect.303 Inspect.307;
    ret Inspect.302;

procedure Inspect.63 (Inspect.295, Inspect.291):
    let Inspect.347 : Str = CallByName Str.3 Inspect.295 Inspect.291;
    ret Inspect.347;

procedure Inspect.64 (Inspect.297):
    ret Inspect.297;

procedure List.101 (#Derived_gen.20, #Derived_gen.21, #Derived_gen.22, #Derived_gen.23, #Derived_gen.24):
    joinpoint List.678 List.175 List.176 List.177 List.178 List.179:
        let List.680 : Int1 = CallByName Num.22 List.178 List.179;
        if List.680 then
            let List.684 : {Str, Str} = CallByName List.66 List.175 List.178;
            inc List.684;
            let List.180 : {Str, Int1} = CallByName Inspect.229 List.176 List.684;
            let List.683 : U64 = 1i64;
            let List.682 : U64 = CallByName Num.51 List.178 List.683;
            jump List.678 List.175 List.180 List.177 List.682 List.179;
        else
            dec List.175;
            ret List.176;
    in
    inc #Derived_gen.20;
    jump List.678 #Derived_gen.20 #Derived_gen.21 #Derived_gen.22 #Derived_gen.23 #Derived_gen.24;

procedure List.101 (#Derived_gen.39, #Derived_gen.40, #Derived_gen.41, #Derived_gen.42, #Derived_gen.43):
    joinpoint List.690 List.175 List.176 List.177 List.178 List.179:
        let List.692 : Int1 = CallByName Num.22 List.178 List.179;
        if List.692 then
            let List.696 : {Str, Str} = CallByName List.66 List.175 List.178;
            inc List.696;
            let List.180 : {Str, Int1} = CallByName Inspect.229 List.176 List.696;
            let List.695 : U64 = 1i64;
            let List.694 : U64 = CallByName Num.51 List.178 List.695;
            jump List.690 List.175 List.180 List.177 List.694 List.179;
        else
            dec List.175;
            ret List.176;
    in
    inc #Derived_gen.39;
    jump List.690 #Derived_gen.39 #Derived_gen.40 #Derived_gen.41 #Derived_gen.42 #Derived_gen.43;

procedure List.18 (List.172, List.173, List.174):
    let List.676 : U64 = 0i64;
    let List.677 : U64 = CallByName List.6 List.172;
    let List.675 : {Str, Int1} = CallByName List.101 List.172 List.173 List.174 List.676 List.677;
    ret List.675;

procedure List.18 (List.172, List.173, List.174):
    let List.688 : U64 = 0i64;
    let List.689 : U64 = CallByName List.6 List.172;
    let List.687 : {Str, Int1} = CallByName List.101 List.172 List.173 List.174 List.688 List.689;
    ret List.687;

procedure List.6 (#Attr.2):
    let List.686 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.686;

procedure List.6 (#Attr.2):
    let List.698 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.698;

procedure List.66 (#Attr.2, #Attr.3):
    let List.685 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.685;

procedure List.66 (#Attr.2, #Attr.3):
    let List.697 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.697;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.290 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.290;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.297 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.297;

procedure Num.23 (#Attr.2, #Attr.3):
    let Num.294 : Int1 = lowlevel NumLte #Attr.2 #Attr.3;
    ret Num.294;

procedure Num.25 (#Attr.2, #Attr.3):
    let Num.291 : Int1 = lowlevel NumGte #Attr.2 #Attr.3;
    ret Num.291;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.296 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.296;

procedure Num.53 (#Attr.2, #Attr.3):
    let Num.293 : U64 = lowlevel NumAddSaturated #Attr.2 #Attr.3;
    ret Num.293;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.295 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.295;

procedure Str.20 (#Attr.2):
    let Str.315 : Str = lowlevel StrWithCapacity #Attr.2;
    ret Str.315;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.247 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.247;

procedure Str.35 (#Attr.2, #Attr.3):
    let Str.305 : U8 = lowlevel StrGetUnsafe #Attr.2 #Attr.3;
    ret Str.305;

procedure Str.36 (#Attr.2):
    let Str.267 : U64 = lowlevel StrCountUtf8Bytes #Attr.2;
    ret Str.267;

procedure Str.37 (#Attr.2, #Attr.3, #Attr.4):
    let Str.265 : Str = lowlevel StrSubstringUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret Str.265;

procedure Str.38 (Str.112, Str.113):
    let Str.261 : [C , C U64] = CallByName Str.57 Str.112 Str.113;
    let Str.274 : U8 = 1i64;
    let Str.275 : U8 = GetTagId Str.261;
    let Str.276 : Int1 = lowlevel Eq Str.274 Str.275;
    if Str.276 then
        let Str.114 : U64 = UnionAtIndex (Id 1) (Index 0) Str.261;
        let Str.270 : U64 = CallByName Str.36 Str.112;
        let Str.271 : U64 = CallByName Str.36 Str.113;
        let Str.269 : U64 = CallByName Num.20 Str.270 Str.271;
        let Str.115 : U64 = CallByName Num.20 Str.269 Str.114;
        let Str.268 : U64 = 0i64;
        inc Str.112;
        let Str.116 : Str = CallByName Str.37 Str.112 Str.268 Str.114;
        let Str.266 : U64 = CallByName Str.36 Str.113;
        let Str.264 : U64 = CallByName Num.51 Str.114 Str.266;
        let Str.117 : Str = CallByName Str.37 Str.112 Str.264 Str.115;
        let Str.263 : {Str, Str} = Struct {Str.117, Str.116};
        let Str.262 : [C {}, C {Str, Str}] = TagId(1) Str.263;
        ret Str.262;
    else
        dec Str.112;
        let Str.273 : {} = Struct {};
        let Str.272 : [C {}, C {Str, Str}] = TagId(0) Str.273;
        ret Str.272;

procedure Str.45 (Str.91, Str.92, Str.93):
    inc Str.91;
    let Str.343 : [C {}, C {Str, Str}] = CallByName Str.38 Str.91 Str.92;
    let Str.351 : U8 = 1i64;
    let Str.352 : U8 = GetTagId Str.343;
    let Str.353 : Int1 = lowlevel Eq Str.351 Str.352;
    if Str.353 then
        let Str.350 : {Str, Str} = UnionAtIndex (Id 1) (Index 0) Str.343;
        let Str.95 : Str = StructAtIndex 0 Str.350;
        let Str.94 : Str = StructAtIndex 1 Str.350;
        let Str.348 : U64 = CallByName Str.36 Str.91;
        dec Str.91;
        let Str.347 : Str = CallByName Str.20 Str.348;
        let Str.346 : Str = CallByName Str.3 Str.347 Str.94;
        dec Str.94;
        let Str.345 : Str = CallByName Str.3 Str.346 Str.93;
        let Str.344 : Str = CallByName Str.56 Str.345 Str.95 Str.92 Str.93;
        ret Str.344;
    else
        dec Str.343;
        ret Str.91;

procedure Str.56 (#Derived_gen.27, #Derived_gen.28, #Derived_gen.29, #Derived_gen.30):
    joinpoint Str.251 Str.96 Str.97 Str.98 Str.99:
        inc Str.97;
        let Str.252 : [C {}, C {Str, Str}] = CallByName Str.38 Str.97 Str.98;
        let Str.258 : U8 = 1i64;
        let Str.259 : U8 = GetTagId Str.252;
        let Str.260 : Int1 = lowlevel Eq Str.258 Str.259;
        if Str.260 then
            dec Str.97;
            let Str.257 : {Str, Str} = UnionAtIndex (Id 1) (Index 0) Str.252;
            let Str.101 : Str = StructAtIndex 0 Str.257;
            let Str.100 : Str = StructAtIndex 1 Str.257;
            let Str.255 : Str = CallByName Str.3 Str.96 Str.100;
            dec Str.100;
            let Str.254 : Str = CallByName Str.3 Str.255 Str.99;
            jump Str.251 Str.254 Str.101 Str.98 Str.99;
        else
            dec Str.98;
            dec Str.252;
            dec Str.99;
            let Str.256 : Str = CallByName Str.3 Str.96 Str.97;
            dec Str.97;
            ret Str.256;
    in
    inc #Derived_gen.29;
    inc #Derived_gen.30;
    jump Str.251 #Derived_gen.27 #Derived_gen.28 #Derived_gen.29 #Derived_gen.30;

procedure Str.57 (Str.121, Str.122):
    let Str.123 : U64 = CallByName Str.36 Str.121;
    let Str.124 : U64 = CallByName Str.36 Str.122;
    let Str.125 : U64 = CallByName Num.77 Str.123 Str.124;
    let Str.278 : U64 = 0i64;
    let Str.277 : [C , C U64] = CallByName Str.58 Str.121 Str.122 Str.278 Str.125;
    ret Str.277;

procedure Str.58 (#Derived_gen.33, #Derived_gen.34, #Derived_gen.35, #Derived_gen.36):
    joinpoint Str.279 Str.126 Str.127 Str.128 Str.129:
        let Str.281 : Int1 = CallByName Num.23 Str.128 Str.129;
        if Str.281 then
            let Str.285 : Int1 = CallByName Str.62 Str.126 Str.128 Str.127;
            if Str.285 then
                dec Str.127;
                dec Str.126;
                let Str.286 : [C , C U64] = TagId(1) Str.128;
                ret Str.286;
            else
                let Str.284 : U64 = 1i64;
                let Str.283 : U64 = CallByName Num.51 Str.128 Str.284;
                jump Str.279 Str.126 Str.127 Str.283 Str.129;
        else
            dec Str.127;
            dec Str.126;
            let Str.280 : [C , C U64] = TagId(0) ;
            ret Str.280;
    in
    inc #Derived_gen.34;
    inc #Derived_gen.33;
    jump Str.279 #Derived_gen.33 #Derived_gen.34 #Derived_gen.35 #Derived_gen.36;

procedure Str.61 (Str.152, Str.153):
    let Str.310 : Int1 = CallByName Num.22 Str.152 Str.153;
    if Str.310 then
        ret Str.152;
    else
        ret Str.153;

procedure Str.62 (Str.154, Str.155, Str.156):
    let Str.157 : U64 = CallByName Str.36 Str.154;
    let Str.158 : U64 = CallByName Str.36 Str.156;
    let Str.308 : U64 = CallByName Num.53 Str.155 Str.158;
    let Str.159 : U64 = CallByName Str.61 Str.308 Str.157;
    let Str.307 : U64 = 0i64;
    inc Str.156;
    inc Str.154;
    let Str.288 : {U64, Str, U64, Str, U64, U64} = Struct {Str.159, Str.154, Str.155, Str.156, Str.307, Str.158};
    let Str.287 : Int1 = CallByName Str.63 Str.288;
    ret Str.287;

procedure Str.63 (Str.160):
    let Str.166 : U64 = StructAtIndex 0 Str.160;
    let Str.161 : Str = StructAtIndex 1 Str.160;
    let Str.162 : U64 = StructAtIndex 2 Str.160;
    let Str.163 : Str = StructAtIndex 3 Str.160;
    let Str.164 : U64 = StructAtIndex 4 Str.160;
    let Str.165 : U64 = StructAtIndex 5 Str.160;
    let Str.167 : Int1 = CallByName Num.25 Str.162 Str.166;
    if Str.167 then
        dec Str.163;
        dec Str.161;
        let Str.168 : Int1 = CallByName Bool.9 Str.164 Str.165;
        ret Str.168;
    else
        let Str.303 : U8 = CallByName Str.35 Str.161 Str.162;
        let Str.304 : U8 = CallByName Str.35 Str.163 Str.164;
        let Str.169 : Int1 = CallByName Bool.9 Str.303 Str.304;
        let Str.293 : U64 = StructAtIndex 0 Str.160;
        let Str.294 : Str = StructAtIndex 1 Str.160;
        let Str.296 : Str = StructAtIndex 3 Str.160;
        let Str.298 : U64 = StructAtIndex 5 Str.160;
        let Str.302 : U64 = 1i64;
        let Str.300 : U64 = CallByName Num.51 Str.164 Str.302;
        let Str.301 : U64 = 1i64;
        let Str.299 : U64 = CallByName Num.51 Str.162 Str.301;
        let Str.292 : {U64, Str, U64, Str, U64, U64} = Struct {Str.293, Str.294, Str.299, Str.296, Str.300, Str.298};
        let Str.170 : Int1 = CallByName Str.63 Str.292;
        if Str.169 then
            ret Str.170;
        else
            let Str.290 : Int1 = CallByName Bool.1;
            ret Str.290;

procedure Test.0 ():
    let Test.4 : Str = "bar";
    let Test.1 : Str = CallByName Inspect.33 Test.4;
    ret Test.1;
