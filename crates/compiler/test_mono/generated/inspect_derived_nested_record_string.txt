procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Inspect.30 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.1):
    let #Derived_gen.7 : Str = "a";
    let #Derived_gen.8 : Str = CallByName #Derived.4 #Derived.1;
    let #Derived_gen.6 : {Str, Str} = Struct {#Derived_gen.7, #Derived_gen.8};
    let #Derived_gen.5 : List {Str, Str} = Array [#Derived_gen.6];
    let #Derived_gen.4 : List {Str, Str} = CallByName Inspect.45 #Derived_gen.5;
    let #Derived_gen.3 : Str = CallByName Inspect.31 #Derived_gen.4 #Derived.3;
    dec #Derived_gen.4;
    ret #Derived_gen.3;

procedure #Derived.4 (#Derived.5):
    let #Derived_gen.10 : Str = CallByName Inspect.30 #Derived.5;
    ret #Derived_gen.10;

procedure #Derived.6 (#Derived.7, #Derived.5):
    let #Derived_gen.17 : Str = "b";
    let #Derived_gen.18 : Str = CallByName Inspect.47 #Derived.5;
    let #Derived_gen.16 : {Str, Str} = Struct {#Derived_gen.17, #Derived_gen.18};
    let #Derived_gen.15 : List {Str, Str} = Array [#Derived_gen.16];
    let #Derived_gen.14 : List {Str, Str} = CallByName Inspect.45 #Derived_gen.15;
    let #Derived_gen.13 : Str = CallByName Inspect.31 #Derived_gen.14 #Derived.7;
    dec #Derived_gen.14;
    ret #Derived_gen.13;

procedure Bool.1 ():
    let Bool.26 : Int1 = false;
    ret Bool.26;

procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.28 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.28;

procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.29 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.29;

procedure Bool.2 ():
    let Bool.25 : Int1 = true;
    ret Bool.25;

procedure Bool.3 (#Attr.2, #Attr.3):
    let Bool.27 : Int1 = lowlevel And #Attr.2 #Attr.3;
    ret Bool.27;

procedure Inspect.229 (Inspect.230, Inspect.228):
    let Inspect.355 : Str = "{";
    let Inspect.331 : Str = CallByName Inspect.63 Inspect.230 Inspect.355;
    dec Inspect.355;
    let Inspect.327 : {Str, Int1} = CallByName Inspect.231 Inspect.331 Inspect.228;
    dec Inspect.331;
    let Inspect.328 : {} = Struct {};
    let Inspect.323 : Str = CallByName Inspect.243 Inspect.327;
    let Inspect.324 : Str = "}";
    let Inspect.322 : Str = CallByName Inspect.63 Inspect.323 Inspect.324;
    dec Inspect.324;
    ret Inspect.322;

procedure Inspect.229 (Inspect.230, Inspect.228):
    let Inspect.395 : Str = "{";
    let Inspect.371 : Str = CallByName Inspect.63 Inspect.230 Inspect.395;
    dec Inspect.395;
    let Inspect.367 : {Str, Int1} = CallByName Inspect.231 Inspect.371 Inspect.228;
    dec Inspect.371;
    let Inspect.368 : {} = Struct {};
    let Inspect.363 : Str = CallByName Inspect.243 Inspect.367;
    let Inspect.364 : Str = "}";
    let Inspect.362 : Str = CallByName Inspect.63 Inspect.363 Inspect.364;
    dec Inspect.364;
    ret Inspect.362;

procedure Inspect.231 (Inspect.232, Inspect.228):
    let Inspect.354 : Int1 = CallByName Bool.1;
    inc Inspect.232;
    let Inspect.335 : {Str, Int1} = Struct {Inspect.232, Inspect.354};
    let Inspect.336 : {} = Struct {};
    let Inspect.334 : {Str, Int1} = CallByName List.18 Inspect.228 Inspect.335 Inspect.336;
    ret Inspect.334;

procedure Inspect.231 (Inspect.232, Inspect.228):
    let Inspect.394 : Int1 = CallByName Bool.1;
    inc Inspect.232;
    let Inspect.375 : {Str, Int1} = Struct {Inspect.232, Inspect.394};
    let Inspect.376 : {} = Struct {};
    let Inspect.374 : {Str, Int1} = CallByName List.18 Inspect.228 Inspect.375 Inspect.376;
    ret Inspect.374;

procedure Inspect.233 (Inspect.337, Inspect.338):
    let Inspect.236 : Str = StructAtIndex 0 Inspect.338;
    let Inspect.237 : Str = StructAtIndex 1 Inspect.338;
    let Inspect.234 : Str = StructAtIndex 0 Inspect.337;
    let Inspect.235 : Int1 = StructAtIndex 1 Inspect.337;
    joinpoint Inspect.352 Inspect.238:
        let Inspect.349 : Str = CallByName Inspect.63 Inspect.238 Inspect.236;
        dec Inspect.236;
        let Inspect.350 : Str = ": ";
        let Inspect.344 : Str = CallByName Inspect.63 Inspect.349 Inspect.350;
        dec Inspect.350;
        let Inspect.340 : Str = CallByName Inspect.239 Inspect.344 Inspect.237;
        let Inspect.341 : {} = Struct {};
        let Inspect.339 : {Str, Int1} = CallByName Inspect.241 Inspect.340;
        dec Inspect.340;
        ret Inspect.339;
    in
    if Inspect.235 then
        let Inspect.353 : Str = ", ";
        let Inspect.351 : Str = CallByName Inspect.63 Inspect.234 Inspect.353;
        dec Inspect.353;
        jump Inspect.352 Inspect.351;
    else
        jump Inspect.352 Inspect.234;

procedure Inspect.233 (Inspect.337, Inspect.338):
    let Inspect.236 : Str = StructAtIndex 0 Inspect.338;
    let Inspect.237 : Str = StructAtIndex 1 Inspect.338;
    let Inspect.234 : Str = StructAtIndex 0 Inspect.337;
    let Inspect.235 : Int1 = StructAtIndex 1 Inspect.337;
    joinpoint Inspect.392 Inspect.238:
        let Inspect.389 : Str = CallByName Inspect.63 Inspect.238 Inspect.236;
        dec Inspect.236;
        let Inspect.390 : Str = ": ";
        let Inspect.384 : Str = CallByName Inspect.63 Inspect.389 Inspect.390;
        dec Inspect.390;
        let Inspect.380 : Str = CallByName Inspect.239 Inspect.384 Inspect.237;
        let Inspect.381 : {} = Struct {};
        let Inspect.379 : {Str, Int1} = CallByName Inspect.241 Inspect.380;
        dec Inspect.380;
        ret Inspect.379;
    in
    if Inspect.235 then
        let Inspect.393 : Str = ", ";
        let Inspect.391 : Str = CallByName Inspect.63 Inspect.234 Inspect.393;
        dec Inspect.393;
        jump Inspect.392 Inspect.391;
    else
        jump Inspect.392 Inspect.234;

procedure Inspect.239 (Inspect.240, Inspect.237):
    let Inspect.347 : Str = CallByName Inspect.31 Inspect.237 Inspect.240;
    ret Inspect.347;

procedure Inspect.239 (Inspect.240, Inspect.237):
    let Inspect.387 : Str = CallByName Inspect.31 Inspect.237 Inspect.240;
    ret Inspect.387;

procedure Inspect.241 (Inspect.242):
    let Inspect.383 : Int1 = CallByName Bool.2;
    inc Inspect.242;
    let Inspect.382 : {Str, Int1} = Struct {Inspect.242, Inspect.383};
    ret Inspect.382;

procedure Inspect.243 (Inspect.329):
    let Inspect.370 : Str = StructAtIndex 0 Inspect.329;
    ret Inspect.370;

procedure Inspect.250 (Inspect.251, Inspect.249):
    let Inspect.418 : Str = "\"";
    let Inspect.403 : Str = CallByName Inspect.63 Inspect.251 Inspect.418;
    dec Inspect.418;
    let Inspect.401 : Str = CallByName Inspect.252 Inspect.403 Inspect.249;
    let Inspect.402 : Str = "\"";
    let Inspect.400 : Str = CallByName Inspect.63 Inspect.401 Inspect.402;
    dec Inspect.402;
    ret Inspect.400;

procedure Inspect.252 (Inspect.253, Inspect.249):
    let Inspect.416 : Str = "\u{feff}";
    let Inspect.417 : Str = "\\u(feff)";
    let Inspect.413 : Str = CallByName Str.45 Inspect.249 Inspect.416 Inspect.417;
    dec Inspect.416;
    dec Inspect.417;
    let Inspect.414 : Str = "\u{200b}";
    let Inspect.415 : Str = "\\u(200b)";
    let Inspect.410 : Str = CallByName Str.45 Inspect.413 Inspect.414 Inspect.415;
    dec Inspect.414;
    dec Inspect.415;
    let Inspect.411 : Str = "\u{200c}";
    let Inspect.412 : Str = "\\u(200c)";
    let Inspect.407 : Str = CallByName Str.45 Inspect.410 Inspect.411 Inspect.412;
    dec Inspect.412;
    dec Inspect.411;
    let Inspect.408 : Str = "\u{200d}";
    let Inspect.409 : Str = "\\u(200d)";
    let Inspect.254 : Str = CallByName Str.45 Inspect.407 Inspect.408 Inspect.409;
    dec Inspect.409;
    dec Inspect.408;
    let Inspect.406 : Str = CallByName Inspect.63 Inspect.253 Inspect.254;
    dec Inspect.254;
    ret Inspect.406;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.31 (Inspect.306, Inspect.149):
    let Inspect.317 : Str = CallByName Inspect.229 Inspect.149 Inspect.306;
    ret Inspect.317;

procedure Inspect.31 (Inspect.306, Inspect.149):
    let Inspect.348 : Str = CallByName #Derived.6 Inspect.149 Inspect.306;
    ret Inspect.348;

procedure Inspect.31 (Inspect.306, Inspect.149):
    let Inspect.357 : Str = CallByName Inspect.229 Inspect.149 Inspect.306;
    ret Inspect.357;

procedure Inspect.31 (Inspect.306, Inspect.149):
    let Inspect.388 : Str = CallByName Inspect.250 Inspect.149 Inspect.306;
    ret Inspect.388;

procedure Inspect.33 (Inspect.152):
    let Inspect.308 : Str = CallByName Inspect.5 Inspect.152;
    let Inspect.307 : Str = CallByName Inspect.64 Inspect.308;
    ret Inspect.307;

procedure Inspect.39 (Inspect.304):
    let Inspect.314 : Str = "";
    ret Inspect.314;

procedure Inspect.45 (Inspect.228):
    let Inspect.318 : List {Str, Str} = CallByName Inspect.30 Inspect.228;
    ret Inspect.318;

procedure Inspect.45 (Inspect.228):
    let Inspect.358 : List {Str, Str} = CallByName Inspect.30 Inspect.228;
    ret Inspect.358;

procedure Inspect.47 (Inspect.249):
    let Inspect.396 : Str = CallByName Inspect.30 Inspect.249;
    ret Inspect.396;

procedure Inspect.5 (Inspect.150):
    let Inspect.315 : Str = CallByName #Derived.0 Inspect.150;
    let Inspect.312 : {} = Struct {};
    let Inspect.311 : Str = CallByName Inspect.39 Inspect.312;
    let Inspect.310 : Str = CallByName #Derived.2 Inspect.311 Inspect.315;
    ret Inspect.310;

procedure Inspect.63 (Inspect.303, Inspect.299):
    let Inspect.366 : Str = CallByName Str.3 Inspect.303 Inspect.299;
    ret Inspect.366;

procedure Inspect.64 (Inspect.305):
    ret Inspect.305;

procedure List.100 (#Derived_gen.24, #Derived_gen.25, #Derived_gen.26, #Derived_gen.27, #Derived_gen.28):
    joinpoint List.668 List.174 List.175 List.176 List.177 List.178:
        let List.670 : Int1 = CallByName Num.22 List.177 List.178;
        if List.670 then
            let List.674 : {Str, Str} = CallByName List.66 List.174 List.177;
            inc List.674;
            let List.179 : {Str, Int1} = CallByName Inspect.233 List.175 List.674;
            let List.673 : U64 = 1i64;
            let List.672 : U64 = CallByName Num.51 List.177 List.673;
            jump List.668 List.174 List.179 List.176 List.672 List.178;
        else
            dec List.174;
            ret List.175;
    in
    inc #Derived_gen.24;
    jump List.668 #Derived_gen.24 #Derived_gen.25 #Derived_gen.26 #Derived_gen.27 #Derived_gen.28;

procedure List.100 (#Derived_gen.54, #Derived_gen.55, #Derived_gen.56, #Derived_gen.57, #Derived_gen.58):
    joinpoint List.680 List.174 List.175 List.176 List.177 List.178:
        let List.682 : Int1 = CallByName Num.22 List.177 List.178;
        if List.682 then
            let List.686 : {Str, Str} = CallByName List.66 List.174 List.177;
            inc List.686;
            let List.179 : {Str, Int1} = CallByName Inspect.233 List.175 List.686;
            let List.685 : U64 = 1i64;
            let List.684 : U64 = CallByName Num.51 List.177 List.685;
            jump List.680 List.174 List.179 List.176 List.684 List.178;
        else
            dec List.174;
            ret List.175;
    in
    inc #Derived_gen.54;
    jump List.680 #Derived_gen.54 #Derived_gen.55 #Derived_gen.56 #Derived_gen.57 #Derived_gen.58;

procedure List.18 (List.171, List.172, List.173):
    let List.666 : U64 = 0i64;
    let List.667 : U64 = CallByName List.6 List.171;
    let List.665 : {Str, Int1} = CallByName List.100 List.171 List.172 List.173 List.666 List.667;
    ret List.665;

procedure List.18 (List.171, List.172, List.173):
    let List.678 : U64 = 0i64;
    let List.679 : U64 = CallByName List.6 List.171;
    let List.677 : {Str, Int1} = CallByName List.100 List.171 List.172 List.173 List.678 List.679;
    ret List.677;

procedure List.6 (#Attr.2):
    let List.676 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.676;

procedure List.6 (#Attr.2):
    let List.688 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.688;

procedure List.66 (#Attr.2, #Attr.3):
    let List.675 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.675;

procedure List.66 (#Attr.2, #Attr.3):
    let List.687 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.687;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.290 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.290;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.297 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.297;

procedure Num.23 (#Attr.2, #Attr.3):
    let Num.294 : Int1 = lowlevel NumLte #Attr.2 #Attr.3;
    ret Num.294;

procedure Num.25 (#Attr.2, #Attr.3):
    let Num.291 : Int1 = lowlevel NumGte #Attr.2 #Attr.3;
    ret Num.291;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.296 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.296;

procedure Num.53 (#Attr.2, #Attr.3):
    let Num.293 : U64 = lowlevel NumAddSaturated #Attr.2 #Attr.3;
    ret Num.293;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.295 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.295;

procedure Str.20 (#Attr.2):
    let Str.314 : Str = lowlevel StrWithCapacity #Attr.2;
    ret Str.314;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.247 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.247;

procedure Str.35 (#Attr.2, #Attr.3):
    let Str.304 : U8 = lowlevel StrGetUnsafe #Attr.2 #Attr.3;
    ret Str.304;

procedure Str.36 (#Attr.2):
    let Str.267 : U64 = lowlevel StrCountUtf8Bytes #Attr.2;
    ret Str.267;

procedure Str.37 (#Attr.2, #Attr.3, #Attr.4):
    let Str.265 : Str = lowlevel StrSubstringUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret Str.265;

procedure Str.38 (Str.112, Str.113):
    let Str.261 : [C , C U64] = CallByName Str.57 Str.112 Str.113;
    let Str.274 : U8 = 1i64;
    let Str.275 : U8 = GetTagId Str.261;
    let Str.276 : Int1 = lowlevel Eq Str.274 Str.275;
    if Str.276 then
        let Str.114 : U64 = UnionAtIndex (Id 1) (Index 0) Str.261;
        let Str.270 : U64 = CallByName Str.36 Str.112;
        let Str.271 : U64 = CallByName Str.36 Str.113;
        let Str.269 : U64 = CallByName Num.20 Str.270 Str.271;
        let Str.115 : U64 = CallByName Num.20 Str.269 Str.114;
        let Str.268 : U64 = 0i64;
        inc Str.112;
        let Str.116 : Str = CallByName Str.37 Str.112 Str.268 Str.114;
        let Str.266 : U64 = CallByName Str.36 Str.113;
        let Str.264 : U64 = CallByName Num.51 Str.114 Str.266;
        let Str.117 : Str = CallByName Str.37 Str.112 Str.264 Str.115;
        let Str.263 : {Str, Str} = Struct {Str.117, Str.116};
        let Str.262 : [C {}, C {Str, Str}] = TagId(1) Str.263;
        ret Str.262;
    else
        dec Str.112;
        let Str.273 : {} = Struct {};
        let Str.272 : [C {}, C {Str, Str}] = TagId(0) Str.273;
        ret Str.272;

procedure Str.45 (Str.91, Str.92, Str.93):
    inc Str.91;
    let Str.342 : [C {}, C {Str, Str}] = CallByName Str.38 Str.91 Str.92;
    let Str.350 : U8 = 1i64;
    let Str.351 : U8 = GetTagId Str.342;
    let Str.352 : Int1 = lowlevel Eq Str.350 Str.351;
    if Str.352 then
        let Str.349 : {Str, Str} = UnionAtIndex (Id 1) (Index 0) Str.342;
        let Str.95 : Str = StructAtIndex 0 Str.349;
        let Str.94 : Str = StructAtIndex 1 Str.349;
        let Str.347 : U64 = CallByName Str.36 Str.91;
        dec Str.91;
        let Str.346 : Str = CallByName Str.20 Str.347;
        let Str.345 : Str = CallByName Str.3 Str.346 Str.94;
        dec Str.94;
        let Str.344 : Str = CallByName Str.3 Str.345 Str.93;
        let Str.343 : Str = CallByName Str.56 Str.344 Str.95 Str.92 Str.93;
        ret Str.343;
    else
        dec Str.342;
        ret Str.91;

procedure Str.56 (#Derived_gen.29, #Derived_gen.30, #Derived_gen.31, #Derived_gen.32):
    joinpoint Str.251 Str.96 Str.97 Str.98 Str.99:
        inc Str.97;
        let Str.252 : [C {}, C {Str, Str}] = CallByName Str.38 Str.97 Str.98;
        let Str.258 : U8 = 1i64;
        let Str.259 : U8 = GetTagId Str.252;
        let Str.260 : Int1 = lowlevel Eq Str.258 Str.259;
        if Str.260 then
            dec Str.97;
            let Str.257 : {Str, Str} = UnionAtIndex (Id 1) (Index 0) Str.252;
            let Str.101 : Str = StructAtIndex 0 Str.257;
            let Str.100 : Str = StructAtIndex 1 Str.257;
            let Str.255 : Str = CallByName Str.3 Str.96 Str.100;
            dec Str.100;
            let Str.254 : Str = CallByName Str.3 Str.255 Str.99;
            jump Str.251 Str.254 Str.101 Str.98 Str.99;
        else
            dec Str.98;
            dec Str.252;
            dec Str.99;
            let Str.256 : Str = CallByName Str.3 Str.96 Str.97;
            dec Str.97;
            ret Str.256;
    in
    inc #Derived_gen.31;
    inc #Derived_gen.32;
    jump Str.251 #Derived_gen.29 #Derived_gen.30 #Derived_gen.31 #Derived_gen.32;

procedure Str.57 (Str.121, Str.122):
    let Str.123 : U64 = CallByName Str.36 Str.121;
    let Str.124 : U64 = CallByName Str.36 Str.122;
    let Str.125 : U64 = CallByName Num.77 Str.123 Str.124;
    let Str.278 : U64 = 0i64;
    let Str.277 : [C , C U64] = CallByName Str.58 Str.121 Str.122 Str.278 Str.125;
    ret Str.277;

procedure Str.58 (#Derived_gen.49, #Derived_gen.50, #Derived_gen.51, #Derived_gen.52):
    joinpoint Str.279 Str.126 Str.127 Str.128 Str.129:
        let Str.281 : Int1 = CallByName Num.23 Str.128 Str.129;
        if Str.281 then
            let Str.285 : Int1 = CallByName Str.62 Str.126 Str.128 Str.127;
            if Str.285 then
                dec Str.127;
                dec Str.126;
                let Str.286 : [C , C U64] = TagId(1) Str.128;
                ret Str.286;
            else
                let Str.284 : U64 = 1i64;
                let Str.283 : U64 = CallByName Num.51 Str.128 Str.284;
                jump Str.279 Str.126 Str.127 Str.283 Str.129;
        else
            dec Str.127;
            dec Str.126;
            let Str.280 : [C , C U64] = TagId(0) ;
            ret Str.280;
    in
    inc #Derived_gen.49;
    inc #Derived_gen.50;
    jump Str.279 #Derived_gen.49 #Derived_gen.50 #Derived_gen.51 #Derived_gen.52;

procedure Str.61 (Str.152, Str.153):
    let Str.309 : Int1 = CallByName Num.22 Str.152 Str.153;
    if Str.309 then
        ret Str.152;
    else
        ret Str.153;

procedure Str.62 (Str.154, Str.155, Str.156):
    let Str.157 : U64 = CallByName Str.36 Str.154;
    let Str.158 : U64 = CallByName Str.36 Str.156;
    let Str.307 : U64 = CallByName Num.53 Str.155 Str.158;
    let Str.159 : U64 = CallByName Str.61 Str.307 Str.157;
    let Str.306 : U64 = 0i64;
    inc Str.156;
    inc Str.154;
    let Str.288 : {U64, Str, U64, Str, U64, U64} = Struct {Str.159, Str.154, Str.155, Str.156, Str.306, Str.158};
    let Str.287 : Int1 = CallByName Str.63 Str.288;
    ret Str.287;

procedure Str.63 (Str.160):
    let Str.166 : U64 = StructAtIndex 0 Str.160;
    let Str.161 : Str = StructAtIndex 1 Str.160;
    let Str.162 : U64 = StructAtIndex 2 Str.160;
    let Str.163 : Str = StructAtIndex 3 Str.160;
    let Str.164 : U64 = StructAtIndex 4 Str.160;
    let Str.165 : U64 = StructAtIndex 5 Str.160;
    let Str.167 : Int1 = CallByName Num.25 Str.162 Str.166;
    if Str.167 then
        dec Str.163;
        dec Str.161;
        let Str.168 : Int1 = CallByName Bool.11 Str.164 Str.165;
        ret Str.168;
    else
        let Str.302 : U8 = CallByName Str.35 Str.161 Str.162;
        let Str.303 : U8 = CallByName Str.35 Str.163 Str.164;
        let Str.169 : Int1 = CallByName Bool.11 Str.302 Str.303;
        let Str.292 : U64 = StructAtIndex 0 Str.160;
        let Str.293 : Str = StructAtIndex 1 Str.160;
        let Str.295 : Str = StructAtIndex 3 Str.160;
        let Str.297 : U64 = StructAtIndex 5 Str.160;
        let Str.301 : U64 = 1i64;
        let Str.299 : U64 = CallByName Num.51 Str.164 Str.301;
        let Str.300 : U64 = 1i64;
        let Str.298 : U64 = CallByName Num.51 Str.162 Str.300;
        let Str.291 : {U64, Str, U64, Str, U64, U64} = Struct {Str.292, Str.293, Str.298, Str.295, Str.299, Str.297};
        let Str.170 : Int1 = CallByName Str.63 Str.291;
        let Str.290 : Int1 = CallByName Bool.3 Str.169 Str.170;
        ret Str.290;

procedure Test.0 ():
    let Test.4 : Str = "bar";
    let Test.1 : Str = CallByName Inspect.33 Test.4;
    ret Test.1;
