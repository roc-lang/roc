procedure List.3 (List.131, List.132, List.133):
    let List.703 : {List U64, U64} = CallByName List.64 List.131 List.132 List.133;
    let List.702 : List U64 = StructAtIndex 0 List.703;
    ret List.702;

procedure List.6 (#Attr.2):
    let List.701 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.701;

procedure List.64 (List.128, List.129, List.130):
    let List.700 : U64 = CallByName List.6 List.128;
    let List.697 : Int1 = CallByName Num.22 List.129 List.700;
    if List.697 then
        let List.698 : {List U64, U64} = CallByName List.67 List.128 List.129 List.130;
        ret List.698;
    else
        let List.696 : {List U64, U64} = Struct {List.128, List.130};
        ret List.696;

procedure List.67 (#Attr.2, #Attr.3, #Attr.4):
    let List.699 : {List U64, U64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.699;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.289 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.289;

procedure Test.1 (Test.2):
    let Test.6 : List U64 = StructAtIndex 0 Test.2;
    let Test.7 : List U64 = StructAtIndex 1 Test.2;
    let Test.8 : List U64 = StructAtIndex 2 Test.2;
    let Test.13 : U64 = 8i64;
    let Test.14 : U64 = 8i64;
    let Test.10 : List U64 = CallByName List.3 Test.7 Test.13 Test.14;
    let Test.11 : U64 = 7i64;
    let Test.12 : U64 = 7i64;
    let Test.9 : List U64 = CallByName List.3 Test.6 Test.11 Test.12;
    let Test.5 : {List U64, List U64, List U64} = Struct {Test.9, Test.10, Test.8};
    ret Test.5;

procedure Test.0 ():
    let Test.15 : List U64 = Array [];
    let Test.16 : List U64 = Array [];
    let Test.17 : List U64 = Array [];
    let Test.4 : {List U64, List U64, List U64} = Struct {Test.15, Test.16, Test.17};
    let Test.3 : {List U64, List U64, List U64} = CallByName Test.1 Test.4;
    ret Test.3;
