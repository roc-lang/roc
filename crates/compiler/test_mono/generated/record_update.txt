procedure List.3 (List.129, List.130, List.131):
    let List.692 : {List U64, U64} = CallByName List.64 List.129 List.130 List.131;
    let List.691 : List U64 = StructAtIndex 0 List.692;
    ret List.691;

procedure List.6 (#Attr.2):
    let List.690 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.690;

procedure List.64 (List.126, List.127, List.128):
    let List.689 : U64 = CallByName List.6 List.126;
    let List.686 : Int1 = CallByName Num.22 List.127 List.689;
    if List.686 then
        let List.687 : {List U64, U64} = CallByName List.67 List.126 List.127 List.128;
        ret List.687;
    else
        let List.685 : {List U64, U64} = Struct {List.126, List.128};
        ret List.685;

procedure List.67 (#Attr.2, #Attr.3, #Attr.4):
    let List.688 : {List U64, U64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.688;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.289 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.289;

procedure Test.1 (Test.2):
    let Test.6 : List U64 = StructAtIndex 0 Test.2;
    let Test.7 : List U64 = StructAtIndex 1 Test.2;
    let Test.8 : List U64 = StructAtIndex 2 Test.2;
    let Test.13 : U64 = 8i64;
    let Test.14 : U64 = 8i64;
    let Test.10 : List U64 = CallByName List.3 Test.7 Test.13 Test.14;
    let Test.11 : U64 = 7i64;
    let Test.12 : U64 = 7i64;
    let Test.9 : List U64 = CallByName List.3 Test.6 Test.11 Test.12;
    let Test.5 : {List U64, List U64, List U64} = Struct {Test.9, Test.10, Test.8};
    ret Test.5;

procedure Test.0 ():
    let Test.15 : List U64 = Array [];
    let Test.16 : List U64 = Array [];
    let Test.17 : List U64 = Array [];
    let Test.4 : {List U64, List U64, List U64} = Struct {Test.15, Test.16, Test.17};
    let Test.3 : {List U64, List U64, List U64} = CallByName Test.1 Test.4;
    ret Test.3;
