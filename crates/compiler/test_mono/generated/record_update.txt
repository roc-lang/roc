procedure List.3 (List.108, List.109, List.110):
    let List.544 : {List U64, U64} = CallByName List.64 List.108 List.109 List.110;
    let List.543 : List U64 = StructAtIndex 0 List.544;
    ret List.543;

procedure List.6 (#Attr.2):
    let List.542 : U64 = lowlevel ListLen #Attr.2;
    ret List.542;

procedure List.64 (List.105, List.106, List.107):
    let List.541 : U64 = CallByName List.6 List.105;
    let List.538 : Int1 = CallByName Num.22 List.106 List.541;
    if List.538 then
        let List.539 : {List U64, U64} = CallByName List.67 List.105 List.106 List.107;
        ret List.539;
    else
        let List.537 : {List U64, U64} = Struct {List.105, List.107};
        ret List.537;

procedure List.67 (#Attr.2, #Attr.3, #Attr.4):
    let List.540 : {List U64, U64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.540;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.291 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.291;

procedure Test.1 (Test.2):
    let Test.6 : List U64 = StructAtIndex 0 Test.2;
    let Test.8 : List U64 = StructAtIndex 1 Test.2;
    let Test.10 : List U64 = StructAtIndex 2 Test.2;
    let Test.13 : U64 = 8i64;
    let Test.14 : U64 = 8i64;
    let Test.9 : List U64 = CallByName List.3 Test.8 Test.13 Test.14;
    let Test.11 : U64 = 7i64;
    let Test.12 : U64 = 7i64;
    let Test.7 : List U64 = CallByName List.3 Test.6 Test.11 Test.12;
    let Test.5 : {List U64, List U64, List U64} = Struct {Test.7, Test.9, Test.10};
    ret Test.5;

procedure Test.0 ():
    let Test.15 : List U64 = Array [];
    let Test.16 : List U64 = Array [];
    let Test.17 : List U64 = Array [];
    let Test.4 : {List U64, List U64, List U64} = Struct {Test.15, Test.16, Test.17};
    let Test.3 : {List U64, List U64, List U64} = CallByName Test.1 Test.4;
    ret Test.3;
