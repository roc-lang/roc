procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure List.145 (List.146, List.147, List.144):
    let List.540 : [<rnw><null>, C *self Int1, C *self Int1] = CallByName Test.6 List.146 List.147 List.144;
    ret List.540;

procedure List.18 (List.142, List.143, List.144):
    let List.521 : [<rnw><null>, C *self Int1, C *self Int1] = CallByName List.93 List.142 List.143 List.144;
    ret List.521;

procedure List.6 (#Attr.2):
    let List.538 : U64 = lowlevel ListLen #Attr.2;
    ret List.538;

procedure List.66 (#Attr.2, #Attr.3):
    let List.537 : Int1 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.537;

procedure List.80 (List.544, List.545, List.546, List.547, List.548):
    joinpoint List.527 List.439 List.440 List.441 List.442 List.443:
        let List.529 : Int1 = CallByName Num.22 List.442 List.443;
        if List.529 then
            let List.536 : Int1 = CallByName List.66 List.439 List.442;
            let List.530 : [<rnw><null>, C *self Int1, C *self Int1] = CallByName List.145 List.440 List.536 List.441;
            let List.533 : U64 = 1i64;
            let List.532 : U64 = CallByName Num.19 List.442 List.533;
            jump List.527 List.439 List.530 List.441 List.532 List.443;
        else
            dec List.439;
            ret List.440;
    in
    jump List.527 List.544 List.545 List.546 List.547 List.548;

procedure List.93 (List.436, List.437, List.438):
    let List.525 : U64 = 0i64;
    let List.526 : U64 = CallByName List.6 List.436;
    let List.524 : [<rnw><null>, C *self Int1, C *self Int1] = CallByName List.80 List.436 List.437 List.438 List.525 List.526;
    ret List.524;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.281 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.281;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.282 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.282;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.300 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.300;

procedure Test.1 (Test.5):
    ret Test.5;

procedure Test.11 (Test.53, Test.54):
    joinpoint Test.27 Test.12 #Attr.12:
        let Test.8 : Int1 = UnionAtIndex (Id 2) (Index 1) #Attr.12;
        let Test.7 : [<rnw><null>, C *self Int1, C *self Int1] = UnionAtIndex (Id 2) (Index 0) #Attr.12;
        joinpoint #Derived_gen.2:
            joinpoint Test.31 Test.29:
                let Test.30 : U8 = GetTagId Test.7;
                switch Test.30:
                    case 0:
                        dec Test.7;
                        let Test.28 : Str = CallByName Test.2 Test.29;
                        ret Test.28;
                
                    case 1:
                        let Test.28 : Str = CallByName Test.9 Test.29 Test.7;
                        ret Test.28;
                
                    default:
                        jump Test.27 Test.29 Test.7;
                
            in
            switch Test.8:
                case 0:
                    let Test.32 : Str = CallByName Test.3 Test.12;
                    jump Test.31 Test.32;
            
                default:
                    let Test.32 : Str = CallByName Test.4 Test.12;
                    jump Test.31 Test.32;
            
        in
        let #Derived_gen.3 : Int1 = lowlevel RefCountIsUnique #Attr.12;
        if #Derived_gen.3 then
            decref #Attr.12;
            jump #Derived_gen.2;
        else
            inc Test.7;
            decref #Attr.12;
            jump #Derived_gen.2;
    in
    jump Test.27 Test.53 Test.54;

procedure Test.2 (Test.13):
    ret Test.13;

procedure Test.3 (Test.14):
    let Test.48 : Str = "!";
    let Test.47 : Str = CallByName Str.3 Test.14 Test.48;
    dec Test.48;
    ret Test.47;

procedure Test.4 (Test.15):
    let Test.44 : Str = "(";
    let Test.46 : Str = ")";
    let Test.45 : Str = CallByName Str.3 Test.15 Test.46;
    dec Test.46;
    let Test.43 : Str = CallByName Str.3 Test.44 Test.45;
    dec Test.45;
    ret Test.43;

procedure Test.6 (Test.7, Test.8, Test.5):
    if Test.5 then
        let Test.33 : [<rnw><null>, C *self Int1, C *self Int1] = TagId(1) Test.7 Test.8;
        ret Test.33;
    else
        let Test.26 : [<rnw><null>, C *self Int1, C *self Int1] = TagId(2) Test.7 Test.8;
        ret Test.26;

procedure Test.9 (Test.10, #Attr.12):
    let Test.8 : Int1 = UnionAtIndex (Id 1) (Index 1) #Attr.12;
    let Test.7 : [<rnw><null>, C *self Int1, C *self Int1] = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    joinpoint #Derived_gen.4:
        let Test.37 : U8 = GetTagId Test.7;
        joinpoint Test.38 Test.36:
            switch Test.8:
                case 0:
                    let Test.35 : Str = CallByName Test.3 Test.36;
                    ret Test.35;
            
                default:
                    let Test.35 : Str = CallByName Test.4 Test.36;
                    ret Test.35;
            
        in
        switch Test.37:
            case 0:
                dec Test.7;
                let Test.39 : Str = CallByName Test.2 Test.10;
                jump Test.38 Test.39;
        
            case 1:
                let Test.39 : Str = CallByName Test.9 Test.10 Test.7;
                jump Test.38 Test.39;
        
            default:
                let Test.39 : Str = CallByName Test.11 Test.10 Test.7;
                jump Test.38 Test.39;
        
    in
    let #Derived_gen.5 : Int1 = lowlevel RefCountIsUnique #Attr.12;
    if #Derived_gen.5 then
        decref #Attr.12;
        jump #Derived_gen.4;
    else
        inc Test.7;
        decref #Attr.12;
        jump #Derived_gen.4;

procedure Test.0 ():
    let Test.41 : Int1 = false;
    let Test.42 : Int1 = true;
    let Test.20 : List Int1 = Array [Test.41, Test.42];
    let Test.21 : [<rnw><null>, C *self Int1, C *self Int1] = TagId(0) ;
    let Test.23 : Int1 = CallByName Bool.2;
    let Test.22 : Int1 = CallByName Test.1 Test.23;
    let Test.16 : [<rnw><null>, C *self Int1, C *self Int1] = CallByName List.18 Test.20 Test.21 Test.22;
    let Test.18 : Str = "hello";
    let Test.19 : U8 = GetTagId Test.16;
    switch Test.19:
        case 0:
            dec Test.16;
            let Test.17 : Str = CallByName Test.2 Test.18;
            ret Test.17;
    
        case 1:
            let Test.17 : Str = CallByName Test.9 Test.18 Test.16;
            ret Test.17;
    
        default:
            let Test.17 : Str = CallByName Test.11 Test.18 Test.16;
            ret Test.17;
    
