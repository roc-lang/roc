procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure List.18 (List.160, List.161, List.162):
    let List.575 : U64 = 0i64;
    let List.576 : U64 = CallByName List.6 List.160;
    let List.574 : [<rnw><null>, C *self Int1, C *self Int1] = CallByName List.92 List.160 List.161 List.162 List.575 List.576;
    ret List.574;

procedure List.6 (#Attr.2):
    let List.585 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.585;

procedure List.66 (#Attr.2, #Attr.3):
    let List.584 : Int1 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.584;

procedure List.92 (#Derived_gen.5, #Derived_gen.6, #Derived_gen.7, #Derived_gen.8, #Derived_gen.9):
    joinpoint List.577 List.163 List.164 List.165 List.166 List.167:
        let List.579 : Int1 = CallByName Num.22 List.166 List.167;
        if List.579 then
            let List.583 : Int1 = CallByName List.66 List.163 List.166;
            let List.168 : [<rnw><null>, C *self Int1, C *self Int1] = CallByName Test.6 List.164 List.583 List.165;
            let List.582 : U64 = 1i64;
            let List.581 : U64 = CallByName Num.51 List.166 List.582;
            jump List.577 List.163 List.168 List.165 List.581 List.167;
        else
            dec List.163;
            ret List.164;
    in
    jump List.577 #Derived_gen.5 #Derived_gen.6 #Derived_gen.7 #Derived_gen.8 #Derived_gen.9;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.280 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.280;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.279 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.279;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.234 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.234;

procedure Test.1 (Test.5):
    ret Test.5;

procedure Test.11 (#Derived_gen.10, #Derived_gen.11):
    joinpoint Test.27 Test.12 #Attr.12:
        let Test.34 : Int1 = UnionAtIndex (Id 2) (Index 1) #Attr.12;
        let Test.33 : [<rnw><null>, C *self Int1, C *self Int1] = UnionAtIndex (Id 2) (Index 0) #Attr.12;
        joinpoint #Derived_gen.14:
            joinpoint Test.31 Test.29:
                let Test.30 : U8 = GetTagId Test.33;
                switch Test.30:
                    case 0:
                        dec Test.33;
                        let Test.28 : Str = CallByName Test.2 Test.29;
                        ret Test.28;
                
                    case 1:
                        let Test.28 : Str = CallByName Test.9 Test.29 Test.33;
                        ret Test.28;
                
                    default:
                        jump Test.27 Test.29 Test.33;
                
            in
            switch Test.34:
                case 0:
                    let Test.32 : Str = CallByName Test.3 Test.12;
                    jump Test.31 Test.32;
            
                default:
                    let Test.32 : Str = CallByName Test.4 Test.12;
                    jump Test.31 Test.32;
            
        in
        let #Derived_gen.15 : Int1 = lowlevel RefCountIsUnique #Attr.12;
        if #Derived_gen.15 then
            free #Attr.12;
            jump #Derived_gen.14;
        else
            inc Test.33;
            decref #Attr.12;
            jump #Derived_gen.14;
    in
    jump Test.27 #Derived_gen.10 #Derived_gen.11;

procedure Test.2 (Test.13):
    ret Test.13;

procedure Test.3 (Test.14):
    let Test.52 : Str = "!";
    let Test.51 : Str = CallByName Str.3 Test.14 Test.52;
    dec Test.52;
    ret Test.51;

procedure Test.4 (Test.15):
    let Test.48 : Str = "(";
    let Test.50 : Str = ")";
    let Test.49 : Str = CallByName Str.3 Test.15 Test.50;
    dec Test.50;
    let Test.47 : Str = CallByName Str.3 Test.48 Test.49;
    dec Test.49;
    ret Test.47;

procedure Test.6 (Test.7, Test.8, Test.5):
    if Test.5 then
        let Test.35 : [<rnw><null>, C *self Int1, C *self Int1] = TagId(1) Test.7 Test.8;
        ret Test.35;
    else
        let Test.26 : [<rnw><null>, C *self Int1, C *self Int1] = TagId(2) Test.7 Test.8;
        ret Test.26;

procedure Test.9 (Test.10, #Attr.12):
    let Test.43 : Int1 = UnionAtIndex (Id 1) (Index 1) #Attr.12;
    let Test.42 : [<rnw><null>, C *self Int1, C *self Int1] = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    joinpoint #Derived_gen.12:
        let Test.39 : U8 = GetTagId Test.42;
        joinpoint Test.40 Test.38:
            switch Test.43:
                case 0:
                    let Test.37 : Str = CallByName Test.3 Test.38;
                    ret Test.37;
            
                default:
                    let Test.37 : Str = CallByName Test.4 Test.38;
                    ret Test.37;
            
        in
        switch Test.39:
            case 0:
                dec Test.42;
                let Test.41 : Str = CallByName Test.2 Test.10;
                jump Test.40 Test.41;
        
            case 1:
                let Test.41 : Str = CallByName Test.9 Test.10 Test.42;
                jump Test.40 Test.41;
        
            default:
                let Test.41 : Str = CallByName Test.11 Test.10 Test.42;
                jump Test.40 Test.41;
        
    in
    let #Derived_gen.13 : Int1 = lowlevel RefCountIsUnique #Attr.12;
    if #Derived_gen.13 then
        free #Attr.12;
        jump #Derived_gen.12;
    else
        inc Test.42;
        decref #Attr.12;
        jump #Derived_gen.12;

procedure Test.0 ():
    let Test.45 : Int1 = false;
    let Test.46 : Int1 = true;
    let Test.20 : List Int1 = Array [Test.45, Test.46];
    let Test.21 : [<rnw><null>, C *self Int1, C *self Int1] = TagId(0) ;
    let Test.23 : Int1 = CallByName Bool.2;
    let Test.22 : Int1 = CallByName Test.1 Test.23;
    let Test.16 : [<rnw><null>, C *self Int1, C *self Int1] = CallByName List.18 Test.20 Test.21 Test.22;
    let Test.18 : Str = "hello";
    let Test.19 : U8 = GetTagId Test.16;
    switch Test.19:
        case 0:
            dec Test.16;
            let Test.17 : Str = CallByName Test.2 Test.18;
            ret Test.17;
    
        case 1:
            let Test.17 : Str = CallByName Test.9 Test.18 Test.16;
            ret Test.17;
    
        default:
            let Test.17 : Str = CallByName Test.11 Test.18 Test.16;
            ret Test.17;
    
