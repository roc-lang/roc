procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Inspect.30 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.3 (#Derived.4, #Derived.1):
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : Str = CallByName Inspect.31 #Derived_gen.4 #Derived.4;
        ret #Derived_gen.3;
    in
    let #Derived_gen.7 : Str = "A";
    let #Derived_gen.9 : Str = CallByName Inspect.47 #Derived.1;
    let #Derived_gen.8 : List Str = Array [#Derived_gen.9];
    let #Derived_gen.6 : [C Str, C Str List Str] = CallByName Inspect.43 #Derived_gen.7 #Derived_gen.8;
    dec #Derived_gen.8;
    dec #Derived_gen.7;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.23 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.23;

procedure Inspect.204 (Inspect.205, #Attr.12):
    let Inspect.346 : Str = UnionAtIndex (Id 0) (Index 0) #Attr.12;
    let Inspect.345 : Str = CallByName Inspect.63 Inspect.205 Inspect.346;
    dec Inspect.346;
    ret Inspect.345;

procedure Inspect.206 (Inspect.207, #Attr.12):
    let Inspect.340 : List Str = UnionAtIndex (Id 1) (Index 1) #Attr.12;
    let Inspect.339 : Str = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    let Inspect.338 : Str = "(";
    let Inspect.337 : Str = CallByName Inspect.63 Inspect.207 Inspect.338;
    dec Inspect.338;
    let Inspect.325 : Str = CallByName Inspect.63 Inspect.337 Inspect.339;
    dec Inspect.339;
    let Inspect.321 : Str = CallByName Inspect.208 Inspect.325 Inspect.340;
    dec Inspect.340;
    let Inspect.322 : Str = ")";
    let Inspect.320 : Str = CallByName Inspect.63 Inspect.321 Inspect.322;
    dec Inspect.322;
    ret Inspect.320;

procedure Inspect.208 (Inspect.209, Inspect.203):
    let Inspect.329 : {} = Struct {};
    let Inspect.328 : Str = CallByName List.18 Inspect.203 Inspect.209 Inspect.329;
    ret Inspect.328;

procedure Inspect.210 (Inspect.211, Inspect.212):
    let Inspect.336 : Str = " ";
    let Inspect.331 : Str = CallByName Inspect.63 Inspect.211 Inspect.336;
    dec Inspect.336;
    let Inspect.330 : Str = CallByName Inspect.213 Inspect.331 Inspect.212;
    ret Inspect.330;

procedure Inspect.213 (Inspect.214, Inspect.212):
    let Inspect.334 : Str = CallByName Inspect.31 Inspect.212 Inspect.214;
    ret Inspect.334;

procedure Inspect.250 (Inspect.251, Inspect.249):
    let Inspect.355 : Str = "\"";
    let Inspect.354 : Str = CallByName Inspect.63 Inspect.251 Inspect.355;
    dec Inspect.355;
    let Inspect.352 : Str = CallByName Inspect.63 Inspect.354 Inspect.249;
    let Inspect.353 : Str = "\"";
    let Inspect.351 : Str = CallByName Inspect.63 Inspect.352 Inspect.353;
    dec Inspect.353;
    ret Inspect.351;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.31 (Inspect.303, Inspect.149):
    let Inspect.315 : U8 = GetTagId Inspect.303;
    switch Inspect.315:
        case 0:
            let Inspect.314 : Str = CallByName Inspect.204 Inspect.149 Inspect.303;
            ret Inspect.314;
    
        default:
            let Inspect.314 : Str = CallByName Inspect.206 Inspect.149 Inspect.303;
            ret Inspect.314;
    

procedure Inspect.31 (Inspect.303, Inspect.149):
    let Inspect.335 : Str = CallByName Inspect.250 Inspect.149 Inspect.303;
    ret Inspect.335;

procedure Inspect.33 (Inspect.152):
    let Inspect.305 : Str = CallByName Inspect.5 Inspect.152;
    let Inspect.304 : Str = CallByName Inspect.64 Inspect.305;
    ret Inspect.304;

procedure Inspect.39 (Inspect.301):
    let Inspect.311 : Str = "";
    ret Inspect.311;

procedure Inspect.43 (Inspect.202, Inspect.203):
    let Inspect.341 : Int1 = CallByName List.1 Inspect.203;
    if Inspect.341 then
        inc Inspect.202;
        let Inspect.343 : [C Str, C Str List Str] = TagId(0) Inspect.202;
        let Inspect.342 : [C Str, C Str List Str] = CallByName Inspect.30 Inspect.343;
        ret Inspect.342;
    else
        inc Inspect.203;
        inc Inspect.202;
        let Inspect.317 : [C Str, C Str List Str] = TagId(1) Inspect.202 Inspect.203;
        let Inspect.316 : [C Str, C Str List Str] = CallByName Inspect.30 Inspect.317;
        ret Inspect.316;

procedure Inspect.47 (Inspect.249):
    let Inspect.347 : Str = CallByName Inspect.30 Inspect.249;
    ret Inspect.347;

procedure Inspect.5 (Inspect.150):
    let Inspect.312 : Str = CallByName #Derived.0 Inspect.150;
    let Inspect.309 : {} = Struct {};
    let Inspect.308 : Str = CallByName Inspect.39 Inspect.309;
    let Inspect.307 : Str = CallByName #Derived.3 Inspect.308 Inspect.312;
    ret Inspect.307;

procedure Inspect.63 (Inspect.300, Inspect.296):
    let Inspect.324 : Str = CallByName Str.3 Inspect.300 Inspect.296;
    ret Inspect.324;

procedure Inspect.64 (Inspect.302):
    ret Inspect.302;

procedure List.1 (List.118):
    let List.672 : U64 = CallByName List.6 List.118;
    let List.673 : U64 = 0i64;
    let List.671 : Int1 = CallByName Bool.11 List.672 List.673;
    ret List.671;

procedure List.100 (#Derived_gen.14, #Derived_gen.15, #Derived_gen.16, #Derived_gen.17, #Derived_gen.18):
    joinpoint List.662 List.174 List.175 List.176 List.177 List.178:
        let List.664 : Int1 = CallByName Num.22 List.177 List.178;
        if List.664 then
            let List.668 : Str = CallByName List.66 List.174 List.177;
            inc List.668;
            let List.179 : Str = CallByName Inspect.210 List.175 List.668;
            dec List.668;
            let List.667 : U64 = 1i64;
            let List.666 : U64 = CallByName Num.51 List.177 List.667;
            jump List.662 List.174 List.179 List.176 List.666 List.178;
        else
            dec List.174;
            ret List.175;
    in
    inc #Derived_gen.14;
    jump List.662 #Derived_gen.14 #Derived_gen.15 #Derived_gen.16 #Derived_gen.17 #Derived_gen.18;

procedure List.18 (List.171, List.172, List.173):
    let List.660 : U64 = 0i64;
    let List.661 : U64 = CallByName List.6 List.171;
    let List.659 : Str = CallByName List.100 List.171 List.172 List.173 List.660 List.661;
    ret List.659;

procedure List.6 (#Attr.2):
    let List.670 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.670;

procedure List.66 (#Attr.2, #Attr.3):
    let List.669 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.669;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.286 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.286;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.285 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.285;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.246 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.246;

procedure Test.0 ():
    let Test.4 : Str = "foo";
    let Test.3 : Str = CallByName Inspect.33 Test.4;
    ret Test.3;
