procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.23 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.23;

procedure Bool.2 ():
    let Bool.24 : Int1 = true;
    ret Bool.24;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.291 : U64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.291;

procedure Num.21 (#Attr.2, #Attr.3):
    let Num.292 : U64 = lowlevel NumMul #Attr.2 #Attr.3;
    ret Num.292;

procedure Test.0 (Test.8):
    let Test.20 : Int1 = CallByName Bool.2;
    if Test.20 then
        let Test.21 : Int1 = true;
        ret Test.21;
    else
        let Test.19 : Int1 = false;
        ret Test.19;

procedure Test.5 (Test.6, Test.2):
    switch Test.2:
        case 0:
            let Test.18 : U64 = CallByName Num.19 Test.6 Test.6;
            ret Test.18;
    
        default:
            let Test.18 : U64 = CallByName Num.21 Test.6 Test.6;
            ret Test.18;
    

procedure Test.7 ():
    let Test.13 : U64 = 3i64;
    let Test.15 : {} = Struct {};
    let Test.14 : Int1 = CallByName Test.0 Test.15;
    let Test.11 : U64 = CallByName Test.5 Test.13 Test.14;
    let Test.12 : U64 = 9i64;
    let Test.10 : Int1 = CallByName Bool.11 Test.11 Test.12;
    expect Test.10;
    let Test.9 : {} = Struct {};
    ret Test.9;
