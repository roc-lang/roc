procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : {Str, Str} = CallByName Inspect.30 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.1):
    let #Derived_gen.11 : Str = "a";
    let #Derived_gen.13 : Str = StructAtIndex 0 #Derived.1;
    inc #Derived_gen.13;
    let #Derived_gen.12 : Str = CallByName Inspect.47 #Derived_gen.13;
    let #Derived_gen.6 : {Str, Str} = Struct {#Derived_gen.11, #Derived_gen.12};
    let #Derived_gen.8 : Str = "b";
    let #Derived_gen.10 : Str = StructAtIndex 1 #Derived.1;
    dec #Derived_gen.13;
    let #Derived_gen.9 : Str = CallByName Inspect.47 #Derived_gen.10;
    let #Derived_gen.7 : {Str, Str} = Struct {#Derived_gen.8, #Derived_gen.9};
    let #Derived_gen.5 : List {Str, Str} = Array [#Derived_gen.6, #Derived_gen.7];
    let #Derived_gen.4 : List {Str, Str} = CallByName Inspect.45 #Derived_gen.5;
    let #Derived_gen.3 : Str = CallByName Inspect.31 #Derived_gen.4 #Derived.3;
    dec #Derived_gen.4;
    ret #Derived_gen.3;

procedure Bool.1 ():
    let Bool.23 : Int1 = false;
    ret Bool.23;

procedure Bool.2 ():
    let Bool.21 : Int1 = true;
    ret Bool.21;

procedure Bool.9 (#Attr.2, #Attr.3):
    let Bool.24 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.24;

procedure Bool.9 (#Attr.2, #Attr.3):
    let Bool.25 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.25;

procedure Inspect.225 (Inspect.226, Inspect.224):
    let Inspect.338 : Str = "{";
    let Inspect.227 : Str = CallByName Inspect.63 Inspect.226 Inspect.338;
    dec Inspect.338;
    let Inspect.337 : Int1 = CallByName Bool.1;
    let Inspect.318 : {Str, Int1} = Struct {Inspect.227, Inspect.337};
    let Inspect.319 : {} = Struct {};
    let Inspect.317 : {Str, Int1} = CallByName List.18 Inspect.224 Inspect.318 Inspect.319;
    let Inspect.228 : Str = StructAtIndex 0 Inspect.317;
    let Inspect.314 : Str = "}";
    let Inspect.313 : Str = CallByName Inspect.63 Inspect.228 Inspect.314;
    dec Inspect.314;
    ret Inspect.313;

procedure Inspect.229 (Inspect.320, Inspect.321):
    let Inspect.232 : Str = StructAtIndex 0 Inspect.321;
    let Inspect.233 : Str = StructAtIndex 1 Inspect.321;
    let Inspect.230 : Str = StructAtIndex 0 Inspect.320;
    let Inspect.231 : Int1 = StructAtIndex 1 Inspect.320;
    joinpoint Inspect.335 Inspect.234:
        let Inspect.332 : Str = CallByName Inspect.63 Inspect.234 Inspect.232;
        dec Inspect.232;
        let Inspect.333 : Str = ": ";
        let Inspect.327 : Str = CallByName Inspect.63 Inspect.332 Inspect.333;
        dec Inspect.333;
        let Inspect.323 : Str = CallByName Inspect.235 Inspect.327 Inspect.233;
        dec Inspect.233;
        let Inspect.324 : {} = Struct {};
        let Inspect.322 : {Str, Int1} = CallByName Inspect.237 Inspect.323;
        dec Inspect.323;
        ret Inspect.322;
    in
    if Inspect.231 then
        let Inspect.336 : Str = ", ";
        let Inspect.334 : Str = CallByName Inspect.63 Inspect.230 Inspect.336;
        dec Inspect.336;
        jump Inspect.335 Inspect.334;
    else
        jump Inspect.335 Inspect.230;

procedure Inspect.235 (Inspect.236, Inspect.233):
    let Inspect.330 : Str = CallByName Inspect.31 Inspect.233 Inspect.236;
    ret Inspect.330;

procedure Inspect.237 (Inspect.238):
    let Inspect.326 : Int1 = CallByName Bool.2;
    inc Inspect.238;
    let Inspect.325 : {Str, Int1} = Struct {Inspect.238, Inspect.326};
    ret Inspect.325;

procedure Inspect.245 (Inspect.246, Inspect.244):
    let Inspect.346 : Str = "\"";
    let Inspect.345 : Str = CallByName Inspect.63 Inspect.246 Inspect.346;
    dec Inspect.346;
    let Inspect.343 : Str = CallByName Inspect.63 Inspect.345 Inspect.244;
    let Inspect.344 : Str = "\"";
    let Inspect.342 : Str = CallByName Inspect.63 Inspect.343 Inspect.344;
    dec Inspect.344;
    ret Inspect.342;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.31 (Inspect.298, Inspect.149):
    let Inspect.309 : Str = CallByName Inspect.225 Inspect.149 Inspect.298;
    ret Inspect.309;

procedure Inspect.31 (Inspect.298, Inspect.149):
    let Inspect.331 : Str = CallByName Inspect.245 Inspect.149 Inspect.298;
    ret Inspect.331;

procedure Inspect.33 (Inspect.152):
    let Inspect.300 : Str = CallByName Inspect.5 Inspect.152;
    let Inspect.299 : Str = CallByName Inspect.64 Inspect.300;
    ret Inspect.299;

procedure Inspect.39 (Inspect.296):
    let Inspect.306 : Str = "";
    ret Inspect.306;

procedure Inspect.45 (Inspect.224):
    let Inspect.310 : List {Str, Str} = CallByName Inspect.30 Inspect.224;
    ret Inspect.310;

procedure Inspect.47 (Inspect.243):
    let Inspect.369 : Str = "\u{feff}";
    let Inspect.370 : Str = "\\u(feff)";
    let Inspect.366 : Str = CallByName Str.45 Inspect.243 Inspect.369 Inspect.370;
    dec Inspect.370;
    dec Inspect.369;
    let Inspect.367 : Str = "\u{200b}";
    let Inspect.368 : Str = "\\u(200b)";
    let Inspect.363 : Str = CallByName Str.45 Inspect.366 Inspect.367 Inspect.368;
    dec Inspect.367;
    dec Inspect.368;
    let Inspect.364 : Str = "\u{200c}";
    let Inspect.365 : Str = "\\u(200c)";
    let Inspect.360 : Str = CallByName Str.45 Inspect.363 Inspect.364 Inspect.365;
    dec Inspect.365;
    dec Inspect.364;
    let Inspect.361 : Str = "\u{200d}";
    let Inspect.362 : Str = "\\u(200d)";
    let Inspect.244 : Str = CallByName Str.45 Inspect.360 Inspect.361 Inspect.362;
    dec Inspect.362;
    dec Inspect.361;
    let Inspect.358 : Str = CallByName Inspect.30 Inspect.244;
    ret Inspect.358;

procedure Inspect.5 (Inspect.150):
    let Inspect.307 : {Str, Str} = CallByName #Derived.0 Inspect.150;
    let Inspect.304 : {} = Struct {};
    let Inspect.303 : Str = CallByName Inspect.39 Inspect.304;
    let Inspect.302 : Str = CallByName #Derived.2 Inspect.303 Inspect.307;
    ret Inspect.302;

procedure Inspect.63 (Inspect.295, Inspect.291):
    let Inspect.316 : Str = CallByName Str.3 Inspect.295 Inspect.291;
    ret Inspect.316;

procedure Inspect.64 (Inspect.297):
    ret Inspect.297;

procedure List.101 (#Derived_gen.25, #Derived_gen.26, #Derived_gen.27, #Derived_gen.28, #Derived_gen.29):
    joinpoint List.678 List.175 List.176 List.177 List.178 List.179:
        let List.680 : Int1 = CallByName Num.22 List.178 List.179;
        if List.680 then
            let List.684 : {Str, Str} = CallByName List.66 List.175 List.178;
            inc List.684;
            let List.180 : {Str, Int1} = CallByName Inspect.229 List.176 List.684;
            let List.683 : U64 = 1i64;
            let List.682 : U64 = CallByName Num.51 List.178 List.683;
            jump List.678 List.175 List.180 List.177 List.682 List.179;
        else
            dec List.175;
            ret List.176;
    in
    inc #Derived_gen.25;
    jump List.678 #Derived_gen.25 #Derived_gen.26 #Derived_gen.27 #Derived_gen.28 #Derived_gen.29;

procedure List.18 (List.172, List.173, List.174):
    let List.676 : U64 = 0i64;
    let List.677 : U64 = CallByName List.6 List.172;
    let List.675 : {Str, Int1} = CallByName List.101 List.172 List.173 List.174 List.676 List.677;
    ret List.675;

procedure List.6 (#Attr.2):
    let List.686 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.686;

procedure List.66 (#Attr.2, #Attr.3):
    let List.685 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.685;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.288 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.288;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.295 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.295;

procedure Num.23 (#Attr.2, #Attr.3):
    let Num.292 : Int1 = lowlevel NumLte #Attr.2 #Attr.3;
    ret Num.292;

procedure Num.25 (#Attr.2, #Attr.3):
    let Num.289 : Int1 = lowlevel NumGte #Attr.2 #Attr.3;
    ret Num.289;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.294 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.294;

procedure Num.53 (#Attr.2, #Attr.3):
    let Num.291 : U64 = lowlevel NumAddSaturated #Attr.2 #Attr.3;
    ret Num.291;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.293 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.293;

procedure Str.20 (#Attr.2):
    let Str.316 : Str = lowlevel StrWithCapacity #Attr.2;
    ret Str.316;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.248 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.248;

procedure Str.35 (#Attr.2, #Attr.3):
    let Str.306 : U8 = lowlevel StrGetUnsafe #Attr.2 #Attr.3;
    ret Str.306;

procedure Str.36 (#Attr.2):
    let Str.268 : U64 = lowlevel StrCountUtf8Bytes #Attr.2;
    ret Str.268;

procedure Str.37 (#Attr.2, #Attr.3, #Attr.4):
    let Str.266 : Str = lowlevel StrSubstringUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret Str.266;

procedure Str.38 (Str.113, Str.114):
    let Str.262 : [C , C U64] = CallByName Str.58 Str.113 Str.114;
    let Str.275 : U8 = 1i64;
    let Str.276 : U8 = GetTagId Str.262;
    let Str.277 : Int1 = lowlevel Eq Str.275 Str.276;
    if Str.277 then
        let Str.115 : U64 = UnionAtIndex (Id 1) (Index 0) Str.262;
        let Str.271 : U64 = CallByName Str.36 Str.113;
        let Str.272 : U64 = CallByName Str.36 Str.114;
        let Str.270 : U64 = CallByName Num.20 Str.271 Str.272;
        let Str.116 : U64 = CallByName Num.20 Str.270 Str.115;
        let Str.269 : U64 = 0i64;
        inc Str.113;
        let Str.117 : Str = CallByName Str.37 Str.113 Str.269 Str.115;
        let Str.267 : U64 = CallByName Str.36 Str.114;
        let Str.265 : U64 = CallByName Num.51 Str.115 Str.267;
        let Str.118 : Str = CallByName Str.37 Str.113 Str.265 Str.116;
        let Str.264 : {Str, Str} = Struct {Str.118, Str.117};
        let Str.263 : [C {}, C {Str, Str}] = TagId(1) Str.264;
        ret Str.263;
    else
        dec Str.113;
        let Str.274 : {} = Struct {};
        let Str.273 : [C {}, C {Str, Str}] = TagId(0) Str.274;
        ret Str.273;

procedure Str.45 (Str.92, Str.93, Str.94):
    inc Str.92;
    let Str.388 : [C {}, C {Str, Str}] = CallByName Str.38 Str.92 Str.93;
    let Str.396 : U8 = 1i64;
    let Str.397 : U8 = GetTagId Str.388;
    let Str.398 : Int1 = lowlevel Eq Str.396 Str.397;
    if Str.398 then
        let Str.395 : {Str, Str} = UnionAtIndex (Id 1) (Index 0) Str.388;
        let Str.96 : Str = StructAtIndex 0 Str.395;
        let Str.95 : Str = StructAtIndex 1 Str.395;
        let Str.393 : U64 = CallByName Str.36 Str.92;
        dec Str.92;
        let Str.392 : Str = CallByName Str.20 Str.393;
        let Str.391 : Str = CallByName Str.3 Str.392 Str.95;
        dec Str.95;
        let Str.390 : Str = CallByName Str.3 Str.391 Str.94;
        let Str.389 : Str = CallByName Str.57 Str.390 Str.96 Str.93 Str.94;
        ret Str.389;
    else
        dec Str.388;
        ret Str.92;

procedure Str.57 (#Derived_gen.16, #Derived_gen.17, #Derived_gen.18, #Derived_gen.19):
    joinpoint Str.252 Str.97 Str.98 Str.99 Str.100:
        inc Str.98;
        let Str.253 : [C {}, C {Str, Str}] = CallByName Str.38 Str.98 Str.99;
        let Str.259 : U8 = 1i64;
        let Str.260 : U8 = GetTagId Str.253;
        let Str.261 : Int1 = lowlevel Eq Str.259 Str.260;
        if Str.261 then
            dec Str.98;
            let Str.258 : {Str, Str} = UnionAtIndex (Id 1) (Index 0) Str.253;
            let Str.102 : Str = StructAtIndex 0 Str.258;
            let Str.101 : Str = StructAtIndex 1 Str.258;
            let Str.256 : Str = CallByName Str.3 Str.97 Str.101;
            dec Str.101;
            let Str.255 : Str = CallByName Str.3 Str.256 Str.100;
            jump Str.252 Str.255 Str.102 Str.99 Str.100;
        else
            dec Str.100;
            dec Str.99;
            dec Str.253;
            let Str.257 : Str = CallByName Str.3 Str.97 Str.98;
            dec Str.98;
            ret Str.257;
    in
    inc #Derived_gen.18;
    inc #Derived_gen.19;
    jump Str.252 #Derived_gen.16 #Derived_gen.17 #Derived_gen.18 #Derived_gen.19;

procedure Str.58 (Str.122, Str.123):
    let Str.124 : U64 = CallByName Str.36 Str.122;
    let Str.125 : U64 = CallByName Str.36 Str.123;
    let Str.126 : U64 = CallByName Num.77 Str.124 Str.125;
    let Str.279 : U64 = 0i64;
    let Str.278 : [C , C U64] = CallByName Str.59 Str.122 Str.123 Str.279 Str.126;
    ret Str.278;

procedure Str.59 (#Derived_gen.20, #Derived_gen.21, #Derived_gen.22, #Derived_gen.23):
    joinpoint Str.280 Str.127 Str.128 Str.129 Str.130:
        let Str.282 : Int1 = CallByName Num.23 Str.129 Str.130;
        if Str.282 then
            let Str.286 : Int1 = CallByName Str.63 Str.127 Str.129 Str.128;
            if Str.286 then
                dec Str.127;
                dec Str.128;
                let Str.287 : [C , C U64] = TagId(1) Str.129;
                ret Str.287;
            else
                let Str.285 : U64 = 1i64;
                let Str.284 : U64 = CallByName Num.51 Str.129 Str.285;
                jump Str.280 Str.127 Str.128 Str.284 Str.130;
        else
            dec Str.127;
            dec Str.128;
            let Str.281 : [C , C U64] = TagId(0) ;
            ret Str.281;
    in
    inc #Derived_gen.20;
    inc #Derived_gen.21;
    jump Str.280 #Derived_gen.20 #Derived_gen.21 #Derived_gen.22 #Derived_gen.23;

procedure Str.62 (Str.153, Str.154):
    let Str.311 : Int1 = CallByName Num.22 Str.153 Str.154;
    if Str.311 then
        ret Str.153;
    else
        ret Str.154;

procedure Str.63 (Str.155, Str.156, Str.157):
    let Str.158 : U64 = CallByName Str.36 Str.155;
    let Str.159 : U64 = CallByName Str.36 Str.157;
    let Str.309 : U64 = CallByName Num.53 Str.156 Str.159;
    let Str.160 : U64 = CallByName Str.62 Str.309 Str.158;
    let Str.308 : U64 = 0i64;
    inc Str.157;
    inc Str.155;
    let Str.289 : {U64, Str, U64, Str, U64, U64} = Struct {Str.160, Str.155, Str.156, Str.157, Str.308, Str.159};
    let Str.288 : Int1 = CallByName Str.64 Str.289;
    ret Str.288;

procedure Str.64 (Str.161):
    let Str.167 : U64 = StructAtIndex 0 Str.161;
    let Str.162 : Str = StructAtIndex 1 Str.161;
    let Str.163 : U64 = StructAtIndex 2 Str.161;
    let Str.164 : Str = StructAtIndex 3 Str.161;
    let Str.165 : U64 = StructAtIndex 4 Str.161;
    let Str.166 : U64 = StructAtIndex 5 Str.161;
    let Str.168 : Int1 = CallByName Num.25 Str.163 Str.167;
    if Str.168 then
        dec Str.162;
        dec Str.164;
        let Str.169 : Int1 = CallByName Bool.9 Str.165 Str.166;
        ret Str.169;
    else
        let Str.304 : U8 = CallByName Str.35 Str.162 Str.163;
        let Str.305 : U8 = CallByName Str.35 Str.164 Str.165;
        let Str.170 : Int1 = CallByName Bool.9 Str.304 Str.305;
        let Str.294 : U64 = StructAtIndex 0 Str.161;
        let Str.295 : Str = StructAtIndex 1 Str.161;
        let Str.297 : Str = StructAtIndex 3 Str.161;
        let Str.299 : U64 = StructAtIndex 5 Str.161;
        let Str.303 : U64 = 1i64;
        let Str.301 : U64 = CallByName Num.51 Str.165 Str.303;
        let Str.302 : U64 = 1i64;
        let Str.300 : U64 = CallByName Num.51 Str.163 Str.302;
        let Str.293 : {U64, Str, U64, Str, U64, U64} = Struct {Str.294, Str.295, Str.300, Str.297, Str.301, Str.299};
        let Str.171 : Int1 = CallByName Str.64 Str.293;
        if Str.170 then
            ret Str.171;
        else
            let Str.291 : Int1 = CallByName Bool.1;
            ret Str.291;

procedure Test.0 ():
    let Test.3 : Str = "foo";
    let Test.4 : Str = "bar";
    let Test.2 : {Str, Str} = Struct {Test.3, Test.4};
    let Test.1 : Str = CallByName Inspect.33 Test.2;
    ret Test.1;
