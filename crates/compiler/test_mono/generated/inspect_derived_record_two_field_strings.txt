procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : {Str, Str} = CallByName Inspect.30 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.1):
    let #Derived_gen.11 : Str = "a";
    let #Derived_gen.13 : Str = StructAtIndex 0 #Derived.1;
    inc #Derived_gen.13;
    let #Derived_gen.12 : Str = CallByName Inspect.44 #Derived_gen.13;
    let #Derived_gen.6 : {Str, Str} = Struct {#Derived_gen.11, #Derived_gen.12};
    let #Derived_gen.8 : Str = "b";
    let #Derived_gen.10 : Str = StructAtIndex 1 #Derived.1;
    dec #Derived_gen.13;
    let #Derived_gen.9 : Str = CallByName Inspect.44 #Derived_gen.10;
    let #Derived_gen.7 : {Str, Str} = Struct {#Derived_gen.8, #Derived_gen.9};
    let #Derived_gen.5 : List {Str, Str} = Array [#Derived_gen.6, #Derived_gen.7];
    let #Derived_gen.4 : List {Str, Str} = CallByName Inspect.42 #Derived_gen.5;
    let #Derived_gen.3 : Str = CallByName Inspect.31 #Derived_gen.4 #Derived.3;
    ret #Derived_gen.3;

procedure Bool.1 ():
    let Bool.24 : Int1 = false;
    ret Bool.24;

procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Inspect.230 (Inspect.231, Inspect.229):
    let Inspect.356 : Str = "{";
    let Inspect.332 : Str = CallByName Inspect.61 Inspect.231 Inspect.356;
    let Inspect.328 : {Str, Int1} = CallByName Inspect.232 Inspect.332 Inspect.229;
    let Inspect.329 : {} = Struct {};
    let Inspect.324 : Str = CallByName Inspect.244 Inspect.328;
    let Inspect.325 : Str = "}";
    let Inspect.323 : Str = CallByName Inspect.61 Inspect.324 Inspect.325;
    ret Inspect.323;

procedure Inspect.232 (Inspect.233, Inspect.229):
    let Inspect.355 : Int1 = CallByName Bool.1;
    let Inspect.336 : {Str, Int1} = Struct {Inspect.233, Inspect.355};
    let Inspect.337 : {} = Struct {};
    let Inspect.335 : {Str, Int1} = CallByName List.18 Inspect.229 Inspect.336 Inspect.337;
    ret Inspect.335;

procedure Inspect.234 (Inspect.338, Inspect.339):
    let Inspect.237 : Str = StructAtIndex 0 Inspect.339;
    let Inspect.238 : Str = StructAtIndex 1 Inspect.339;
    let Inspect.235 : Str = StructAtIndex 0 Inspect.338;
    let Inspect.236 : Int1 = StructAtIndex 1 Inspect.338;
    joinpoint Inspect.353 Inspect.239:
        let Inspect.350 : Str = CallByName Inspect.61 Inspect.239 Inspect.237;
        let Inspect.351 : Str = ": ";
        let Inspect.345 : Str = CallByName Inspect.61 Inspect.350 Inspect.351;
        let Inspect.341 : Str = CallByName Inspect.240 Inspect.345 Inspect.238;
        let Inspect.342 : {} = Struct {};
        let Inspect.340 : {Str, Int1} = CallByName Inspect.242 Inspect.341;
        ret Inspect.340;
    in
    if Inspect.236 then
        let Inspect.354 : Str = ", ";
        let Inspect.352 : Str = CallByName Inspect.61 Inspect.235 Inspect.354;
        jump Inspect.353 Inspect.352;
    else
        jump Inspect.353 Inspect.235;

procedure Inspect.240 (Inspect.241, Inspect.238):
    let Inspect.348 : Str = CallByName Inspect.31 Inspect.238 Inspect.241;
    ret Inspect.348;

procedure Inspect.242 (Inspect.243):
    let Inspect.344 : Int1 = CallByName Bool.2;
    let Inspect.343 : {Str, Int1} = Struct {Inspect.243, Inspect.344};
    ret Inspect.343;

procedure Inspect.244 (Inspect.330):
    let Inspect.331 : Str = StructAtIndex 0 Inspect.330;
    ret Inspect.331;

procedure Inspect.251 (Inspect.252, Inspect.250):
    let Inspect.365 : Str = "\"";
    let Inspect.364 : Str = CallByName Inspect.61 Inspect.252 Inspect.365;
    let Inspect.362 : Str = CallByName Inspect.61 Inspect.364 Inspect.250;
    let Inspect.363 : Str = "\"";
    let Inspect.361 : Str = CallByName Inspect.61 Inspect.362 Inspect.363;
    ret Inspect.361;

procedure Inspect.30 (Inspect.148):
    ret Inspect.148;

procedure Inspect.30 (Inspect.148):
    ret Inspect.148;

procedure Inspect.30 (Inspect.148):
    ret Inspect.148;

procedure Inspect.31 (Inspect.307, Inspect.150):
    let Inspect.318 : Str = CallByName Inspect.230 Inspect.150 Inspect.307;
    ret Inspect.318;

procedure Inspect.31 (Inspect.307, Inspect.150):
    let Inspect.349 : Str = CallByName Inspect.251 Inspect.150 Inspect.307;
    ret Inspect.349;

procedure Inspect.34 (Inspect.153):
    let Inspect.309 : Str = CallByName Inspect.5 Inspect.153;
    let Inspect.308 : Str = CallByName Inspect.62 Inspect.309;
    ret Inspect.308;

procedure Inspect.36 (Inspect.305):
    let Inspect.315 : Str = "";
    ret Inspect.315;

procedure Inspect.42 (Inspect.229):
    let Inspect.319 : List {Str, Str} = CallByName Inspect.30 Inspect.229;
    ret Inspect.319;

procedure Inspect.44 (Inspect.250):
    let Inspect.366 : Str = CallByName Inspect.30 Inspect.250;
    ret Inspect.366;

procedure Inspect.5 (Inspect.151):
    let Inspect.316 : {Str, Str} = CallByName #Derived.0 Inspect.151;
    let Inspect.313 : {} = Struct {};
    let Inspect.312 : Str = CallByName Inspect.36 Inspect.313;
    let Inspect.311 : Str = CallByName #Derived.2 Inspect.312 Inspect.316;
    ret Inspect.311;

procedure Inspect.61 (Inspect.304, Inspect.300):
    let Inspect.327 : Str = CallByName Str.3 Inspect.304 Inspect.300;
    dec Inspect.300;
    ret Inspect.327;

procedure Inspect.62 (Inspect.306):
    ret Inspect.306;

procedure List.18 (List.156, List.157, List.158):
    let List.570 : U64 = 0i64;
    let List.571 : U64 = CallByName List.6 List.156;
    let List.569 : {Str, Int1} = CallByName List.89 List.156 List.157 List.158 List.570 List.571;
    ret List.569;

procedure List.6 (#Attr.2):
    let List.580 : U64 = lowlevel ListLen #Attr.2;
    ret List.580;

procedure List.66 (#Attr.2, #Attr.3):
    let List.579 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.579;

procedure List.89 (#Derived_gen.16, #Derived_gen.17, #Derived_gen.18, #Derived_gen.19, #Derived_gen.20):
    joinpoint List.572 List.159 List.160 List.161 List.162 List.163:
        let List.574 : Int1 = CallByName Num.22 List.162 List.163;
        if List.574 then
            let List.578 : {Str, Str} = CallByName List.66 List.159 List.162;
            inc List.578;
            let List.164 : {Str, Int1} = CallByName Inspect.234 List.160 List.578;
            let List.577 : U64 = 1i64;
            let List.576 : U64 = CallByName Num.51 List.162 List.577;
            jump List.572 List.159 List.164 List.161 List.576 List.163;
        else
            dec List.159;
            ret List.160;
    in
    jump List.572 #Derived_gen.16 #Derived_gen.17 #Derived_gen.18 #Derived_gen.19 #Derived_gen.20;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.298 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.298;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.297 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.297;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.292 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.292;

procedure Test.0 ():
    let Test.3 : Str = "foo";
    let Test.4 : Str = "bar";
    let Test.2 : {Str, Str} = Struct {Test.3, Test.4};
    let Test.1 : Str = CallByName Inspect.34 Test.2;
    ret Test.1;
