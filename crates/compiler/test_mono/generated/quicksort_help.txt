procedure Num.19 (#Attr.2, #Attr.3):
    let Num.291 : I64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.291;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.292 : I64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.292;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.293 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.293;

procedure Test.1 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2):
    joinpoint Test.12 Test.2 Test.3 Test.4:
        let Test.14 : Int1 = CallByName Num.22 Test.3 Test.4;
        if Test.14 then
            dec Test.2;
            let Test.23 : List I64 = Array [];
            let Test.22 : I64 = 0i64;
            let Test.21 : {I64, List I64} = Struct {Test.22, Test.23};
            let Test.5 : I64 = StructAtIndex 0 Test.21;
            let Test.6 : List I64 = StructAtIndex 1 Test.21;
            let Test.20 : I64 = 1i64;
            let Test.19 : I64 = CallByName Num.20 Test.5 Test.20;
            let Test.16 : List I64 = CallByName Test.1 Test.6 Test.3 Test.19;
            let Test.18 : I64 = 1i64;
            let Test.17 : I64 = CallByName Num.19 Test.5 Test.18;
            jump Test.12 Test.16 Test.17 Test.4;
        else
            ret Test.2;
    in
    jump Test.12 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2;

procedure Test.0 ():
    let Test.9 : List I64 = Array [];
    let Test.10 : I64 = 0i64;
    let Test.11 : I64 = 0i64;
    let Test.8 : List I64 = CallByName Test.1 Test.9 Test.10 Test.11;
    ret Test.8;
