procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.292 : I64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.292;

procedure Num.21 (#Attr.2, #Attr.3):
    let Num.291 : I64 = lowlevel NumMul #Attr.2 #Attr.3;
    ret Num.291;

procedure Test.6 (Test.8, #Attr.12):
    let Test.20 : I64 = UnionAtIndex (Id 0) (Index 0) #Attr.12;
    let Test.19 : I64 = CallByName Num.19 Test.8 Test.20;
    ret Test.19;

procedure Test.7 (Test.9, #Attr.12):
    let Test.17 : I64 = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    let Test.16 : I64 = CallByName Num.21 Test.9 Test.17;
    ret Test.16;

procedure Test.0 ():
    let Test.4 : I64 = 1i64;
    let Test.5 : I64 = 2i64;
    let Test.11 : I64 = 42i64;
    joinpoint Test.15 Test.12:
        let Test.13 : U8 = GetTagId Test.12;
        switch Test.13:
            case 0:
                let Test.10 : I64 = CallByName Test.6 Test.11 Test.12;
                ret Test.10;
        
            default:
                let Test.10 : I64 = CallByName Test.7 Test.11 Test.12;
                ret Test.10;
        
    in
    let Test.18 : Int1 = CallByName Bool.2;
    if Test.18 then
        let Test.14 : [C I64, C I64] = TagId(0) Test.4;
        jump Test.15 Test.14;
    else
        let Test.14 : [C I64, C I64] = TagId(1) Test.5;
        jump Test.15 Test.14;
