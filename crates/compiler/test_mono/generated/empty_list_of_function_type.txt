procedure Bool.1 ():
    let Bool.23 : Int1 = false;
    ret Bool.23;

procedure List.2 (List.100, List.101):
    let List.541 : U64 = CallByName List.6 List.100;
    let List.537 : Int1 = CallByName Num.22 List.101 List.541;
    if List.537 then
        let List.539 : {} = CallByName List.66 List.100 List.101;
        dec List.100;
        let List.538 : [C {}, C {}] = TagId(1) List.539;
        ret List.538;
    else
        dec List.100;
        let List.536 : {} = Struct {};
        let List.535 : [C {}, C {}] = TagId(0) List.536;
        ret List.535;

procedure List.6 (#Attr.2):
    let List.542 : U64 = lowlevel ListLen #Attr.2;
    ret List.542;

procedure List.66 (#Attr.2, #Attr.3):
    let List.540 : {} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.540;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.291 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.291;

procedure Test.2 (Test.5):
    dec Test.5;
    let Test.17 : Str = "bar";
    ret Test.17;

procedure Test.0 ():
    let Test.1 : List {} = Array [];
    joinpoint Test.15 Test.3:
        let Test.13 : U64 = 0i64;
        let Test.6 : [C {}, C {}] = CallByName List.2 Test.3 Test.13;
        let Test.10 : U8 = 1i64;
        let Test.11 : U8 = GetTagId Test.6;
        let Test.12 : Int1 = lowlevel Eq Test.10 Test.11;
        if Test.12 then
            let Test.4 : {} = UnionAtIndex (Id 1) (Index 0) Test.6;
            let Test.8 : Str = "foo";
            let Test.7 : Str = CallByName Test.2 Test.8;
            ret Test.7;
        else
            let Test.9 : Str = "bad!";
            ret Test.9;
    in
    let Test.18 : Int1 = CallByName Bool.1;
    if Test.18 then
        jump Test.15 Test.1;
    else
        dec Test.1;
        let Test.16 : {} = Struct {};
        let Test.14 : List {} = Array [Test.16];
        jump Test.15 Test.14;
