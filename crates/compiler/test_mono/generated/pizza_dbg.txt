procedure Inspect.281 (Inspect.282, Inspect.280):
    let Inspect.321 : Str = CallByName Num.96 Inspect.280;
    let Inspect.320 : Str = CallByName Inspect.63 Inspect.282 Inspect.321;
    dec Inspect.321;
    ret Inspect.320;

procedure Inspect.30 (Inspect.147):
    ret Inspect.147;

procedure Inspect.33 (Inspect.152):
    let Inspect.325 : Str = CallByName Inspect.5 Inspect.152;
    let Inspect.324 : Str = CallByName Inspect.64 Inspect.325;
    ret Inspect.324;

procedure Inspect.39 (Inspect.304):
    let Inspect.314 : Str = "";
    ret Inspect.314;

procedure Inspect.5 (Inspect.150):
    let Inspect.315 : I64 = CallByName Inspect.57 Inspect.150;
    let Inspect.312 : {} = Struct {};
    let Inspect.311 : Str = CallByName Inspect.39 Inspect.312;
    let Inspect.310 : Str = CallByName Inspect.281 Inspect.311 Inspect.315;
    ret Inspect.310;

procedure Inspect.57 (Inspect.280):
    let Inspect.316 : I64 = CallByName Inspect.30 Inspect.280;
    ret Inspect.316;

procedure Inspect.63 (Inspect.303, Inspect.299):
    let Inspect.323 : Str = CallByName Str.3 Inspect.303 Inspect.299;
    ret Inspect.323;

procedure Inspect.64 (Inspect.305):
    ret Inspect.305;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.283 : I64 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.283;

procedure Num.96 (#Attr.2):
    let Num.284 : Str = lowlevel NumToStr #Attr.2;
    ret Num.284;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.246 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.246;

procedure Test.0 ():
    let Test.4 : I64 = 1i64;
    let Test.5 : Str = CallByName Inspect.33 Test.4;
    dbg Test.5;
    dec Test.5;
    let Test.9 : I64 = 2i64;
    let Test.3 : I64 = CallByName Num.19 Test.4 Test.9;
    let Test.6 : Str = CallByName Inspect.33 Test.3;
    dbg Test.6;
    dec Test.6;
    ret Test.3;
