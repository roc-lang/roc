procedure #Derived.0 (#Derived.1):
    let #Derived_gen.10 : [C {}, C {}] = TagId(0) #Derived.1;
    let #Derived_gen.9 : [C {}, C {}] = CallByName Encode.23 #Derived_gen.10;
    ret #Derived_gen.9;

procedure #Derived.2 (#Derived.3, #Derived.4, #Attr.12):
    let #Derived.1 : {} = UnionAtIndex (Id 0) (Index 0) #Attr.12;
    joinpoint #Derived_gen.14 #Derived_gen.13:
        let #Derived_gen.12 : List U8 = CallByName Encode.24 #Derived.3 #Derived_gen.13 #Derived.4;
        ret #Derived_gen.12;
    in
    let #Derived_gen.16 : Str = "A";
    let #Derived_gen.17 : List [] = Array [];
    let #Derived_gen.15 : {Str, List []} = CallByName TotallyNotJson.32 #Derived_gen.16 #Derived_gen.17;
    jump #Derived_gen.14 #Derived_gen.15;

procedure #Derived.5 (#Derived.6):
    let #Derived_gen.1 : [C {}, C {}] = TagId(1) #Derived.6;
    let #Derived_gen.0 : [C {}, C {}] = CallByName Encode.23 #Derived_gen.1;
    ret #Derived_gen.0;

procedure #Derived.7 (#Derived.8, #Derived.9, #Attr.12):
    let #Derived.6 : {} = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    joinpoint #Derived_gen.5 #Derived_gen.4:
        let #Derived_gen.3 : List U8 = CallByName Encode.24 #Derived.8 #Derived_gen.4 #Derived.9;
        ret #Derived_gen.3;
    in
    let #Derived_gen.7 : Str = "B";
    let #Derived_gen.8 : List [] = Array [];
    let #Derived_gen.6 : {Str, List []} = CallByName TotallyNotJson.32 #Derived_gen.7 #Derived_gen.8;
    jump #Derived_gen.5 #Derived_gen.6;

procedure Bool.2 ():
    let Bool.23 : Int1 = true;
    ret Bool.23;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.23 (Encode.98):
    ret Encode.98;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    dec Encode.99;
    let Encode.125 : Str = "a Lambda Set is empty. Most likely there is a type error in your program.";
    Crash Encode.125

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.111 : List U8 = CallByName Test.5 Encode.99 Encode.101 Encode.107;
    ret Encode.111;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.113 : List U8 = CallByName TotallyNotJson.264 Encode.99 Encode.101 Encode.107;
    ret Encode.113;

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.117 : U8 = GetTagId Encode.107;
    switch Encode.117:
        case 0:
            let Encode.116 : List U8 = CallByName #Derived.2 Encode.99 Encode.101 Encode.107;
            ret Encode.116;
    
        default:
            let Encode.116 : List U8 = CallByName #Derived.7 Encode.99 Encode.101 Encode.107;
            ret Encode.116;
    

procedure Encode.24 (Encode.99, Encode.107, Encode.101):
    let Encode.121 : List U8 = CallByName TotallyNotJson.264 Encode.99 Encode.101 Encode.107;
    ret Encode.121;

procedure Encode.26 (Encode.105, Encode.106):
    let Encode.109 : List U8 = Array [];
    let Encode.110 : {{}, {}} = CallByName Test.2 Encode.105;
    let Encode.108 : List U8 = CallByName Encode.24 Encode.109 Encode.110 Encode.106;
    ret Encode.108;

procedure List.18 (List.145, List.146, List.147):
    let List.562 : U64 = 0i64;
    let List.563 : U64 = CallByName List.6 List.145;
    let List.561 : {List U8, U64} = CallByName List.86 List.145 List.146 List.147 List.562 List.563;
    ret List.561;

procedure List.18 (List.145, List.146, List.147):
    let List.602 : U64 = 0i64;
    let List.603 : U64 = CallByName List.6 List.145;
    let List.601 : {List U8, U64} = CallByName List.86 List.145 List.146 List.147 List.602 List.603;
    ret List.601;

procedure List.4 (List.116, List.117):
    let List.600 : U64 = 1i64;
    let List.599 : List U8 = CallByName List.70 List.116 List.600;
    let List.598 : List U8 = CallByName List.71 List.599 List.117;
    ret List.598;

procedure List.6 (#Attr.2):
    let List.573 : U64 = lowlevel ListLen #Attr.2;
    ret List.573;

procedure List.6 (#Attr.2):
    let List.613 : U64 = lowlevel ListLen #Attr.2;
    ret List.613;

procedure List.66 (#Attr.2, #Attr.3):
    let List.571 : [C {}, C {}] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.571;

procedure List.66 (#Attr.2, #Attr.3):
    let List.611 : [] = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.611;

procedure List.70 (#Attr.2, #Attr.3):
    let List.579 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.579;

procedure List.71 (#Attr.2, #Attr.3):
    let List.577 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.577;

procedure List.8 (#Attr.2, #Attr.3):
    let List.614 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.614;

procedure List.86 (#Derived_gen.18, #Derived_gen.19, #Derived_gen.20, #Derived_gen.21, #Derived_gen.22):
    joinpoint List.564 List.148 List.149 List.150 List.151 List.152:
        let List.566 : Int1 = CallByName Num.22 List.151 List.152;
        if List.566 then
            let List.570 : [C {}, C {}] = CallByName List.66 List.148 List.151;
            let List.153 : {List U8, U64} = CallByName TotallyNotJson.267 List.149 List.570 List.150;
            let List.569 : U64 = 1i64;
            let List.568 : U64 = CallByName Num.51 List.151 List.569;
            jump List.564 List.148 List.153 List.150 List.568 List.152;
        else
            dec List.148;
            ret List.149;
    in
    jump List.564 #Derived_gen.18 #Derived_gen.19 #Derived_gen.20 #Derived_gen.21 #Derived_gen.22;

procedure List.86 (#Derived_gen.32, #Derived_gen.33, #Derived_gen.34, #Derived_gen.35, #Derived_gen.36):
    joinpoint List.604 List.148 List.149 List.150 List.151 List.152:
        let List.606 : Int1 = CallByName Num.22 List.151 List.152;
        if List.606 then
            let List.610 : [] = CallByName List.66 List.148 List.151;
            let List.153 : {List U8, U64} = CallByName TotallyNotJson.267 List.149 List.610 List.150;
            let List.609 : U64 = 1i64;
            let List.608 : U64 = CallByName Num.51 List.151 List.609;
            jump List.604 List.148 List.153 List.150 List.608 List.152;
        else
            dec List.148;
            ret List.149;
    in
    jump List.604 #Derived_gen.32 #Derived_gen.33 #Derived_gen.34 #Derived_gen.35 #Derived_gen.36;

procedure Num.127 (#Attr.2):
    let Num.311 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.311;

procedure Num.20 (#Attr.2, #Attr.3):
    let Num.312 : U64 = lowlevel NumSub #Attr.2 #Attr.3;
    ret Num.312;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.315 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.315;

procedure Num.24 (#Attr.2, #Attr.3):
    let Num.313 : Int1 = lowlevel NumGt #Attr.2 #Attr.3;
    ret Num.313;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.314 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.314;

procedure Str.12 (#Attr.2):
    let Str.290 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.290;

procedure Test.2 (Test.11):
    let Test.18 : {{}, {}} = CallByName Encode.23 Test.11;
    ret Test.18;

procedure Test.3 ():
    let Test.16 : {} = Struct {};
    let Test.17 : {} = Struct {};
    let Test.15 : {{}, {}} = Struct {Test.16, Test.17};
    ret Test.15;

procedure Test.5 (Test.6, Test.7, Test.4):
    joinpoint Test.23 Test.8:
        let Test.21 : List U8 = CallByName Encode.24 Test.6 Test.8 Test.7;
        ret Test.21;
    in
    let Test.28 : Int1 = CallByName Bool.2;
    if Test.28 then
        let Test.29 : Str = "A";
        let Test.32 : {} = StructAtIndex 0 Test.4;
        let Test.31 : [C {}, C {}] = CallByName #Derived.0 Test.32;
        let Test.30 : List [C {}, C {}] = Array [Test.31];
        let Test.22 : {Str, List [C {}, C {}]} = CallByName TotallyNotJson.32 Test.29 Test.30;
        jump Test.23 Test.22;
    else
        let Test.24 : Str = "B";
        let Test.27 : {} = StructAtIndex 1 Test.4;
        let Test.26 : [C {}, C {}] = CallByName #Derived.5 Test.27;
        let Test.25 : List [C {}, C {}] = Array [Test.26];
        let Test.22 : {Str, List [C {}, C {}]} = CallByName TotallyNotJson.32 Test.24 Test.25;
        jump Test.23 Test.22;

procedure TotallyNotJson.264 (TotallyNotJson.265, TotallyNotJson.1175, #Attr.12):
    let TotallyNotJson.263 : List [C {}, C {}] = StructAtIndex 1 #Attr.12;
    let TotallyNotJson.262 : Str = StructAtIndex 0 #Attr.12;
    let TotallyNotJson.1213 : I64 = 123i64;
    let TotallyNotJson.1212 : U8 = CallByName Num.127 TotallyNotJson.1213;
    let TotallyNotJson.1209 : List U8 = CallByName List.4 TotallyNotJson.265 TotallyNotJson.1212;
    let TotallyNotJson.1211 : I64 = 34i64;
    let TotallyNotJson.1210 : U8 = CallByName Num.127 TotallyNotJson.1211;
    let TotallyNotJson.1207 : List U8 = CallByName List.4 TotallyNotJson.1209 TotallyNotJson.1210;
    let TotallyNotJson.1208 : List U8 = CallByName Str.12 TotallyNotJson.262;
    let TotallyNotJson.1204 : List U8 = CallByName List.8 TotallyNotJson.1207 TotallyNotJson.1208;
    let TotallyNotJson.1206 : I64 = 34i64;
    let TotallyNotJson.1205 : U8 = CallByName Num.127 TotallyNotJson.1206;
    let TotallyNotJson.1201 : List U8 = CallByName List.4 TotallyNotJson.1204 TotallyNotJson.1205;
    let TotallyNotJson.1203 : I64 = 58i64;
    let TotallyNotJson.1202 : U8 = CallByName Num.127 TotallyNotJson.1203;
    let TotallyNotJson.1198 : List U8 = CallByName List.4 TotallyNotJson.1201 TotallyNotJson.1202;
    let TotallyNotJson.1200 : I64 = 91i64;
    let TotallyNotJson.1199 : U8 = CallByName Num.127 TotallyNotJson.1200;
    let TotallyNotJson.268 : List U8 = CallByName List.4 TotallyNotJson.1198 TotallyNotJson.1199;
    let TotallyNotJson.1197 : U64 = CallByName List.6 TotallyNotJson.263;
    let TotallyNotJson.1185 : {List U8, U64} = Struct {TotallyNotJson.268, TotallyNotJson.1197};
    let TotallyNotJson.1184 : {List U8, U64} = CallByName List.18 TotallyNotJson.263 TotallyNotJson.1185 TotallyNotJson.1175;
    let TotallyNotJson.270 : List U8 = StructAtIndex 0 TotallyNotJson.1184;
    let TotallyNotJson.1183 : I64 = 93i64;
    let TotallyNotJson.1182 : U8 = CallByName Num.127 TotallyNotJson.1183;
    let TotallyNotJson.1179 : List U8 = CallByName List.4 TotallyNotJson.270 TotallyNotJson.1182;
    let TotallyNotJson.1181 : I64 = 125i64;
    let TotallyNotJson.1180 : U8 = CallByName Num.127 TotallyNotJson.1181;
    let TotallyNotJson.1178 : List U8 = CallByName List.4 TotallyNotJson.1179 TotallyNotJson.1180;
    ret TotallyNotJson.1178;

procedure TotallyNotJson.264 (TotallyNotJson.265, TotallyNotJson.1175, #Attr.12):
    let TotallyNotJson.263 : List [] = StructAtIndex 1 #Attr.12;
    let TotallyNotJson.262 : Str = StructAtIndex 0 #Attr.12;
    let TotallyNotJson.1256 : I64 = 123i64;
    let TotallyNotJson.1255 : U8 = CallByName Num.127 TotallyNotJson.1256;
    let TotallyNotJson.1252 : List U8 = CallByName List.4 TotallyNotJson.265 TotallyNotJson.1255;
    let TotallyNotJson.1254 : I64 = 34i64;
    let TotallyNotJson.1253 : U8 = CallByName Num.127 TotallyNotJson.1254;
    let TotallyNotJson.1250 : List U8 = CallByName List.4 TotallyNotJson.1252 TotallyNotJson.1253;
    let TotallyNotJson.1251 : List U8 = CallByName Str.12 TotallyNotJson.262;
    let TotallyNotJson.1247 : List U8 = CallByName List.8 TotallyNotJson.1250 TotallyNotJson.1251;
    let TotallyNotJson.1249 : I64 = 34i64;
    let TotallyNotJson.1248 : U8 = CallByName Num.127 TotallyNotJson.1249;
    let TotallyNotJson.1244 : List U8 = CallByName List.4 TotallyNotJson.1247 TotallyNotJson.1248;
    let TotallyNotJson.1246 : I64 = 58i64;
    let TotallyNotJson.1245 : U8 = CallByName Num.127 TotallyNotJson.1246;
    let TotallyNotJson.1241 : List U8 = CallByName List.4 TotallyNotJson.1244 TotallyNotJson.1245;
    let TotallyNotJson.1243 : I64 = 91i64;
    let TotallyNotJson.1242 : U8 = CallByName Num.127 TotallyNotJson.1243;
    let TotallyNotJson.268 : List U8 = CallByName List.4 TotallyNotJson.1241 TotallyNotJson.1242;
    let TotallyNotJson.1240 : U64 = CallByName List.6 TotallyNotJson.263;
    let TotallyNotJson.1228 : {List U8, U64} = Struct {TotallyNotJson.268, TotallyNotJson.1240};
    let TotallyNotJson.1227 : {List U8, U64} = CallByName List.18 TotallyNotJson.263 TotallyNotJson.1228 TotallyNotJson.1175;
    let TotallyNotJson.270 : List U8 = StructAtIndex 0 TotallyNotJson.1227;
    let TotallyNotJson.1226 : I64 = 93i64;
    let TotallyNotJson.1225 : U8 = CallByName Num.127 TotallyNotJson.1226;
    let TotallyNotJson.1222 : List U8 = CallByName List.4 TotallyNotJson.270 TotallyNotJson.1225;
    let TotallyNotJson.1224 : I64 = 125i64;
    let TotallyNotJson.1223 : U8 = CallByName Num.127 TotallyNotJson.1224;
    let TotallyNotJson.1221 : List U8 = CallByName List.4 TotallyNotJson.1222 TotallyNotJson.1223;
    ret TotallyNotJson.1221;

procedure TotallyNotJson.267 (TotallyNotJson.1177, TotallyNotJson.273, TotallyNotJson.266):
    let TotallyNotJson.271 : List U8 = StructAtIndex 0 TotallyNotJson.1177;
    let TotallyNotJson.272 : U64 = StructAtIndex 1 TotallyNotJson.1177;
    let TotallyNotJson.274 : List U8 = CallByName Encode.24 TotallyNotJson.271 TotallyNotJson.273 TotallyNotJson.266;
    joinpoint TotallyNotJson.1191 TotallyNotJson.275:
        let TotallyNotJson.1189 : U64 = 1i64;
        let TotallyNotJson.1188 : U64 = CallByName Num.20 TotallyNotJson.272 TotallyNotJson.1189;
        let TotallyNotJson.1187 : {List U8, U64} = Struct {TotallyNotJson.275, TotallyNotJson.1188};
        ret TotallyNotJson.1187;
    in
    let TotallyNotJson.1195 : U64 = 1i64;
    let TotallyNotJson.1192 : Int1 = CallByName Num.24 TotallyNotJson.272 TotallyNotJson.1195;
    if TotallyNotJson.1192 then
        let TotallyNotJson.1194 : I64 = 44i64;
        let TotallyNotJson.1193 : U8 = CallByName Num.127 TotallyNotJson.1194;
        let TotallyNotJson.1190 : List U8 = CallByName List.4 TotallyNotJson.274 TotallyNotJson.1193;
        jump TotallyNotJson.1191 TotallyNotJson.1190;
    else
        jump TotallyNotJson.1191 TotallyNotJson.274;

procedure TotallyNotJson.267 (TotallyNotJson.1177, TotallyNotJson.273, TotallyNotJson.266):
    let TotallyNotJson.271 : List U8 = StructAtIndex 0 TotallyNotJson.1177;
    let TotallyNotJson.272 : U64 = StructAtIndex 1 TotallyNotJson.1177;
    let TotallyNotJson.274 : List U8 = CallByName Encode.24 TotallyNotJson.271 TotallyNotJson.273 TotallyNotJson.266;
    joinpoint TotallyNotJson.1234 TotallyNotJson.275:
        let TotallyNotJson.1232 : U64 = 1i64;
        let TotallyNotJson.1231 : U64 = CallByName Num.20 TotallyNotJson.272 TotallyNotJson.1232;
        let TotallyNotJson.1230 : {List U8, U64} = Struct {TotallyNotJson.275, TotallyNotJson.1231};
        ret TotallyNotJson.1230;
    in
    let TotallyNotJson.1238 : U64 = 1i64;
    let TotallyNotJson.1235 : Int1 = CallByName Num.24 TotallyNotJson.272 TotallyNotJson.1238;
    if TotallyNotJson.1235 then
        let TotallyNotJson.1237 : I64 = 44i64;
        let TotallyNotJson.1236 : U8 = CallByName Num.127 TotallyNotJson.1237;
        let TotallyNotJson.1233 : List U8 = CallByName List.4 TotallyNotJson.274 TotallyNotJson.1236;
        jump TotallyNotJson.1234 TotallyNotJson.1233;
    else
        jump TotallyNotJson.1234 TotallyNotJson.274;

procedure TotallyNotJson.32 (TotallyNotJson.262, TotallyNotJson.263):
    let TotallyNotJson.1215 : {Str, List [C {}, C {}]} = Struct {TotallyNotJson.262, TotallyNotJson.263};
    let TotallyNotJson.1214 : {Str, List [C {}, C {}]} = CallByName Encode.23 TotallyNotJson.1215;
    ret TotallyNotJson.1214;

procedure TotallyNotJson.32 (TotallyNotJson.262, TotallyNotJson.263):
    let TotallyNotJson.1258 : {Str, List []} = Struct {TotallyNotJson.262, TotallyNotJson.263};
    let TotallyNotJson.1257 : {Str, List []} = CallByName Encode.23 TotallyNotJson.1258;
    ret TotallyNotJson.1257;

procedure TotallyNotJson.8 ():
    let TotallyNotJson.1172 : [C , C [], C , C , C , C ] = TagId(2) ;
    ret TotallyNotJson.1172;

procedure Test.0 ():
    let Test.13 : {{}, {}} = CallByName Test.3;
    let Test.14 : [C , C [], C , C , C , C ] = CallByName TotallyNotJson.8;
    let Test.12 : List U8 = CallByName Encode.26 Test.13 Test.14;
    ret Test.12;
