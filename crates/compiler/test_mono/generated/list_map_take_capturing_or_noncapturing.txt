procedure List.102 (Bool.21, Bool.22, Bool.23, Bool.24, Bool.25):
    joinpoint List.689 List.176 List.177 List.178 List.179 List.180:
        let List.691 : Int1 = CallByName Num.22 List.179 List.180;
        if List.691 then
            let List.695 : U8 = CallByName List.66 List.176 List.179;
            let List.181 : List U8 = CallByName List.285 List.177 List.695 List.178;
            let List.694 : U64 = 1i64;
            let List.693 : U64 = CallByName Num.51 List.179 List.694;
            jump List.689 List.176 List.181 List.178 List.693 List.180;
        else
            dec List.176;
            ret List.177;
    in
    inc Bool.21;
    jump List.689 Bool.21 Bool.22 Bool.23 Bool.24 Bool.25;

procedure List.18 (List.173, List.174, List.175):
    let List.687 : U64 = 0i64;
    let List.688 : U64 = CallByName List.6 List.173;
    let List.686 : List U8 = CallByName List.102 List.173 List.174 List.175 List.687 List.688;
    ret List.686;

procedure List.285 (List.286, List.287, List.283):
    let List.702 : U8 = GetTagId List.283;
    joinpoint List.703 List.700:
        let List.699 : List U8 = CallByName List.71 List.286 List.700;
        ret List.699;
    in
    switch List.702:
        case 0:
            let List.704 : U8 = CallByName Test.4 List.287 List.283;
            jump List.703 List.704;
    
        case 1:
            let List.704 : U8 = CallByName Test.6 List.287 List.283;
            jump List.703 List.704;
    
        default:
            let List.704 : U8 = CallByName Test.8 List.287;
            jump List.703 List.704;
    

procedure List.5 (List.282, List.283):
    let List.284 : U64 = CallByName List.6 List.282;
    let List.684 : List U8 = CallByName List.68 List.284;
    let List.683 : List U8 = CallByName List.18 List.282 List.684 List.283;
    ret List.683;

procedure List.6 (#Attr.2):
    let List.697 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.697;

procedure List.66 (#Attr.2, #Attr.3):
    let List.696 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.696;

procedure List.68 (#Attr.2):
    let List.705 : List U8 = lowlevel ListWithCapacity #Attr.2;
    ret List.705;

procedure List.71 (#Attr.2, #Attr.3):
    let List.701 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.701;

procedure Num.19 (#Attr.2, #Attr.3):
    let Num.291 : U8 = lowlevel NumAdd #Attr.2 #Attr.3;
    ret Num.291;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.293 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.293;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.292 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.292;

procedure Test.4 (Test.5, #Attr.12):
    let Test.16 : U8 = UnionAtIndex (Id 0) (Index 0) #Attr.12;
    let Test.15 : U8 = CallByName Num.19 Test.5 Test.16;
    ret Test.15;

procedure Test.6 (Test.7, #Attr.12):
    let Test.19 : U8 = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    let Test.18 : U8 = CallByName Num.19 Test.7 Test.19;
    ret Test.18;

procedure Test.8 (Test.9):
    let Test.21 : U8 = CallByName Num.19 Test.9 Test.9;
    ret Test.21;

procedure Test.0 ():
    let Test.1 : U8 = 1i64;
    let Test.2 : U8 = 2i64;
    joinpoint Test.13 Test.3:
        let Test.11 : List U8 = Array [1i64, 2i64, 3i64];
        let Test.10 : List U8 = CallByName List.5 Test.11 Test.3;
        dec Test.11;
        ret Test.10;
    in
    let Test.12 : Str = "";
    let Test.24 : Str = "A";
    let Test.25 : Int1 = lowlevel Eq Test.24 Test.12;
    dec Test.24;
    if Test.25 then
        dec Test.12;
        let Test.14 : [C U8, C U8, C ] = TagId(0) Test.1;
        jump Test.13 Test.14;
    else
        let Test.22 : Str = "B";
        let Test.23 : Int1 = lowlevel Eq Test.22 Test.12;
        dec Test.22;
        dec Test.12;
        if Test.23 then
            let Test.17 : [C U8, C U8, C ] = TagId(1) Test.2;
            jump Test.13 Test.17;
        else
            let Test.20 : [C U8, C U8, C ] = TagId(2) ;
            jump Test.13 Test.20;
