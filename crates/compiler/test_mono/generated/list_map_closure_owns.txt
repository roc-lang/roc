procedure List.104 (Bool.21, Bool.22, Bool.23, Bool.24, Bool.25):
    joinpoint List.716 List.179 List.180 List.181 List.182 List.183:
        let List.718 : Int1 = CallByName Num.22 List.182 List.183;
        if List.718 then
            let List.722 : Str = CallByName List.66 List.179 List.182;
            inc List.722;
            let List.184 : List Str = CallByName List.297 List.180 List.722 List.181;
            let List.721 : U64 = 1i64;
            let List.720 : U64 = CallByName Num.51 List.182 List.721;
            jump List.716 List.179 List.184 List.181 List.720 List.183;
        else
            dec List.179;
            ret List.180;
    in
    inc Bool.21;
    jump List.716 Bool.21 Bool.22 Bool.23 Bool.24 Bool.25;

procedure List.18 (List.176, List.177, List.178):
    let List.714 : U64 = 0i64;
    let List.715 : U64 = CallByName List.6 List.176;
    let List.713 : List Str = CallByName List.104 List.176 List.177 List.178 List.714 List.715;
    ret List.713;

procedure List.2 (List.124, List.125):
    let List.708 : U64 = CallByName List.6 List.124;
    let List.704 : Int1 = CallByName Num.22 List.125 List.708;
    if List.704 then
        let List.706 : Str = CallByName List.66 List.124 List.125;
        inc List.706;
        let List.705 : [C {}, C Str] = TagId(1) List.706;
        ret List.705;
    else
        let List.703 : {} = Struct {};
        let List.702 : [C {}, C Str] = TagId(0) List.703;
        ret List.702;

procedure List.297 (List.298, List.299, List.295):
    let List.725 : Str = CallByName Test.3 List.299;
    let List.724 : List Str = CallByName List.71 List.298 List.725;
    ret List.724;

procedure List.5 (List.294, List.295):
    let List.296 : U64 = CallByName List.6 List.294;
    let List.711 : List Str = CallByName List.68 List.296;
    let List.710 : List Str = CallByName List.18 List.294 List.711 List.295;
    ret List.710;

procedure List.6 (#Attr.2):
    let List.709 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.709;

procedure List.66 (#Attr.2, #Attr.3):
    let List.707 : Str = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.707;

procedure List.68 (#Attr.2):
    let List.727 : List Str = lowlevel ListWithCapacity #Attr.2;
    ret List.727;

procedure List.71 (#Attr.2, #Attr.3):
    let List.726 : List Str = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.726;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.290 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.290;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.291 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.291;

procedure Str.3 (#Attr.2, #Attr.3):
    let Str.389 : Str = lowlevel StrConcat #Attr.2 #Attr.3;
    ret Str.389;

procedure Test.1 ():
    let Test.21 : Str = "lllllllllllllllllllllooooooooooong";
    let Test.22 : Str = "g";
    let Test.20 : Str = CallByName Str.3 Test.21 Test.22;
    dec Test.22;
    let Test.19 : List Str = Array [Test.20];
    ret Test.19;

procedure Test.2 ():
    let Test.15 : List Str = CallByName Test.1;
    let Test.16 : {} = Struct {};
    let Test.14 : List Str = CallByName List.5 Test.15 Test.16;
    dec Test.15;
    ret Test.14;

procedure Test.3 (Test.4):
    let Test.18 : Str = "!";
    let Test.17 : Str = CallByName Str.3 Test.4 Test.18;
    dec Test.18;
    ret Test.17;

procedure Test.0 ():
    let Test.12 : List Str = CallByName Test.2;
    let Test.13 : U64 = 0i64;
    let Test.6 : [C {}, C Str] = CallByName List.2 Test.12 Test.13;
    dec Test.12;
    let Test.9 : U8 = 1i64;
    let Test.10 : U8 = GetTagId Test.6;
    let Test.11 : Int1 = lowlevel Eq Test.9 Test.10;
    if Test.11 then
        let Test.5 : Str = UnionAtIndex (Id 1) (Index 0) Test.6;
        ret Test.5;
    else
        dec Test.6;
        let Test.8 : Str = "Hello, World!\n";
        ret Test.8;
