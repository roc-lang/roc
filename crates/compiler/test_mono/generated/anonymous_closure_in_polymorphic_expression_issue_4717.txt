procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.24 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.24;

procedure List.26 (List.172, List.173, List.174):
    let List.550 : [C U64, C U64] = CallByName List.96 List.172 List.173 List.174;
    let List.553 : U8 = 1i64;
    let List.554 : U8 = GetTagId List.550;
    let List.555 : Int1 = lowlevel Eq List.553 List.554;
    if List.555 then
        let List.175 : U64 = UnionAtIndex (Id 1) (Index 0) List.550;
        ret List.175;
    else
        let List.176 : U64 = UnionAtIndex (Id 0) (Index 0) List.550;
        ret List.176;

procedure List.29 (List.317, List.318):
    let List.549 : U64 = CallByName List.6 List.317;
    let List.319 : U64 = CallByName Num.77 List.549 List.318;
    let List.535 : List U8 = CallByName List.43 List.317 List.319;
    ret List.535;

procedure List.43 (List.315, List.316):
    let List.547 : U64 = CallByName List.6 List.315;
    let List.546 : U64 = CallByName Num.77 List.547 List.316;
    let List.537 : {U64, U64} = Struct {List.316, List.546};
    let List.536 : List U8 = CallByName List.49 List.315 List.537;
    ret List.536;

procedure List.49 (List.390, List.391):
    let List.544 : U64 = StructAtIndex 0 List.391;
    let List.545 : U64 = 0i64;
    let List.542 : Int1 = CallByName Bool.11 List.544 List.545;
    if List.542 then
        dec List.390;
        let List.543 : List U8 = Array [];
        ret List.543;
    else
        let List.539 : U64 = StructAtIndex 1 List.391;
        let List.540 : U64 = StructAtIndex 0 List.391;
        let List.538 : List U8 = CallByName List.72 List.390 List.539 List.540;
        ret List.538;

procedure List.6 (#Attr.2):
    let List.548 : U64 = lowlevel ListLen #Attr.2;
    ret List.548;

procedure List.66 (#Attr.2, #Attr.3):
    let List.571 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.571;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.541 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.541;

procedure List.80 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.559 List.453 List.454 List.455 List.456 List.457:
        let List.561 : Int1 = CallByName Num.22 List.456 List.457;
        if List.561 then
            let List.570 : U8 = CallByName List.66 List.453 List.456;
            let List.562 : [C U64, C U64] = CallByName Test.4 List.454 List.570;
            let List.567 : U8 = 1i64;
            let List.568 : U8 = GetTagId List.562;
            let List.569 : Int1 = lowlevel Eq List.567 List.568;
            if List.569 then
                let List.458 : U64 = UnionAtIndex (Id 1) (Index 0) List.562;
                let List.565 : U64 = 1i64;
                let List.564 : U64 = CallByName Num.51 List.456 List.565;
                jump List.559 List.453 List.458 List.455 List.564 List.457;
            else
                dec List.453;
                let List.459 : U64 = UnionAtIndex (Id 0) (Index 0) List.562;
                let List.566 : [C U64, C U64] = TagId(0) List.459;
                ret List.566;
        else
            dec List.453;
            let List.560 : [C U64, C U64] = TagId(1) List.454;
            ret List.560;
    in
    jump List.559 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure List.96 (List.450, List.451, List.452):
    let List.557 : U64 = 0i64;
    let List.558 : U64 = CallByName List.6 List.450;
    let List.556 : [C U64, C U64] = CallByName List.80 List.450 List.451 List.452 List.557 List.558;
    ret List.556;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.295 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.295;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.294 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.294;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.293 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.293;

procedure Test.1 (Test.2):
    let Test.13 : U64 = 0i64;
    let Test.14 : {} = Struct {};
    inc Test.2;
    let Test.3 : U64 = CallByName List.26 Test.2 Test.13 Test.14;
    let Test.12 : U64 = 0i64;
    let Test.10 : Int1 = CallByName Bool.11 Test.3 Test.12;
    if Test.10 then
        ret Test.2;
    else
        let Test.9 : List U8 = CallByName List.29 Test.2 Test.3;
        ret Test.9;

procedure Test.4 (Test.5, Test.15):
    let Test.16 : [C U64, C U64] = TagId(0) Test.5;
    ret Test.16;

procedure Test.0 ():
    let Test.8 : List U8 = Array [1i64, 2i64, 3i64];
    let Test.7 : List U8 = CallByName Test.1 Test.8;
    ret Test.7;
