procedure Bool.9 (#Attr.2, #Attr.3):
    let Bool.21 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.21;

procedure List.117 (List.571, List.572, List.573):
    let List.701 : U64 = 0i64;
    let List.702 : U64 = CallByName List.6 List.571;
    let List.700 : [C U64, C U64] = CallByName List.80 List.571 List.572 List.573 List.701 List.702;
    ret List.700;

procedure List.26 (List.214, List.215, List.216):
    let List.694 : [C U64, C U64] = CallByName List.117 List.214 List.215 List.216;
    let List.697 : U8 = 1i64;
    let List.698 : U8 = GetTagId List.694;
    let List.699 : Int1 = lowlevel Eq List.697 List.698;
    if List.699 then
        let List.217 : U64 = UnionAtIndex (Id 1) (Index 0) List.694;
        ret List.217;
    else
        let List.218 : U64 = UnionAtIndex (Id 0) (Index 0) List.694;
        ret List.218;

procedure List.38 (List.402, List.403):
    let List.693 : U64 = CallByName List.6 List.402;
    let List.404 : U64 = CallByName Num.77 List.693 List.403;
    let List.683 : List U8 = CallByName List.43 List.402 List.404;
    ret List.683;

procedure List.43 (List.400, List.401):
    let List.691 : U64 = CallByName List.6 List.400;
    let List.690 : U64 = CallByName Num.77 List.691 List.401;
    let List.685 : {U64, U64} = Struct {List.401, List.690};
    let List.684 : List U8 = CallByName List.49 List.400 List.685;
    ret List.684;

procedure List.49 (List.478, List.479):
    let List.687 : U64 = StructAtIndex 1 List.479;
    let List.688 : U64 = StructAtIndex 0 List.479;
    let List.686 : List U8 = CallByName List.72 List.478 List.687 List.688;
    ret List.686;

procedure List.6 (#Attr.2):
    let List.692 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.692;

procedure List.66 (#Attr.2, #Attr.3):
    let List.715 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.715;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.689 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.689;

procedure List.80 (Bool.22, Bool.23, Bool.24, Bool.25, Bool.26):
    joinpoint List.703 List.574 List.575 List.576 List.577 List.578:
        let List.705 : Int1 = CallByName Num.22 List.577 List.578;
        if List.705 then
            let List.714 : U8 = CallByName List.66 List.574 List.577;
            let List.706 : [C U64, C U64] = CallByName Test.4 List.575 List.714;
            let List.711 : U8 = 1i64;
            let List.712 : U8 = GetTagId List.706;
            let List.713 : Int1 = lowlevel Eq List.711 List.712;
            if List.713 then
                let List.579 : U64 = UnionAtIndex (Id 1) (Index 0) List.706;
                let List.709 : U64 = 1i64;
                let List.708 : U64 = CallByName Num.51 List.577 List.709;
                jump List.703 List.574 List.579 List.576 List.708 List.578;
            else
                dec List.574;
                let List.580 : U64 = UnionAtIndex (Id 0) (Index 0) List.706;
                let List.710 : [C U64, C U64] = TagId(0) List.580;
                ret List.710;
        else
            dec List.574;
            let List.704 : [C U64, C U64] = TagId(1) List.575;
            ret List.704;
    in
    inc Bool.22;
    jump List.703 Bool.22 Bool.23 Bool.24 Bool.25 Bool.26;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.292 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.292;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.291 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.291;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.290 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.290;

procedure Test.1 (Test.2):
    let Test.13 : U64 = 0i64;
    let Test.14 : {} = Struct {};
    let Test.3 : U64 = CallByName List.26 Test.2 Test.13 Test.14;
    let Test.12 : U64 = 0i64;
    let Test.10 : Int1 = CallByName Bool.9 Test.3 Test.12;
    if Test.10 then
        ret Test.2;
    else
        let Test.9 : List U8 = CallByName List.38 Test.2 Test.3;
        ret Test.9;

procedure Test.4 (Test.5, Test.15):
    let Test.16 : [C U64, C U64] = TagId(0) Test.5;
    ret Test.16;

procedure Test.0 ():
    let Test.8 : List U8 = Array [1i64, 2i64, 3i64];
    let Test.7 : List U8 = CallByName Test.1 Test.8;
    ret Test.7;
