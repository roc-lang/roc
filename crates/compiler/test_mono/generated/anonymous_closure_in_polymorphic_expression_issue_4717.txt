procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.23 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.23;

procedure List.101 (List.484, List.485, List.486):
    let List.587 : U64 = 0i64;
    let List.588 : U64 = CallByName List.6 List.484;
    let List.586 : [C U64, C U64] = CallByName List.80 List.484 List.485 List.486 List.587 List.588;
    ret List.586;

procedure List.26 (List.197, List.198, List.199):
    let List.580 : [C U64, C U64] = CallByName List.101 List.197 List.198 List.199;
    let List.583 : U8 = 1i64;
    let List.584 : U8 = GetTagId List.580;
    let List.585 : Int1 = lowlevel Eq List.583 List.584;
    if List.585 then
        let List.200 : U64 = UnionAtIndex (Id 1) (Index 0) List.580;
        ret List.200;
    else
        let List.201 : U64 = UnionAtIndex (Id 0) (Index 0) List.580;
        ret List.201;

procedure List.38 (List.340, List.341):
    let List.579 : U64 = CallByName List.6 List.340;
    let List.342 : U64 = CallByName Num.77 List.579 List.341;
    let List.569 : List U8 = CallByName List.43 List.340 List.342;
    ret List.569;

procedure List.43 (List.338, List.339):
    let List.577 : U64 = CallByName List.6 List.338;
    let List.576 : U64 = CallByName Num.77 List.577 List.339;
    let List.571 : {U64, U64} = Struct {List.339, List.576};
    let List.570 : List U8 = CallByName List.49 List.338 List.571;
    ret List.570;

procedure List.49 (List.416, List.417):
    let List.573 : U64 = StructAtIndex 1 List.417;
    let List.574 : U64 = StructAtIndex 0 List.417;
    let List.572 : List U8 = CallByName List.72 List.416 List.573 List.574;
    ret List.572;

procedure List.6 (#Attr.2):
    let List.578 : U64 = lowlevel ListLen #Attr.2;
    ret List.578;

procedure List.66 (#Attr.2, #Attr.3):
    let List.601 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.601;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.575 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.575;

procedure List.80 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.589 List.487 List.488 List.489 List.490 List.491:
        let List.591 : Int1 = CallByName Num.22 List.490 List.491;
        if List.591 then
            let List.600 : U8 = CallByName List.66 List.487 List.490;
            let List.592 : [C U64, C U64] = CallByName Test.4 List.488 List.600;
            let List.597 : U8 = 1i64;
            let List.598 : U8 = GetTagId List.592;
            let List.599 : Int1 = lowlevel Eq List.597 List.598;
            if List.599 then
                let List.492 : U64 = UnionAtIndex (Id 1) (Index 0) List.592;
                let List.595 : U64 = 1i64;
                let List.594 : U64 = CallByName Num.51 List.490 List.595;
                jump List.589 List.487 List.492 List.489 List.594 List.491;
            else
                dec List.487;
                let List.493 : U64 = UnionAtIndex (Id 0) (Index 0) List.592;
                let List.596 : [C U64, C U64] = TagId(0) List.493;
                ret List.596;
        else
            dec List.487;
            let List.590 : [C U64, C U64] = TagId(1) List.488;
            ret List.590;
    in
    jump List.589 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.300 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.300;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.299 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.299;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.298 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.298;

procedure Test.1 (Test.2):
    let Test.13 : U64 = 0i64;
    let Test.14 : {} = Struct {};
    inc Test.2;
    let Test.3 : U64 = CallByName List.26 Test.2 Test.13 Test.14;
    let Test.12 : U64 = 0i64;
    let Test.10 : Int1 = CallByName Bool.11 Test.3 Test.12;
    if Test.10 then
        ret Test.2;
    else
        let Test.9 : List U8 = CallByName List.38 Test.2 Test.3;
        ret Test.9;

procedure Test.4 (Test.5, Test.15):
    let Test.16 : [C U64, C U64] = TagId(0) Test.5;
    ret Test.16;

procedure Test.0 ():
    let Test.8 : List U8 = Array [1i64, 2i64, 3i64];
    let Test.7 : List U8 = CallByName Test.1 Test.8;
    ret Test.7;
