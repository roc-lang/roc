procedure Bool.11 (#Attr.2, #Attr.3):
    let Bool.23 : Int1 = lowlevel Eq #Attr.2 #Attr.3;
    ret Bool.23;

procedure List.115 (List.562, List.563, List.564):
    let List.677 : U64 = 0i64;
    let List.678 : U64 = CallByName List.6 List.562;
    let List.676 : [C U64, C U64] = CallByName List.80 List.562 List.563 List.564 List.677 List.678;
    ret List.676;

procedure List.26 (List.212, List.213, List.214):
    let List.670 : [C U64, C U64] = CallByName List.115 List.212 List.213 List.214;
    let List.673 : U8 = 1i64;
    let List.674 : U8 = GetTagId List.670;
    let List.675 : Int1 = lowlevel Eq List.673 List.674;
    if List.675 then
        let List.215 : U64 = UnionAtIndex (Id 1) (Index 0) List.670;
        ret List.215;
    else
        let List.216 : U64 = UnionAtIndex (Id 0) (Index 0) List.670;
        ret List.216;

procedure List.38 (List.400, List.401):
    let List.669 : U64 = CallByName List.6 List.400;
    let List.402 : U64 = CallByName Num.77 List.669 List.401;
    let List.659 : List U8 = CallByName List.43 List.400 List.402;
    ret List.659;

procedure List.43 (List.398, List.399):
    let List.667 : U64 = CallByName List.6 List.398;
    let List.666 : U64 = CallByName Num.77 List.667 List.399;
    let List.661 : {U64, U64} = Struct {List.399, List.666};
    let List.660 : List U8 = CallByName List.49 List.398 List.661;
    ret List.660;

procedure List.49 (List.476, List.477):
    let List.663 : U64 = StructAtIndex 1 List.477;
    let List.664 : U64 = StructAtIndex 0 List.477;
    let List.662 : List U8 = CallByName List.72 List.476 List.663 List.664;
    ret List.662;

procedure List.6 (#Attr.2):
    let List.668 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.668;

procedure List.66 (#Attr.2, #Attr.3):
    let List.691 : U8 = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.691;

procedure List.72 (#Attr.2, #Attr.3, #Attr.4):
    let List.665 : List U8 = lowlevel ListSublist #Attr.2 #Attr.3 #Attr.4;
    ret List.665;

procedure List.80 (#Derived_gen.0, #Derived_gen.1, #Derived_gen.2, #Derived_gen.3, #Derived_gen.4):
    joinpoint List.679 List.565 List.566 List.567 List.568 List.569:
        let List.681 : Int1 = CallByName Num.22 List.568 List.569;
        if List.681 then
            let List.690 : U8 = CallByName List.66 List.565 List.568;
            let List.682 : [C U64, C U64] = CallByName Test.4 List.566 List.690;
            let List.687 : U8 = 1i64;
            let List.688 : U8 = GetTagId List.682;
            let List.689 : Int1 = lowlevel Eq List.687 List.688;
            if List.689 then
                let List.570 : U64 = UnionAtIndex (Id 1) (Index 0) List.682;
                let List.685 : U64 = 1i64;
                let List.684 : U64 = CallByName Num.51 List.568 List.685;
                jump List.679 List.565 List.570 List.567 List.684 List.569;
            else
                dec List.565;
                let List.571 : U64 = UnionAtIndex (Id 0) (Index 0) List.682;
                let List.686 : [C U64, C U64] = TagId(0) List.571;
                ret List.686;
        else
            dec List.565;
            let List.680 : [C U64, C U64] = TagId(1) List.566;
            ret List.680;
    in
    inc #Derived_gen.0;
    jump List.679 #Derived_gen.0 #Derived_gen.1 #Derived_gen.2 #Derived_gen.3 #Derived_gen.4;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.288 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.288;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.287 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.287;

procedure Num.77 (#Attr.2, #Attr.3):
    let Num.286 : U64 = lowlevel NumSubSaturated #Attr.2 #Attr.3;
    ret Num.286;

procedure Test.1 (Test.2):
    let Test.13 : U64 = 0i64;
    let Test.14 : {} = Struct {};
    let Test.3 : U64 = CallByName List.26 Test.2 Test.13 Test.14;
    let Test.12 : U64 = 0i64;
    let Test.10 : Int1 = CallByName Bool.11 Test.3 Test.12;
    if Test.10 then
        ret Test.2;
    else
        let Test.9 : List U8 = CallByName List.38 Test.2 Test.3;
        ret Test.9;

procedure Test.4 (Test.5, Test.15):
    let Test.16 : [C U64, C U64] = TagId(0) Test.5;
    ret Test.16;

procedure Test.0 ():
    let Test.8 : List U8 = Array [1i64, 2i64, 3i64];
    let Test.7 : List U8 = CallByName Test.1 Test.8;
    ret Test.7;
