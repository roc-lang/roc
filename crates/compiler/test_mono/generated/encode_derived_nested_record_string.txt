procedure #Derived.0 (#Derived.1):
    let #Derived_gen.0 : Str = CallByName Encode.23 #Derived.1;
    ret #Derived_gen.0;

procedure #Derived.2 (#Derived.3, #Derived.4, #Derived.1):
    let #Derived_gen.7 : Str = "a";
    let #Derived_gen.8 : Str = CallByName #Derived.5 #Derived.1;
    let #Derived_gen.6 : {Str, Str} = Struct {#Derived_gen.7, #Derived_gen.8};
    let #Derived_gen.5 : List {Str, Str} = Array [#Derived_gen.6];
    let #Derived_gen.4 : List {Str, Str} = CallByName Test.22 #Derived_gen.5;
    let #Derived_gen.3 : List U8 = CallByName Encode.24 #Derived.3 #Derived_gen.4 #Derived.4;
    dec #Derived_gen.4;
    ret #Derived_gen.3;

procedure #Derived.5 (#Derived.6):
    let #Derived_gen.10 : Str = CallByName Encode.23 #Derived.6;
    ret #Derived_gen.10;

procedure #Derived.7 (#Derived.8, #Derived.9, #Derived.6):
    let #Derived_gen.17 : Str = "b";
    let #Derived_gen.18 : Str = CallByName Test.20 #Derived.6;
    let #Derived_gen.16 : {Str, Str} = Struct {#Derived_gen.17, #Derived_gen.18};
    let #Derived_gen.15 : List {Str, Str} = Array [#Derived_gen.16];
    let #Derived_gen.14 : List {Str, Str} = CallByName Test.22 #Derived_gen.15;
    let #Derived_gen.13 : List U8 = CallByName Encode.24 #Derived.8 #Derived_gen.14 #Derived.9;
    dec #Derived_gen.14;
    ret #Derived_gen.13;

procedure Encode.23 (Encode.100):
    ret Encode.100;

procedure Encode.23 (Encode.100):
    ret Encode.100;

procedure Encode.23 (Encode.100):
    ret Encode.100;

procedure Encode.23 (Encode.100):
    ret Encode.100;

procedure Encode.23 (Encode.100):
    ret Encode.100;

procedure Encode.24 (Encode.101, Encode.109, Encode.103):
    let Encode.113 : List U8 = CallByName #Derived.2 Encode.101 Encode.103 Encode.109;
    ret Encode.113;

procedure Encode.24 (Encode.101, Encode.109, Encode.103):
    let Encode.115 : List U8 = CallByName Test.68 Encode.101 Encode.103 Encode.109;
    ret Encode.115;

procedure Encode.24 (Encode.101, Encode.109, Encode.103):
    let Encode.118 : List U8 = CallByName #Derived.7 Encode.101 Encode.103 Encode.109;
    ret Encode.118;

procedure Encode.24 (Encode.101, Encode.109, Encode.103):
    let Encode.121 : List U8 = CallByName Test.68 Encode.101 Encode.103 Encode.109;
    ret Encode.121;

procedure Encode.24 (Encode.101, Encode.109, Encode.103):
    let Encode.126 : List U8 = CallByName Test.57 Encode.101 Encode.103 Encode.109;
    ret Encode.126;

procedure Encode.26 (Encode.107, Encode.108):
    let Encode.111 : List U8 = Array [];
    let Encode.112 : Str = CallByName #Derived.0 Encode.107;
    let Encode.110 : List U8 = CallByName Encode.24 Encode.111 Encode.112 Encode.108;
    ret Encode.110;

procedure List.100 (#Derived_gen.29, #Derived_gen.30, #Derived_gen.31, #Derived_gen.32, #Derived_gen.33):
    joinpoint List.688 List.174 List.175 List.176 List.177 List.178:
        let List.690 : Int1 = CallByName Num.22 List.177 List.178;
        if List.690 then
            let List.694 : {Str, Str} = CallByName List.66 List.174 List.177;
            inc List.694;
            let List.179 : List U8 = CallByName Test.71 List.175 List.694;
            let List.693 : U64 = 1i64;
            let List.692 : U64 = CallByName Num.51 List.177 List.693;
            jump List.688 List.174 List.179 List.176 List.692 List.178;
        else
            dec List.174;
            ret List.175;
    in
    inc #Derived_gen.29;
    jump List.688 #Derived_gen.29 #Derived_gen.30 #Derived_gen.31 #Derived_gen.32 #Derived_gen.33;

procedure List.100 (#Derived_gen.37, #Derived_gen.38, #Derived_gen.39, #Derived_gen.40, #Derived_gen.41):
    joinpoint List.662 List.174 List.175 List.176 List.177 List.178:
        let List.664 : Int1 = CallByName Num.22 List.177 List.178;
        if List.664 then
            let List.668 : {Str, Str} = CallByName List.66 List.174 List.177;
            inc List.668;
            let List.179 : List U8 = CallByName Test.71 List.175 List.668;
            let List.667 : U64 = 1i64;
            let List.666 : U64 = CallByName Num.51 List.177 List.667;
            jump List.662 List.174 List.179 List.176 List.666 List.178;
        else
            dec List.174;
            ret List.175;
    in
    inc #Derived_gen.37;
    jump List.662 #Derived_gen.37 #Derived_gen.38 #Derived_gen.39 #Derived_gen.40 #Derived_gen.41;

procedure List.18 (List.171, List.172, List.173):
    let List.660 : U64 = 0i64;
    let List.661 : U64 = CallByName List.6 List.171;
    let List.659 : List U8 = CallByName List.100 List.171 List.172 List.173 List.660 List.661;
    ret List.659;

procedure List.18 (List.171, List.172, List.173):
    let List.686 : U64 = 0i64;
    let List.687 : U64 = CallByName List.6 List.171;
    let List.685 : List U8 = CallByName List.100 List.171 List.172 List.173 List.686 List.687;
    ret List.685;

procedure List.4 (List.135, List.136):
    let List.707 : U64 = 1i64;
    let List.706 : List U8 = CallByName List.70 List.135 List.707;
    let List.705 : List U8 = CallByName List.71 List.706 List.136;
    ret List.705;

procedure List.6 (#Attr.2):
    let List.684 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.684;

procedure List.6 (#Attr.2):
    let List.710 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.710;

procedure List.66 (#Attr.2, #Attr.3):
    let List.669 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.669;

procedure List.66 (#Attr.2, #Attr.3):
    let List.695 : {Str, Str} = lowlevel ListGetUnsafe #Attr.2 #Attr.3;
    ret List.695;

procedure List.70 (#Attr.2, #Attr.3):
    let List.701 : List U8 = lowlevel ListReserve #Attr.2 #Attr.3;
    ret List.701;

procedure List.71 (#Attr.2, #Attr.3):
    let List.699 : List U8 = lowlevel ListAppendUnsafe #Attr.2 #Attr.3;
    ret List.699;

procedure List.8 (#Attr.2, #Attr.3):
    let List.709 : List U8 = lowlevel ListConcat #Attr.2 #Attr.3;
    ret List.709;

procedure Num.127 (#Attr.2):
    let Num.290 : U8 = lowlevel NumIntCast #Attr.2;
    ret Num.290;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.292 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.292;

procedure Num.51 (#Attr.2, #Attr.3):
    let Num.291 : U64 = lowlevel NumAddWrap #Attr.2 #Attr.3;
    ret Num.291;

procedure Num.96 (#Attr.2):
    let Num.289 : Str = lowlevel NumToStr #Attr.2;
    ret Num.289;

procedure Str.12 (#Attr.2):
    let Str.258 : List U8 = lowlevel StrToUtf8 #Attr.2;
    ret Str.258;

procedure Str.36 (#Attr.2):
    let Str.259 : U64 = lowlevel StrCountUtf8Bytes #Attr.2;
    ret Str.259;

procedure Str.43 (#Attr.2):
    let Str.253 : {U64, Str, Int1, U8} = lowlevel StrFromUtf8 #Attr.2;
    ret Str.253;

procedure Str.9 (Str.73):
    let Str.74 : {U64, Str, Int1, U8} = CallByName Str.43 Str.73;
    let Str.250 : Int1 = StructAtIndex 2 Str.74;
    if Str.250 then
        let Str.252 : Str = StructAtIndex 1 Str.74;
        let Str.251 : [C {U64, U8}, C Str] = TagId(1) Str.252;
        ret Str.251;
    else
        let Str.248 : U8 = StructAtIndex 3 Str.74;
        let Str.249 : U64 = StructAtIndex 0 Str.74;
        let #Derived_gen.45 : Str = StructAtIndex 1 Str.74;
        dec #Derived_gen.45;
        let Str.247 : {U64, U8} = Struct {Str.249, Str.248};
        let Str.246 : [C {U64, U8}, C Str] = TagId(0) Str.247;
        ret Str.246;

procedure Test.20 (Test.56):
    let Test.325 : Str = CallByName Encode.23 Test.56;
    ret Test.325;

procedure Test.22 (Test.67):
    let Test.261 : List {Str, Str} = CallByName Encode.23 Test.67;
    ret Test.261;

procedure Test.22 (Test.67):
    let Test.293 : List {Str, Str} = CallByName Encode.23 Test.67;
    ret Test.293;

procedure Test.3 ():
    let Test.258 : {} = Struct {};
    ret Test.258;

procedure Test.4 (Test.49, Test.50, Test.51):
    let Test.322 : U8 = CallByName Num.127 Test.50;
    let Test.319 : List U8 = CallByName List.4 Test.49 Test.322;
    let Test.321 : Str = CallByName Num.96 Test.51;
    let Test.320 : List U8 = CallByName Str.12 Test.321;
    let Test.317 : List U8 = CallByName List.8 Test.319 Test.320;
    let Test.318 : U8 = 32i64;
    let Test.316 : List U8 = CallByName List.4 Test.317 Test.318;
    ret Test.316;

procedure Test.57 (Test.58, Test.275, Test.56):
    let Test.314 : I64 = 115i64;
    let Test.315 : U64 = CallByName Str.36 Test.56;
    let Test.312 : List U8 = CallByName Test.4 Test.58 Test.314 Test.315;
    let Test.313 : List U8 = CallByName Str.12 Test.56;
    let Test.310 : List U8 = CallByName List.8 Test.312 Test.313;
    let Test.311 : U8 = 32i64;
    let Test.309 : List U8 = CallByName List.4 Test.310 Test.311;
    ret Test.309;

procedure Test.68 (Test.69, Test.263, Test.67):
    let Test.291 : I64 = 114i64;
    let Test.292 : U64 = CallByName List.6 Test.67;
    let Test.70 : List U8 = CallByName Test.4 Test.69 Test.291 Test.292;
    let Test.266 : {} = Struct {};
    let Test.265 : List U8 = CallByName List.18 Test.67 Test.70 Test.266;
    ret Test.265;

procedure Test.68 (Test.69, Test.263, Test.67):
    let Test.323 : I64 = 114i64;
    let Test.324 : U64 = CallByName List.6 Test.67;
    let Test.70 : List U8 = CallByName Test.4 Test.69 Test.323 Test.324;
    let Test.298 : {} = Struct {};
    let Test.297 : List U8 = CallByName List.18 Test.67 Test.70 Test.298;
    ret Test.297;

procedure Test.71 (Test.72, Test.267):
    let Test.73 : Str = StructAtIndex 0 Test.267;
    let Test.74 : Str = StructAtIndex 1 Test.267;
    let Test.271 : Str = CallByName Test.20 Test.73;
    let Test.272 : {} = Struct {};
    let Test.269 : List U8 = CallByName Encode.24 Test.72 Test.271 Test.272;
    let Test.270 : {} = Struct {};
    let Test.268 : List U8 = CallByName Encode.24 Test.269 Test.74 Test.270;
    ret Test.268;

procedure Test.71 (Test.72, Test.267):
    let Test.73 : Str = StructAtIndex 0 Test.267;
    let Test.74 : Str = StructAtIndex 1 Test.267;
    let Test.303 : Str = CallByName Test.20 Test.73;
    let Test.304 : {} = Struct {};
    let Test.301 : List U8 = CallByName Encode.24 Test.72 Test.303 Test.304;
    let Test.302 : {} = Struct {};
    let Test.300 : List U8 = CallByName Encode.24 Test.301 Test.74 Test.302;
    ret Test.300;

procedure Test.0 ():
    let Test.260 : Str = "bar";
    let Test.257 : {} = CallByName Test.3;
    let Test.255 : List U8 = CallByName Encode.26 Test.260 Test.257;
    let Test.210 : [C {U64, U8}, C Str] = CallByName Str.9 Test.255;
    let Test.252 : U8 = 1i64;
    let Test.253 : U8 = GetTagId Test.210;
    let Test.254 : Int1 = lowlevel Eq Test.252 Test.253;
    if Test.254 then
        let Test.211 : Str = UnionAtIndex (Id 1) (Index 0) Test.210;
        ret Test.211;
    else
        dec Test.210;
        let Test.251 : Str = "<bad>";
        ret Test.251;
