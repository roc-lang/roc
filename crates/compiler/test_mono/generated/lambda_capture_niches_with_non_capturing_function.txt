procedure Test.1 (Test.5):
    let Test.15 : [C , C {}, C U64] = TagId(1) Test.5;
    ret Test.15;

procedure Test.1 (Test.5):
    let Test.24 : [C , C {}, C U64] = TagId(2) Test.5;
    ret Test.24;

procedure Test.2 (Test.8):
    let Test.21 : Str = "";
    ret Test.21;

procedure Test.6 (Test.16, #Attr.12):
    let Test.19 : {} = UnionAtIndex (Id 1) (Index 0) #Attr.12;
    let Test.18 : Str = "";
    ret Test.18;

procedure Test.6 (Test.16, #Attr.12):
    let Test.28 : U64 = UnionAtIndex (Id 2) (Index 0) #Attr.12;
    let Test.27 : Str = "";
    ret Test.27;

procedure Test.0 ():
    let Test.3 : U8 = 0u8;
    joinpoint Test.12 Test.4:
        let Test.10 : {} = Struct {};
        let Test.11 : U8 = GetTagId Test.4;
        switch Test.11:
            case 0:
                let Test.9 : Str = CallByName Test.2 Test.10;
                ret Test.9;
        
            case 1:
                let Test.9 : Str = CallByName Test.6 Test.10 Test.4;
                ret Test.9;
        
            default:
                let Test.9 : Str = CallByName Test.6 Test.10 Test.4;
                ret Test.9;
        
    in
    switch Test.3:
        case 0:
            let Test.14 : {} = Struct {};
            let Test.13 : [C , C {}, C U64] = CallByName Test.1 Test.14;
            jump Test.12 Test.13;
    
        case 1:
            let Test.20 : [C , C {}, C U64] = TagId(0) ;
            jump Test.12 Test.20;
    
        default:
            let Test.23 : U64 = 1i64;
            let Test.22 : [C , C {}, C U64] = CallByName Test.1 Test.23;
            jump Test.12 Test.22;
    
