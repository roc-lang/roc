procedure Dict.1 (Dict.731):
    let Dict.740 : List {U32, U32} = Array [];
    let Dict.741 : List {[], []} = Array [];
    let Dict.742 : U64 = 0i64;
    let Dict.51 : Float32 = CallByName Dict.51;
    let Dict.52 : U8 = CallByName Dict.52;
    let Dict.739 : {List {U32, U32}, List {[], []}, U64, Float32, U8} = Struct {Dict.740, Dict.741, Dict.742, Dict.51, Dict.52};
    ret Dict.739;

procedure Dict.4 (Dict.737):
    let Dict.163 : List {[], []} = StructAtIndex 1 Dict.737;
    let #Derived_gen.0 : List {U32, U32} = StructAtIndex 0 Dict.737;
    dec #Derived_gen.0;
    let Dict.738 : U64 = CallByName List.6 Dict.163;
    dec Dict.163;
    ret Dict.738;

procedure Dict.51 ():
    let Dict.746 : Float32 = 0.8f64;
    ret Dict.746;

procedure Dict.52 ():
    let Dict.744 : U8 = 64i64;
    let Dict.745 : U8 = 3i64;
    let Dict.743 : U8 = CallByName Num.75 Dict.744 Dict.745;
    ret Dict.743;

procedure List.6 (#Attr.2):
    let List.659 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.659;

procedure Num.75 (#Attr.2, #Attr.3):
    let Num.285 : U8 = lowlevel NumSubWrap #Attr.2 #Attr.3;
    ret Num.285;

procedure Test.0 ():
    let Test.3 : {} = Struct {};
    let Test.2 : {List {U32, U32}, List {[], []}, U64, Float32, U8} = CallByName Dict.1 Test.3;
    let Test.1 : U64 = CallByName Dict.4 Test.2;
    ret Test.1;
