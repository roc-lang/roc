procedure List.3 (List.131, List.132, List.133):
    let List.695 : {List I64, I64} = CallByName List.64 List.131 List.132 List.133;
    let List.694 : List I64 = StructAtIndex 0 List.695;
    ret List.694;

procedure List.6 (#Attr.2):
    let List.701 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.701;

procedure List.64 (List.128, List.129, List.130):
    let List.700 : U64 = CallByName List.6 List.128;
    let List.697 : Int1 = CallByName Num.22 List.129 List.700;
    if List.697 then
        let List.698 : {List I64, I64} = CallByName List.67 List.128 List.129 List.130;
        ret List.698;
    else
        let List.696 : {List I64, I64} = Struct {List.128, List.130};
        ret List.696;

procedure List.67 (#Attr.2, #Attr.3, #Attr.4):
    let List.699 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.699;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.289 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.289;

procedure Test.2 (Test.3):
    let Test.6 : U64 = 0i64;
    let Test.7 : I64 = 0i64;
    let Test.5 : List I64 = CallByName List.3 Test.3 Test.6 Test.7;
    ret Test.5;

procedure Test.0 ():
    let Test.1 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.4 : List I64 = CallByName Test.2 Test.1;
    ret Test.4;
