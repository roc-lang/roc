procedure List.3 (List.98, List.99, List.100):
    let List.382 : {List I64, I64} = CallByName List.64 List.98 List.99 List.100;
    let List.381 : List I64 = StructAtIndex 0 List.382;
    inc List.381;
    dec List.382;
    ret List.381;

procedure List.6 (#Attr.2):
    let List.388 : U64 = lowlevel ListLen #Attr.2;
    ret List.388;

procedure List.64 (List.95, List.96, List.97):
    let List.387 : U64 = CallByName List.6 List.95;
    let List.384 : Int1 = CallByName Num.22 List.96 List.387;
    if List.384 then
        let List.385 : {List I64, I64} = CallByName List.67 List.95 List.96 List.97;
        ret List.385;
    else
        let List.383 : {List I64, I64} = Struct {List.95, List.97};
        ret List.383;

procedure List.67 (#Attr.2, #Attr.3, #Attr.4):
    let List.386 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.386;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.257 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.257;

procedure Test.2 (Test.3):
    let Test.6 : U64 = 0i64;
    let Test.7 : I64 = 0i64;
    let Test.5 : List I64 = CallByName List.3 Test.3 Test.6 Test.7;
    ret Test.5;

procedure Test.0 ():
    let Test.1 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.4 : List I64 = CallByName Test.2 Test.1;
    ret Test.4;
