procedure List.3 (List.127, List.128, List.129):
    let List.660 : {List I64, I64} = CallByName List.64 List.127 List.128 List.129;
    let List.659 : List I64 = StructAtIndex 0 List.660;
    ret List.659;

procedure List.6 (#Attr.2):
    let List.666 : U64 = lowlevel ListLenU64 #Attr.2;
    ret List.666;

procedure List.64 (List.124, List.125, List.126):
    let List.665 : U64 = CallByName List.6 List.124;
    let List.662 : Int1 = CallByName Num.22 List.125 List.665;
    if List.662 then
        let List.663 : {List I64, I64} = CallByName List.67 List.124 List.125 List.126;
        ret List.663;
    else
        let List.661 : {List I64, I64} = Struct {List.124, List.126};
        ret List.661;

procedure List.67 (#Attr.2, #Attr.3, #Attr.4):
    let List.664 : {List I64, I64} = lowlevel ListReplaceUnsafe #Attr.2 #Attr.3 #Attr.4;
    ret List.664;

procedure Num.22 (#Attr.2, #Attr.3):
    let Num.285 : Int1 = lowlevel NumLt #Attr.2 #Attr.3;
    ret Num.285;

procedure Test.2 (Test.3):
    let Test.6 : U64 = 0i64;
    let Test.7 : I64 = 0i64;
    let Test.5 : List I64 = CallByName List.3 Test.3 Test.6 Test.7;
    ret Test.5;

procedure Test.0 ():
    let Test.1 : List I64 = Array [1i64, 2i64, 3i64];
    let Test.4 : List I64 = CallByName Test.2 Test.1;
    ret Test.4;
