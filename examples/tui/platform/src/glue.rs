// ⚠️ GENERATED CODE ⚠️ - this entire file was generated by the `roc glue` CLI command

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Copy, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(u8)]
pub enum DiscriminantElem {
    Layout = 0,
    Paragraph = 1,
}

impl core::fmt::Debug for DiscriminantElem {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        match self {
            Self::Layout => f.write_str("DiscriminantElem::Layout"),
            Self::Paragraph => f.write_str("DiscriminantElem::Paragraph"),
        }
    }
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[repr(transparent)]
pub struct Elem {
    pointer: *mut UnionElem,
}


#[cfg(any(
    target_arch = "arm",
    target_arch = "wasm32",
    target_arch = "x86"
))]
#[repr(C)]
union UnionElem {
    Layout: core::mem::ManuallyDrop<ElemLayout>,
    Paragraph: core::mem::ManuallyDrop<Elem_Paragraph>,
    _sizer: [u8; 4],
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Debug, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(C)]
pub struct Span {
    pub style: Styles,
    pub text: roc_std::RocStr,
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Copy, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(u8)]
pub enum discriminant_Event {
    FocusGained = 0,
    FocusLost = 1,
    KeyPressed = 2,
    Paste = 3,
    Resize = 4,
}

impl core::fmt::Debug for discriminant_Event {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        match self {
            Self::FocusGained => f.write_str("discriminant_Event::FocusGained"),
            Self::FocusLost => f.write_str("discriminant_Event::FocusLost"),
            Self::KeyPressed => f.write_str("discriminant_Event::KeyPressed"),
            Self::Paste => f.write_str("discriminant_Event::Paste"),
            Self::Resize => f.write_str("discriminant_Event::Resize"),
        }
    }
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "wasm32",
    target_arch = "x86"
))]
#[repr(C)]
pub union Event {
    KeyPressed: core::mem::ManuallyDrop<KeyCode>,
    Paste: core::mem::ManuallyDrop<roc_std::RocStr>,
    Resize: Bounds,
    _sizer: [u8; 20],
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Debug, Default, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(transparent)]
pub struct Model {
    pub text: roc_std::RocStr,
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Copy, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(u8)]
pub enum BorderModifier {
    All = 0,
    Bottom = 1,
    Left = 2,
    None = 3,
    Right = 4,
    Top = 5,
}

impl core::fmt::Debug for BorderModifier {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        match self {
            Self::All => f.write_str("BorderModifier::All"),
            Self::Bottom => f.write_str("BorderModifier::Bottom"),
            Self::Left => f.write_str("BorderModifier::Left"),
            Self::None => f.write_str("BorderModifier::None"),
            Self::Right => f.write_str("BorderModifier::Right"),
            Self::Top => f.write_str("BorderModifier::Top"),
        }
    }
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Copy, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(u8)]
pub enum TextModifier {
    Bold = 0,
    CrossedOut = 1,
    Dim = 2,
    Hidden = 3,
    Italic = 4,
    RapidBlink = 5,
    Reversed = 6,
    SlowBlink = 7,
    Underlined = 8,
}

impl core::fmt::Debug for TextModifier {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        match self {
            Self::Bold => f.write_str("TextModifier::Bold"),
            Self::CrossedOut => f.write_str("TextModifier::CrossedOut"),
            Self::Dim => f.write_str("TextModifier::Dim"),
            Self::Hidden => f.write_str("TextModifier::Hidden"),
            Self::Italic => f.write_str("TextModifier::Italic"),
            Self::RapidBlink => f.write_str("TextModifier::RapidBlink"),
            Self::Reversed => f.write_str("TextModifier::Reversed"),
            Self::SlowBlink => f.write_str("TextModifier::SlowBlink"),
            Self::Underlined => f.write_str("TextModifier::Underlined"),
        }
    }
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Copy, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(u8)]
pub enum DiscriminantConstraint {
    Length = 0,
    Max = 1,
    Min = 2,
    Percentage = 3,
    Ratio = 4,
}

impl core::fmt::Debug for DiscriminantConstraint {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        match self {
            Self::Length => f.write_str("DiscriminantConstraint::Length"),
            Self::Max => f.write_str("DiscriminantConstraint::Max"),
            Self::Min => f.write_str("DiscriminantConstraint::Min"),
            Self::Percentage => f.write_str("DiscriminantConstraint::Percentage"),
            Self::Ratio => f.write_str("DiscriminantConstraint::Ratio"),
        }
    }
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[repr(C)]
pub union Constraint {
    Length: u16,
    Max: u16,
    Min: u16,
    Percentage: u16,
    Ratio: ConstraintRatio,
    _sizer: [u8; 12],
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Copy, Debug, Default, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(C)]
pub struct Bounds {
    pub height: u16,
    pub width: u16,
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Copy, Debug, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(C)]
pub struct R1 {
    // pub init: TODO_roc_function_65,
    // pub render: TODO_roc_function_69,
    // pub update: TODO_roc_function_67,
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Copy, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(u8)]
pub enum DiscriminantKeyCode {
    BackTab = 0,
    Backspace = 1,
    CapsLock = 2,
    Delete = 3,
    Down = 4,
    End = 5,
    Enter = 6,
    Esc = 7,
    Function = 8,
    Home = 9,
    Insert = 10,
    KeypadBegin = 11,
    Left = 12,
    Media = 13,
    Menu = 14,
    Modifier = 15,
    Null = 16,
    NumLock = 17,
    PageDown = 18,
    PageUp = 19,
    Pause = 20,
    PrintScreen = 21,
    Right = 22,
    Scalar = 23,
    ScrollLock = 24,
    Tab = 25,
    Up = 26,
}

impl core::fmt::Debug for DiscriminantKeyCode {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        match self {
            Self::BackTab => f.write_str("DiscriminantKeyCode::BackTab"),
            Self::Backspace => f.write_str("DiscriminantKeyCode::Backspace"),
            Self::CapsLock => f.write_str("DiscriminantKeyCode::CapsLock"),
            Self::Delete => f.write_str("DiscriminantKeyCode::Delete"),
            Self::Down => f.write_str("DiscriminantKeyCode::Down"),
            Self::End => f.write_str("DiscriminantKeyCode::End"),
            Self::Enter => f.write_str("DiscriminantKeyCode::Enter"),
            Self::Esc => f.write_str("DiscriminantKeyCode::Esc"),
            Self::Function => f.write_str("DiscriminantKeyCode::Function"),
            Self::Home => f.write_str("DiscriminantKeyCode::Home"),
            Self::Insert => f.write_str("DiscriminantKeyCode::Insert"),
            Self::KeypadBegin => f.write_str("DiscriminantKeyCode::KeypadBegin"),
            Self::Left => f.write_str("DiscriminantKeyCode::Left"),
            Self::Media => f.write_str("DiscriminantKeyCode::Media"),
            Self::Menu => f.write_str("DiscriminantKeyCode::Menu"),
            Self::Modifier => f.write_str("DiscriminantKeyCode::Modifier"),
            Self::Null => f.write_str("DiscriminantKeyCode::Null"),
            Self::NumLock => f.write_str("DiscriminantKeyCode::NumLock"),
            Self::PageDown => f.write_str("DiscriminantKeyCode::PageDown"),
            Self::PageUp => f.write_str("DiscriminantKeyCode::PageUp"),
            Self::Pause => f.write_str("DiscriminantKeyCode::Pause"),
            Self::PrintScreen => f.write_str("DiscriminantKeyCode::PrintScreen"),
            Self::Right => f.write_str("DiscriminantKeyCode::Right"),
            Self::Scalar => f.write_str("DiscriminantKeyCode::Scalar"),
            Self::ScrollLock => f.write_str("DiscriminantKeyCode::ScrollLock"),
            Self::Tab => f.write_str("DiscriminantKeyCode::Tab"),
            Self::Up => f.write_str("DiscriminantKeyCode::Up"),
        }
    }
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "wasm32",
    target_arch = "x86"
))]
#[repr(C)]
pub union KeyCode {
    Function: u8,
    Media: MediaKeyCode,
    Modifier: ModifierKeyCode,
    Scalar: core::mem::ManuallyDrop<roc_std::RocStr>,
    _sizer: [u8; 16],
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Copy, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(u8)]
pub enum ModifierKeyCode {
    IsoLevel3Shift = 0,
    IsoLevel5Shift = 1,
    LeftAlt = 2,
    LeftControl = 3,
    LeftHyper = 4,
    LeftMeta = 5,
    LeftShift = 6,
    LeftSuper = 7,
    RightAlt = 8,
    RightControl = 9,
    RightHyper = 10,
    RightMeta = 11,
    RightShift = 12,
    RightSuper = 13,
}

impl core::fmt::Debug for ModifierKeyCode {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        match self {
            Self::IsoLevel3Shift => f.write_str("ModifierKeyCode::IsoLevel3Shift"),
            Self::IsoLevel5Shift => f.write_str("ModifierKeyCode::IsoLevel5Shift"),
            Self::LeftAlt => f.write_str("ModifierKeyCode::LeftAlt"),
            Self::LeftControl => f.write_str("ModifierKeyCode::LeftControl"),
            Self::LeftHyper => f.write_str("ModifierKeyCode::LeftHyper"),
            Self::LeftMeta => f.write_str("ModifierKeyCode::LeftMeta"),
            Self::LeftShift => f.write_str("ModifierKeyCode::LeftShift"),
            Self::LeftSuper => f.write_str("ModifierKeyCode::LeftSuper"),
            Self::RightAlt => f.write_str("ModifierKeyCode::RightAlt"),
            Self::RightControl => f.write_str("ModifierKeyCode::RightControl"),
            Self::RightHyper => f.write_str("ModifierKeyCode::RightHyper"),
            Self::RightMeta => f.write_str("ModifierKeyCode::RightMeta"),
            Self::RightShift => f.write_str("ModifierKeyCode::RightShift"),
            Self::RightSuper => f.write_str("ModifierKeyCode::RightSuper"),
        }
    }
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Copy, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(u8)]
pub enum MediaKeyCode {
    FastForward = 0,
    LowerVolume = 1,
    MuteVolume = 2,
    Pause = 3,
    Play = 4,
    PlayPause = 5,
    RaiseVolume = 6,
    Record = 7,
    Reverse = 8,
    Rewind = 9,
    Stop = 10,
    TrackNext = 11,
    TrackPrevious = 12,
}

impl core::fmt::Debug for MediaKeyCode {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        match self {
            Self::FastForward => f.write_str("MediaKeyCode::FastForward"),
            Self::LowerVolume => f.write_str("MediaKeyCode::LowerVolume"),
            Self::MuteVolume => f.write_str("MediaKeyCode::MuteVolume"),
            Self::Pause => f.write_str("MediaKeyCode::Pause"),
            Self::Play => f.write_str("MediaKeyCode::Play"),
            Self::PlayPause => f.write_str("MediaKeyCode::PlayPause"),
            Self::RaiseVolume => f.write_str("MediaKeyCode::RaiseVolume"),
            Self::Record => f.write_str("MediaKeyCode::Record"),
            Self::Reverse => f.write_str("MediaKeyCode::Reverse"),
            Self::Rewind => f.write_str("MediaKeyCode::Rewind"),
            Self::Stop => f.write_str("MediaKeyCode::Stop"),
            Self::TrackNext => f.write_str("MediaKeyCode::TrackNext"),
            Self::TrackPrevious => f.write_str("MediaKeyCode::TrackPrevious"),
        }
    }
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Debug, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(C)]
struct Elem_Paragraph {
    pub f0: roc_std::RocList<roc_std::RocList<Span>>,
    pub f1: ParagraphConfig,
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Debug, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(C)]
pub struct ParagraphConfig {
    pub borderStyle: Styles,
    pub borders: roc_std::RocList<BorderModifier>,
    pub style: Styles,
    pub title: roc_std::RocStr,
    pub titleStyle: Styles,
    pub borderType: BorderType,
    pub textAlignment: Alignment,
    pub titleAlignment: Alignment,
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Copy, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(u8)]
pub enum Alignment {
    Center = 0,
    Left = 1,
    Right = 2,
}

impl core::fmt::Debug for Alignment {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        match self {
            Self::Center => f.write_str("Alignment::Center"),
            Self::Left => f.write_str("Alignment::Left"),
            Self::Right => f.write_str("Alignment::Right"),
        }
    }
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Copy, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(u8)]
pub enum BorderType {
    Double = 0,
    Plain = 1,
    Rounded = 2,
    Thick = 3,
}

impl core::fmt::Debug for BorderType {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        match self {
            Self::Double => f.write_str("BorderType::Double"),
            Self::Plain => f.write_str("BorderType::Plain"),
            Self::Rounded => f.write_str("BorderType::Rounded"),
            Self::Thick => f.write_str("BorderType::Thick"),
        }
    }
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Debug, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(C)]
pub struct Styles {
    pub modifiers: roc_std::RocList<TextModifier>,
    pub bg: Color,
    pub fg: Color,
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Copy, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(u8)]
pub enum DiscriminantColor {
    Black = 0,
    Blue = 1,
    Cyan = 2,
    DarkGray = 3,
    Gray = 4,
    Green = 5,
    LightBlue = 6,
    LightCyan = 7,
    LightGreen = 8,
    LightMagenta = 9,
    LightRed = 10,
    LightYellow = 11,
    Magenta = 12,
    None = 13,
    Red = 14,
    White = 15,
    Yellow = 16,
}

impl core::fmt::Debug for DiscriminantColor {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        match self {
            Self::Black => f.write_str("DiscriminantColor::Black"),
            Self::Blue => f.write_str("DiscriminantColor::Blue"),
            Self::Cyan => f.write_str("DiscriminantColor::Cyan"),
            Self::DarkGray => f.write_str("DiscriminantColor::DarkGray"),
            Self::Gray => f.write_str("DiscriminantColor::Gray"),
            Self::Green => f.write_str("DiscriminantColor::Green"),
            Self::LightBlue => f.write_str("DiscriminantColor::LightBlue"),
            Self::LightCyan => f.write_str("DiscriminantColor::LightCyan"),
            Self::LightGreen => f.write_str("DiscriminantColor::LightGreen"),
            Self::LightMagenta => f.write_str("DiscriminantColor::LightMagenta"),
            Self::LightRed => f.write_str("DiscriminantColor::LightRed"),
            Self::LightYellow => f.write_str("DiscriminantColor::LightYellow"),
            Self::Magenta => f.write_str("DiscriminantColor::Magenta"),
            Self::None => f.write_str("DiscriminantColor::None"),
            Self::Red => f.write_str("DiscriminantColor::Red"),
            Self::White => f.write_str("DiscriminantColor::White"),
            Self::Yellow => f.write_str("DiscriminantColor::Yellow"),
        }
    }
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[repr(C)]
pub union Color {
    _sizer: [u8; 1],
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Debug, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(C)]
struct ElemLayout {
    pub f0: roc_std::RocList<Elem>,
    pub f1: LayoutConfig,
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Debug, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(C)]
pub struct LayoutConfig {
    pub constraints: roc_std::RocList<Constraint>,
    pub hMargin: u16,
    pub vMargin: u16,
    pub direction: LayoutDirection,
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Copy, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(u8)]
pub enum LayoutDirection {
    Horizontal = 0,
    Vertical = 1,
}

impl core::fmt::Debug for LayoutDirection {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        match self {
            Self::Horizontal => f.write_str("LayoutDirection::Horizontal"),
            Self::Vertical => f.write_str("LayoutDirection::Vertical"),
        }
    }
}

#[cfg(any(
    target_arch = "arm",
    target_arch = "aarch64",
    target_arch = "wasm32",
    target_arch = "x86",
    target_arch = "x86_64"
))]
#[derive(Clone, Copy, Debug, Default, Eq, Ord, Hash, PartialEq, PartialOrd)]
#[repr(C)]
struct ConstraintRatio {
    pub f0: u32,
    pub f1: u32,
}

#[cfg(any(
    target_arch = "aarch64",
    target_arch = "x86_64"
))]
#[repr(C)]
union UnionElem {
    Layout: core::mem::ManuallyDrop<ElemLayout>,
    Paragraph: core::mem::ManuallyDrop<Elem_Paragraph>,
    _sizer: [u8; 8],
}

#[cfg(any(
    target_arch = "aarch64",
    target_arch = "x86_64"
))]
#[repr(C)]
pub union Event {
    KeyPressed: core::mem::ManuallyDrop<KeyCode>,
    Paste: core::mem::ManuallyDrop<roc_std::RocStr>,
    Resize: Bounds,
    _sizer: [u8; 40],
}

#[cfg(any(
    target_arch = "aarch64",
    target_arch = "x86_64"
))]
#[repr(C)]
pub union KeyCode {
    Function: u8,
    Media: MediaKeyCode,
    Modifier: ModifierKeyCode,
    Scalar: core::mem::ManuallyDrop<roc_std::RocStr>,
    _sizer: [u8; 32],
}

impl Elem {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    #[inline(always)]
    fn storage(&self) -> Option<&core::cell::Cell<roc_std::Storage>> {
        let mask = match std::mem::size_of::<usize>() {
            4 => 0b11,
            8 => 0b111,
            _ => unreachable!(),
        };

        // NOTE: pointer provenance is probably lost here
        let unmasked_address = (self.pointer as usize) & !mask;
        let untagged = unmasked_address as *const core::cell::Cell<roc_std::Storage>;

        if untagged.is_null() {
            None
        } else {
            unsafe {
                Some(&*untagged.sub(1))
            }
        }
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// Returns which variant this tag union holds. Note that this never includes a payload!
    pub fn discriminant(&self) -> DiscriminantElem {
        // The discriminant is stored in the unused bytes at the end of the recursive pointer
        unsafe { core::mem::transmute::<u8, DiscriminantElem>((self.pointer as u8) & 0b11) }
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// Internal helper
    fn tag_discriminant(pointer: *mut UnionElem, discriminant: DiscriminantElem) -> *mut UnionElem {
        // The discriminant is stored in the unused bytes at the end of the union pointer
        let untagged = (pointer as usize) & (!0b11 as usize);
        let tagged = untagged | (discriminant as usize);

        tagged as *mut UnionElem
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// Internal helper
    fn union_pointer(&self) -> *mut UnionElem {
        // The discriminant is stored in the unused bytes at the end of the union pointer
        ((self.pointer as usize) & (!0b11 as usize)) as *mut UnionElem
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Construct a tag named `Layout`, with the appropriate payload
    pub fn Layout(arg0: roc_std::RocList<Elem>, arg1: LayoutConfig) -> Self {
            let size = core::mem::size_of::<UnionElem>();
            let align = core::mem::align_of::<UnionElem>() as u32;

            unsafe {
                let ptr = roc_std::roc_alloc_refcounted::<UnionElem>();

                *ptr = UnionElem {
                    Layout: core::mem::ManuallyDrop::new(ElemLayout {
                    f0: arg0,
                    f1: arg1,
                })
                };

                Self {
                    pointer: Self::tag_discriminant(ptr, DiscriminantElem::Layout),
                }
            }
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// Unsafely assume the given `Elem` has a `.discriminant()` of `Layout` and convert it to `Layout`'s payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Layout`.
            pub unsafe fn into_Layout(mut self) -> (roc_std::RocList<Elem>, LayoutConfig) {
                debug_assert_eq!(self.discriminant(), DiscriminantElem::Layout);
        let payload = {
            let ptr = (self.pointer as usize & !0b11) as *mut UnionElem;
            let mut uninitialized = core::mem::MaybeUninit::uninit();
            let swapped = unsafe {
                core::mem::replace(
                    &mut (*ptr).Layout,
                    core::mem::ManuallyDrop::new(uninitialized.assume_init()),
                )
            };

            core::mem::forget(self);

            core::mem::ManuallyDrop::into_inner(swapped)
        };

        (
            payload.f0, 
            payload.f1
        )
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// Unsafely assume the given `Elem` has a `.discriminant()` of `Layout` and return its payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Layout`.
            pub unsafe fn as_Layout(&self) -> (&roc_std::RocList<Elem>, &LayoutConfig) {
                debug_assert_eq!(self.discriminant(), DiscriminantElem::Layout);
        let payload = {
            let ptr = (self.pointer as usize & !0b11) as *mut UnionElem;

            unsafe { &(*ptr).Layout }
        };

        (
            &payload.f0, 
            &payload.f1
        )
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Construct a tag named `Paragraph`, with the appropriate payload
    pub fn Paragraph(arg0: roc_std::RocList<roc_std::RocList<Span>>, arg1: ParagraphConfig) -> Self {
            let size = core::mem::size_of::<UnionElem>();
            let align = core::mem::align_of::<UnionElem>() as u32;

            unsafe {
                let ptr = roc_std::roc_alloc_refcounted::<UnionElem>();

                *ptr = UnionElem {
                    Paragraph: core::mem::ManuallyDrop::new(Elem_Paragraph {
                    f0: arg0,
                    f1: arg1,
                })
                };

                Self {
                    pointer: Self::tag_discriminant(ptr, DiscriminantElem::Paragraph),
                }
            }
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// Unsafely assume the given `Elem` has a `.discriminant()` of `Paragraph` and convert it to `Paragraph`'s payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Paragraph`.
            pub unsafe fn into_Paragraph(mut self) -> (roc_std::RocList<roc_std::RocList<Span>>, ParagraphConfig) {
                debug_assert_eq!(self.discriminant(), DiscriminantElem::Paragraph);
        let payload = {
            let ptr = (self.pointer as usize & !0b11) as *mut UnionElem;
            let mut uninitialized = core::mem::MaybeUninit::uninit();
            let swapped = unsafe {
                core::mem::replace(
                    &mut (*ptr).Paragraph,
                    core::mem::ManuallyDrop::new(uninitialized.assume_init()),
                )
            };

            core::mem::forget(self);

            core::mem::ManuallyDrop::into_inner(swapped)
        };

        (
            payload.f0, 
            payload.f1
        )
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// Unsafely assume the given `Elem` has a `.discriminant()` of `Paragraph` and return its payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Paragraph`.
            pub unsafe fn as_Paragraph(&self) -> (&roc_std::RocList<roc_std::RocList<Span>>, &ParagraphConfig) {
                debug_assert_eq!(self.discriminant(), DiscriminantElem::Paragraph);
        let payload = {
            let ptr = (self.pointer as usize & !0b11) as *mut UnionElem;

            unsafe { &(*ptr).Paragraph }
        };

        (
            &payload.f0, 
            &payload.f1
        )
    }

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// Returns which variant this tag union holds. Note that this never includes a payload!
    pub fn discriminant(&self) -> DiscriminantElem {
        // The discriminant is stored in the unused bytes at the end of the recursive pointer
        unsafe { core::mem::transmute::<u8, DiscriminantElem>((self.pointer as u8) & 0b111) }
    }

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// Internal helper
    fn tag_discriminant(pointer: *mut UnionElem, discriminant: DiscriminantElem) -> *mut UnionElem {
        // The discriminant is stored in the unused bytes at the end of the union pointer
        let untagged = (pointer as usize) & (!0b111 as usize);
        let tagged = untagged | (discriminant as usize);

        tagged as *mut UnionElem
    }

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// Internal helper
    fn union_pointer(&self) -> *mut UnionElem {
        // The discriminant is stored in the unused bytes at the end of the union pointer
        ((self.pointer as usize) & (!0b111 as usize)) as *mut UnionElem
    }

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `Elem` has a `.discriminant()` of `Layout` and convert it to `Layout`'s payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Layout`.
            pub unsafe fn into_Layout(mut self) -> (roc_std::RocList<Elem>, LayoutConfig) {
                debug_assert_eq!(self.discriminant(), DiscriminantElem::Layout);
        let payload = {
            let ptr = (self.pointer as usize & !0b111) as *mut UnionElem;
            let mut uninitialized = core::mem::MaybeUninit::uninit();
            let swapped = unsafe {
                core::mem::replace(
                    &mut (*ptr).Layout,
                    core::mem::ManuallyDrop::new(uninitialized.assume_init()),
                )
            };

            core::mem::forget(self);

            core::mem::ManuallyDrop::into_inner(swapped)
        };

        (
            payload.f0, 
            payload.f1
        )
    }

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `Elem` has a `.discriminant()` of `Layout` and return its payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Layout`.
            pub unsafe fn as_Layout(&self) -> (&roc_std::RocList<Elem>, &LayoutConfig) {
                debug_assert_eq!(self.discriminant(), DiscriminantElem::Layout);
        let payload = {
            let ptr = (self.pointer as usize & !0b111) as *mut UnionElem;

            unsafe { &(*ptr).Layout }
        };

        (
            &payload.f0, 
            &payload.f1
        )
    }

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `Elem` has a `.discriminant()` of `Paragraph` and convert it to `Paragraph`'s payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Paragraph`.
            pub unsafe fn into_Paragraph(mut self) -> (roc_std::RocList<roc_std::RocList<Span>>, ParagraphConfig) {
                debug_assert_eq!(self.discriminant(), DiscriminantElem::Paragraph);
        let payload = {
            let ptr = (self.pointer as usize & !0b111) as *mut UnionElem;
            let mut uninitialized = core::mem::MaybeUninit::uninit();
            let swapped = unsafe {
                core::mem::replace(
                    &mut (*ptr).Paragraph,
                    core::mem::ManuallyDrop::new(uninitialized.assume_init()),
                )
            };

            core::mem::forget(self);

            core::mem::ManuallyDrop::into_inner(swapped)
        };

        (
            payload.f0, 
            payload.f1
        )
    }

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `Elem` has a `.discriminant()` of `Paragraph` and return its payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Paragraph`.
            pub unsafe fn as_Paragraph(&self) -> (&roc_std::RocList<roc_std::RocList<Span>>, &ParagraphConfig) {
                debug_assert_eq!(self.discriminant(), DiscriminantElem::Paragraph);
        let payload = {
            let ptr = (self.pointer as usize & !0b111) as *mut UnionElem;

            unsafe { &(*ptr).Paragraph }
        };

        (
            &payload.f0, 
            &payload.f1
        )
    }
}

impl Drop for Elem {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn drop(&mut self) {
        // We only need to do any work if there's actually a heap-allocated payload.
        if let Some(storage) = self.storage() {
            let mut new_storage = storage.get();

            // Decrement the refcount
            let needs_dealloc = !new_storage.is_readonly() && new_storage.decrease();

            if needs_dealloc {
                // Drop the payload first.
                            match self.discriminant() {
                DiscriminantElem::Layout => unsafe { core::mem::ManuallyDrop::drop(&mut (&mut *self.union_pointer()).Layout) },
                DiscriminantElem::Paragraph => unsafe { core::mem::ManuallyDrop::drop(&mut (&mut *self.union_pointer()).Paragraph) },
            }


                // Dealloc the pointer
                let alignment = core::mem::align_of::<Self>().max(core::mem::align_of::<roc_std::Storage>());

                unsafe { crate::roc::roc_dealloc(storage.as_ptr().cast(), alignment as u32); }
            } else {
                // Write the storage back.
                storage.set(new_storage);
            }
        }
    }
}

impl Eq for Elem {}

impl PartialEq for Elem {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn eq(&self, other: &Self) -> bool {
            if self.discriminant() != other.discriminant() {
                return false;
            }

            unsafe {
            match self.discriminant() {
                DiscriminantElem::Layout => (&*self.union_pointer()).Layout == (&*other.union_pointer()).Layout,
                DiscriminantElem::Paragraph => (&*self.union_pointer()).Paragraph == (&*other.union_pointer()).Paragraph,
            }
        }
    }
}

impl PartialOrd for Elem {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {
        match self.discriminant().partial_cmp(&other.discriminant()) {
            Some(core::cmp::Ordering::Equal) => {}
            not_eq => return not_eq,
        }

        unsafe {
            match self.discriminant() {
                DiscriminantElem::Layout => (&*self.union_pointer()).Layout.partial_cmp(&(&*other.union_pointer()).Layout),
                DiscriminantElem::Paragraph => (&*self.union_pointer()).Paragraph.partial_cmp(&(&*other.union_pointer()).Paragraph),
            }
        }
    }
}

impl Ord for Elem {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn cmp(&self, other: &Self) -> core::cmp::Ordering {
            match self.discriminant().cmp(&other.discriminant()) {
                core::cmp::Ordering::Equal => {}
                not_eq => return not_eq,
            }

            unsafe {
            match self.discriminant() {
                DiscriminantElem::Layout => (&*self.union_pointer()).Layout.cmp(&(&*other.union_pointer()).Layout),
                DiscriminantElem::Paragraph => (&*self.union_pointer()).Paragraph.cmp(&(&*other.union_pointer()).Paragraph),
            }
        }
    }
}

impl Clone for Elem {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn clone(&self) -> Self {
        if let Some(storage) = self.storage() {
            let mut new_storage = storage.get();
            if !new_storage.is_readonly() {
                new_storage.increment_reference_count();
                storage.set(new_storage);
            }
        }

        Self {
            pointer: self.pointer
        }
    }
}

impl core::hash::Hash for Elem {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn hash<H: core::hash::Hasher>(&self, state: &mut H) {        match self.discriminant() {
            DiscriminantElem::Layout => unsafe {
                    DiscriminantElem::Layout.hash(state);
                    (&*self.union_pointer()).Layout.hash(state);
                },
            DiscriminantElem::Paragraph => unsafe {
                    DiscriminantElem::Paragraph.hash(state);
                    (&*self.union_pointer()).Paragraph.hash(state);
                },
        }
    }
}

impl core::fmt::Debug for Elem {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str("Elem::")?;

        unsafe {
            match self.discriminant() {
                DiscriminantElem::Layout => f.debug_tuple("Layout")
        .field(&(&*(&*self.union_pointer()).Layout).f0)
.field(&(&*(&*self.union_pointer()).Layout).f1)
        .finish(),
                DiscriminantElem::Paragraph => f.debug_tuple("Paragraph")
        .field(&(&*(&*self.union_pointer()).Paragraph).f0)
.field(&(&*(&*self.union_pointer()).Paragraph).f1)
        .finish(),
            }
        }
    }
}

impl Event {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// Returns which variant this tag union holds. Note that this never includes a payload!
    pub fn discriminant(&self) -> discriminant_Event {
        unsafe {
            let bytes = core::mem::transmute::<&Self, &[u8; core::mem::size_of::<Self>()]>(self);

            core::mem::transmute::<u8, discriminant_Event>(*bytes.as_ptr().add(16))
        }
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// Internal helper
    fn set_discriminant(&mut self, discriminant: discriminant_Event) {
        let discriminant_ptr: *mut discriminant_Event = (self as *mut Event).cast();

        unsafe {
            *(discriminant_ptr.add(16)) = discriminant;
        }
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// A tag named FocusGained, which has no payload.
    pub const FocusGained: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<Event>()];

        bytes[16] = discriminant_Event::FocusGained as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<Event>()], Event>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the FocusGained tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_FocusGained(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the FocusGained tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_FocusGained(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// A tag named FocusLost, which has no payload.
    pub const FocusLost: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<Event>()];

        bytes[16] = discriminant_Event::FocusLost as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<Event>()], Event>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the FocusLost tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_FocusLost(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the FocusLost tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_FocusLost(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Construct a tag named `KeyPressed`, with the appropriate payload
    pub fn KeyPressed(arg: KeyCode) -> Self {
            let mut answer = Self {
                KeyPressed: core::mem::ManuallyDrop::new(arg)
            };

            answer.set_discriminant(discriminant_Event::KeyPressed);

            answer
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `Event` has a `.discriminant()` of `KeyPressed` and convert it to `KeyPressed`'s payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `KeyPressed`.
            pub unsafe fn into_KeyPressed(mut self) -> KeyCode {
                debug_assert_eq!(self.discriminant(), discriminant_Event::KeyPressed);
        let payload = {
            let mut uninitialized = core::mem::MaybeUninit::uninit();
            let swapped = unsafe {
                core::mem::replace(
                    &mut self.KeyPressed,
                    core::mem::ManuallyDrop::new(uninitialized.assume_init()),
                )
            };

            core::mem::forget(self);

            core::mem::ManuallyDrop::into_inner(swapped)
        };

        payload
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `Event` has a `.discriminant()` of `KeyPressed` and return its payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `KeyPressed`.
            pub unsafe fn as_KeyPressed(&self) -> &KeyCode {
                debug_assert_eq!(self.discriminant(), discriminant_Event::KeyPressed);
        let payload = &self.KeyPressed;

        &payload
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Construct a tag named `Paste`, with the appropriate payload
    pub fn Paste(arg: roc_std::RocStr) -> Self {
            let mut answer = Self {
                Paste: core::mem::ManuallyDrop::new(arg)
            };

            answer.set_discriminant(discriminant_Event::Paste);

            answer
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `Event` has a `.discriminant()` of `Paste` and convert it to `Paste`'s payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Paste`.
            pub unsafe fn into_Paste(mut self) -> roc_std::RocStr {
                debug_assert_eq!(self.discriminant(), discriminant_Event::Paste);
        let payload = {
            let mut uninitialized = core::mem::MaybeUninit::uninit();
            let swapped = unsafe {
                core::mem::replace(
                    &mut self.Paste,
                    core::mem::ManuallyDrop::new(uninitialized.assume_init()),
                )
            };

            core::mem::forget(self);

            core::mem::ManuallyDrop::into_inner(swapped)
        };

        payload
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `Event` has a `.discriminant()` of `Paste` and return its payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Paste`.
            pub unsafe fn as_Paste(&self) -> &roc_std::RocStr {
                debug_assert_eq!(self.discriminant(), discriminant_Event::Paste);
        let payload = &self.Paste;

        &payload
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Construct a tag named `Resize`, with the appropriate payload
    pub fn Resize(arg0: Bounds) -> Self {
            let mut answer = Self {
                Resize: arg0
            };

            answer.set_discriminant(discriminant_Event::Resize);

            answer
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `Event` has a `.discriminant()` of `Resize` and convert it to `Resize`'s payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Resize`.
            pub unsafe fn into_Resize(self) -> Bounds {
                debug_assert_eq!(self.discriminant(), discriminant_Event::Resize);
        let payload = self.Resize;

        
        payload
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `Event` has a `.discriminant()` of `Resize` and return its payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Resize`.
            pub unsafe fn as_Resize(&self) -> &Bounds {
                debug_assert_eq!(self.discriminant(), discriminant_Event::Resize);
        let payload = &self.Resize;

        
        payload
    }

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// Returns which variant this tag union holds. Note that this never includes a payload!
    pub fn discriminant(&self) -> discriminant_Event {
        unsafe {
            let bytes = core::mem::transmute::<&Self, &[u8; core::mem::size_of::<Self>()]>(self);

            core::mem::transmute::<u8, discriminant_Event>(*bytes.as_ptr().add(32))
        }
    }

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// Internal helper
    fn set_discriminant(&mut self, discriminant: discriminant_Event) {
        let discriminant_ptr: *mut discriminant_Event = (self as *mut Event).cast();

        unsafe {
            *(discriminant_ptr.add(32)) = discriminant;
        }
    }

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// A tag named FocusGained, which has no payload.
    pub const FocusGained: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<Event>()];

        bytes[32] = discriminant_Event::FocusGained as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<Event>()], Event>(bytes)
    };

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// A tag named FocusLost, which has no payload.
    pub const FocusLost: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<Event>()];

        bytes[32] = discriminant_Event::FocusLost as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<Event>()], Event>(bytes)
    };
}

impl Drop for Event {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn drop(&mut self) {
        // Drop the payloads
                    match self.discriminant() {
                discriminant_Event::FocusGained => {}
                discriminant_Event::FocusLost => {}
                discriminant_Event::KeyPressed => unsafe { core::mem::ManuallyDrop::drop(&mut self.KeyPressed) },
                discriminant_Event::Paste => unsafe { core::mem::ManuallyDrop::drop(&mut self.Paste) },
                discriminant_Event::Resize => {}
            }

    }
}

impl Eq for Event {}

impl PartialEq for Event {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn eq(&self, other: &Self) -> bool {
            if self.discriminant() != other.discriminant() {
                return false;
            }

            unsafe {
            match self.discriminant() {
                discriminant_Event::FocusGained => true,
                discriminant_Event::FocusLost => true,
                discriminant_Event::KeyPressed => self.KeyPressed == other.KeyPressed,
                discriminant_Event::Paste => self.Paste == other.Paste,
                discriminant_Event::Resize => self.Resize == other.Resize,
            }
        }
    }
}

impl PartialOrd for Event {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {
        match self.discriminant().partial_cmp(&other.discriminant()) {
            Some(core::cmp::Ordering::Equal) => {}
            not_eq => return not_eq,
        }

        unsafe {
            match self.discriminant() {
                discriminant_Event::FocusGained => Some(core::cmp::Ordering::Equal),
                discriminant_Event::FocusLost => Some(core::cmp::Ordering::Equal),
                discriminant_Event::KeyPressed => self.KeyPressed.partial_cmp(&other.KeyPressed),
                discriminant_Event::Paste => self.Paste.partial_cmp(&other.Paste),
                discriminant_Event::Resize => self.Resize.partial_cmp(&other.Resize),
            }
        }
    }
}

impl Ord for Event {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn cmp(&self, other: &Self) -> core::cmp::Ordering {
            match self.discriminant().cmp(&other.discriminant()) {
                core::cmp::Ordering::Equal => {}
                not_eq => return not_eq,
            }

            unsafe {
            match self.discriminant() {
                discriminant_Event::FocusGained => core::cmp::Ordering::Equal,
                discriminant_Event::FocusLost => core::cmp::Ordering::Equal,
                discriminant_Event::KeyPressed => self.KeyPressed.cmp(&other.KeyPressed),
                discriminant_Event::Paste => self.Paste.cmp(&other.Paste),
                discriminant_Event::Resize => self.Resize.cmp(&other.Resize),
            }
        }
    }
}

impl Clone for Event {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn clone(&self) -> Self {
        let mut answer = unsafe {
            match self.discriminant() {
                discriminant_Event::FocusGained => core::mem::transmute::<
                    core::mem::MaybeUninit<Event>,
                    Event,
                >(core::mem::MaybeUninit::uninit()),
                discriminant_Event::FocusLost => core::mem::transmute::<
                    core::mem::MaybeUninit<Event>,
                    Event,
                >(core::mem::MaybeUninit::uninit()),
                discriminant_Event::KeyPressed => Self {
                    KeyPressed: self.KeyPressed.clone(),
                },
                discriminant_Event::Paste => Self {
                    Paste: self.Paste.clone(),
                },
                discriminant_Event::Resize => Self {
                    Resize: self.Resize.clone(),
                },
            }

        };

        answer.set_discriminant(self.discriminant());

        answer
    }
}

impl core::hash::Hash for Event {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn hash<H: core::hash::Hasher>(&self, state: &mut H) {        match self.discriminant() {
            discriminant_Event::FocusGained => discriminant_Event::FocusGained.hash(state),
            discriminant_Event::FocusLost => discriminant_Event::FocusLost.hash(state),
            discriminant_Event::KeyPressed => unsafe {
                    discriminant_Event::KeyPressed.hash(state);
                    self.KeyPressed.hash(state);
                },
            discriminant_Event::Paste => unsafe {
                    discriminant_Event::Paste.hash(state);
                    self.Paste.hash(state);
                },
            discriminant_Event::Resize => unsafe {
                    discriminant_Event::Resize.hash(state);
                    self.Resize.hash(state);
                },
        }
    }
}

impl core::fmt::Debug for Event {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str("Event::")?;

        unsafe {
            match self.discriminant() {
                discriminant_Event::FocusGained => f.write_str("FocusGained"),
                discriminant_Event::FocusLost => f.write_str("FocusLost"),
                discriminant_Event::KeyPressed => f.debug_tuple("KeyPressed")
        .field(&*self.KeyPressed)
        .finish(),
                discriminant_Event::Paste => f.debug_tuple("Paste")
        .field(&*self.Paste)
        .finish(),
                discriminant_Event::Resize => f.debug_tuple("Resize")
        .field(&self.Resize)
        .finish(),
            }
        }
    }
}

impl Constraint {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Returns which variant this tag union holds. Note that this never includes a payload!
    pub fn discriminant(&self) -> DiscriminantConstraint {
        unsafe {
            let bytes = core::mem::transmute::<&Self, &[u8; core::mem::size_of::<Self>()]>(self);

            core::mem::transmute::<u8, DiscriminantConstraint>(*bytes.as_ptr().add(8))
        }
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Internal helper
    fn set_discriminant(&mut self, discriminant: DiscriminantConstraint) {
        let discriminant_ptr: *mut DiscriminantConstraint = (self as *mut Constraint).cast();

        unsafe {
            *(discriminant_ptr.add(8)) = discriminant;
        }
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Construct a tag named `Length`, with the appropriate payload
    pub fn Length(arg: u16) -> Self {
            let mut answer = Self {
                Length: arg
            };

            answer.set_discriminant(DiscriminantConstraint::Length);

            answer
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `Constraint` has a `.discriminant()` of `Length` and convert it to `Length`'s payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Length`.
            pub unsafe fn into_Length(self) -> u16 {
                debug_assert_eq!(self.discriminant(), DiscriminantConstraint::Length);
        let payload = self.Length;

        payload
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `Constraint` has a `.discriminant()` of `Length` and return its payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Length`.
            pub unsafe fn as_Length(&self) -> &u16 {
                debug_assert_eq!(self.discriminant(), DiscriminantConstraint::Length);
        let payload = &self.Length;

        &payload
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Construct a tag named `Max`, with the appropriate payload
    pub fn Max(arg: u16) -> Self {
            let mut answer = Self {
                Max: arg
            };

            answer.set_discriminant(DiscriminantConstraint::Max);

            answer
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `Constraint` has a `.discriminant()` of `Max` and convert it to `Max`'s payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Max`.
            pub unsafe fn into_Max(self) -> u16 {
                debug_assert_eq!(self.discriminant(), DiscriminantConstraint::Max);
        let payload = self.Max;

        payload
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `Constraint` has a `.discriminant()` of `Max` and return its payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Max`.
            pub unsafe fn as_Max(&self) -> &u16 {
                debug_assert_eq!(self.discriminant(), DiscriminantConstraint::Max);
        let payload = &self.Max;

        &payload
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Construct a tag named `Min`, with the appropriate payload
    pub fn Min(arg: u16) -> Self {
            let mut answer = Self {
                Min: arg
            };

            answer.set_discriminant(DiscriminantConstraint::Min);

            answer
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `Constraint` has a `.discriminant()` of `Min` and convert it to `Min`'s payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Min`.
            pub unsafe fn into_Min(self) -> u16 {
                debug_assert_eq!(self.discriminant(), DiscriminantConstraint::Min);
        let payload = self.Min;

        payload
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `Constraint` has a `.discriminant()` of `Min` and return its payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Min`.
            pub unsafe fn as_Min(&self) -> &u16 {
                debug_assert_eq!(self.discriminant(), DiscriminantConstraint::Min);
        let payload = &self.Min;

        &payload
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Construct a tag named `Percentage`, with the appropriate payload
    pub fn Percentage(arg: u16) -> Self {
            let mut answer = Self {
                Percentage: arg
            };

            answer.set_discriminant(DiscriminantConstraint::Percentage);

            answer
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `Constraint` has a `.discriminant()` of `Percentage` and convert it to `Percentage`'s payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Percentage`.
            pub unsafe fn into_Percentage(self) -> u16 {
                debug_assert_eq!(self.discriminant(), DiscriminantConstraint::Percentage);
        let payload = self.Percentage;

        payload
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `Constraint` has a `.discriminant()` of `Percentage` and return its payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Percentage`.
            pub unsafe fn as_Percentage(&self) -> &u16 {
                debug_assert_eq!(self.discriminant(), DiscriminantConstraint::Percentage);
        let payload = &self.Percentage;

        &payload
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Construct a tag named `Ratio`, with the appropriate payload
    pub fn Ratio(arg0: u32, arg1: u32) -> Self {
            let mut answer = Self {
                Ratio: ConstraintRatio {
                    f0: arg0,
                    f1: arg1,
                }
            };

            answer.set_discriminant(DiscriminantConstraint::Ratio);

            answer
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `Constraint` has a `.discriminant()` of `Ratio` and convert it to `Ratio`'s payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Ratio`.
            pub unsafe fn into_Ratio(self) -> (u32, u32) {
                debug_assert_eq!(self.discriminant(), DiscriminantConstraint::Ratio);
        let payload = self.Ratio;

        (
            payload.f0, 
            payload.f1
        )
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `Constraint` has a `.discriminant()` of `Ratio` and return its payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Ratio`.
            pub unsafe fn as_Ratio(&self) -> (&u32, &u32) {
                debug_assert_eq!(self.discriminant(), DiscriminantConstraint::Ratio);
        let payload = &self.Ratio;

        (
            &payload.f0, 
            &payload.f1
        )
    }
}

impl Eq for Constraint {}

impl PartialEq for Constraint {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn eq(&self, other: &Self) -> bool {
            if self.discriminant() != other.discriminant() {
                return false;
            }

            unsafe {
            match self.discriminant() {
                DiscriminantConstraint::Length => self.Length == other.Length,
                DiscriminantConstraint::Max => self.Max == other.Max,
                DiscriminantConstraint::Min => self.Min == other.Min,
                DiscriminantConstraint::Percentage => self.Percentage == other.Percentage,
                DiscriminantConstraint::Ratio => self.Ratio == other.Ratio,
            }
        }
    }
}

impl PartialOrd for Constraint {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {
        match self.discriminant().partial_cmp(&other.discriminant()) {
            Some(core::cmp::Ordering::Equal) => {}
            not_eq => return not_eq,
        }

        unsafe {
            match self.discriminant() {
                DiscriminantConstraint::Length => self.Length.partial_cmp(&other.Length),
                DiscriminantConstraint::Max => self.Max.partial_cmp(&other.Max),
                DiscriminantConstraint::Min => self.Min.partial_cmp(&other.Min),
                DiscriminantConstraint::Percentage => self.Percentage.partial_cmp(&other.Percentage),
                DiscriminantConstraint::Ratio => self.Ratio.partial_cmp(&other.Ratio),
            }
        }
    }
}

impl Ord for Constraint {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn cmp(&self, other: &Self) -> core::cmp::Ordering {
            match self.discriminant().cmp(&other.discriminant()) {
                core::cmp::Ordering::Equal => {}
                not_eq => return not_eq,
            }

            unsafe {
            match self.discriminant() {
                DiscriminantConstraint::Length => self.Length.cmp(&other.Length),
                DiscriminantConstraint::Max => self.Max.cmp(&other.Max),
                DiscriminantConstraint::Min => self.Min.cmp(&other.Min),
                DiscriminantConstraint::Percentage => self.Percentage.cmp(&other.Percentage),
                DiscriminantConstraint::Ratio => self.Ratio.cmp(&other.Ratio),
            }
        }
    }
}

impl Copy for Constraint {}

impl Clone for Constraint {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn clone(&self) -> Self {
        let mut answer = unsafe {
            match self.discriminant() {
                DiscriminantConstraint::Length => Self {
                    Length: self.Length.clone(),
                },
                DiscriminantConstraint::Max => Self {
                    Max: self.Max.clone(),
                },
                DiscriminantConstraint::Min => Self {
                    Min: self.Min.clone(),
                },
                DiscriminantConstraint::Percentage => Self {
                    Percentage: self.Percentage.clone(),
                },
                DiscriminantConstraint::Ratio => Self {
                    Ratio: self.Ratio.clone(),
                },
            }

        };

        answer.set_discriminant(self.discriminant());

        answer
    }
}

impl core::hash::Hash for Constraint {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn hash<H: core::hash::Hasher>(&self, state: &mut H) {        match self.discriminant() {
            DiscriminantConstraint::Length => unsafe {
                    DiscriminantConstraint::Length.hash(state);
                    self.Length.hash(state);
                },
            DiscriminantConstraint::Max => unsafe {
                    DiscriminantConstraint::Max.hash(state);
                    self.Max.hash(state);
                },
            DiscriminantConstraint::Min => unsafe {
                    DiscriminantConstraint::Min.hash(state);
                    self.Min.hash(state);
                },
            DiscriminantConstraint::Percentage => unsafe {
                    DiscriminantConstraint::Percentage.hash(state);
                    self.Percentage.hash(state);
                },
            DiscriminantConstraint::Ratio => unsafe {
                    DiscriminantConstraint::Ratio.hash(state);
                    self.Ratio.hash(state);
                },
        }
    }
}

impl core::fmt::Debug for Constraint {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str("Constraint::")?;

        unsafe {
            match self.discriminant() {
                DiscriminantConstraint::Length => f.debug_tuple("Length")
        .field(&self.Length)
        .finish(),
                DiscriminantConstraint::Max => f.debug_tuple("Max")
        .field(&self.Max)
        .finish(),
                DiscriminantConstraint::Min => f.debug_tuple("Min")
        .field(&self.Min)
        .finish(),
                DiscriminantConstraint::Percentage => f.debug_tuple("Percentage")
        .field(&self.Percentage)
        .finish(),
                DiscriminantConstraint::Ratio => f.debug_tuple("Ratio")
        .field(&(&self.Ratio).f0)
.field(&(&self.Ratio).f1)
        .finish(),
            }
        }
    }
}

impl KeyCode {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// Returns which variant this tag union holds. Note that this never includes a payload!
    pub fn discriminant(&self) -> DiscriminantKeyCode {
        unsafe {
            let bytes = core::mem::transmute::<&Self, &[u8; core::mem::size_of::<Self>()]>(self);

            core::mem::transmute::<u8, DiscriminantKeyCode>(*bytes.as_ptr().add(12))
        }
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// Internal helper
    fn set_discriminant(&mut self, discriminant: DiscriminantKeyCode) {
        let discriminant_ptr: *mut DiscriminantKeyCode = (self as *mut KeyCode).cast();

        unsafe {
            *(discriminant_ptr.add(12)) = discriminant;
        }
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// A tag named BackTab, which has no payload.
    pub const BackTab: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[12] = DiscriminantKeyCode::BackTab as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the BackTab tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_BackTab(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the BackTab tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_BackTab(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// A tag named Backspace, which has no payload.
    pub const Backspace: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[12] = DiscriminantKeyCode::Backspace as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the Backspace tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_Backspace(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the Backspace tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_Backspace(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// A tag named CapsLock, which has no payload.
    pub const CapsLock: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[12] = DiscriminantKeyCode::CapsLock as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the CapsLock tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_CapsLock(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the CapsLock tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_CapsLock(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// A tag named Delete, which has no payload.
    pub const Delete: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[12] = DiscriminantKeyCode::Delete as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the Delete tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_Delete(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the Delete tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_Delete(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// A tag named Down, which has no payload.
    pub const Down: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[12] = DiscriminantKeyCode::Down as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the Down tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_Down(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the Down tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_Down(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// A tag named End, which has no payload.
    pub const End: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[12] = DiscriminantKeyCode::End as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the End tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_End(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the End tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_End(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// A tag named Enter, which has no payload.
    pub const Enter: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[12] = DiscriminantKeyCode::Enter as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the Enter tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_Enter(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the Enter tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_Enter(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// A tag named Esc, which has no payload.
    pub const Esc: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[12] = DiscriminantKeyCode::Esc as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the Esc tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_Esc(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the Esc tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_Esc(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Construct a tag named `Function`, with the appropriate payload
    pub fn Function(arg: u8) -> Self {
            let mut answer = Self {
                Function: arg
            };

            answer.set_discriminant(DiscriminantKeyCode::Function);

            answer
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `KeyCode` has a `.discriminant()` of `Function` and convert it to `Function`'s payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Function`.
            pub unsafe fn into_Function(self) -> u8 {
                debug_assert_eq!(self.discriminant(), DiscriminantKeyCode::Function);
        let payload = self.Function;

        payload
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `KeyCode` has a `.discriminant()` of `Function` and return its payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Function`.
            pub unsafe fn as_Function(&self) -> &u8 {
                debug_assert_eq!(self.discriminant(), DiscriminantKeyCode::Function);
        let payload = &self.Function;

        &payload
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// A tag named Home, which has no payload.
    pub const Home: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[12] = DiscriminantKeyCode::Home as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the Home tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_Home(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the Home tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_Home(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// A tag named Insert, which has no payload.
    pub const Insert: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[12] = DiscriminantKeyCode::Insert as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the Insert tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_Insert(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the Insert tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_Insert(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// A tag named KeypadBegin, which has no payload.
    pub const KeypadBegin: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[12] = DiscriminantKeyCode::KeypadBegin as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the KeypadBegin tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_KeypadBegin(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the KeypadBegin tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_KeypadBegin(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// A tag named Left, which has no payload.
    pub const Left: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[12] = DiscriminantKeyCode::Left as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the Left tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_Left(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the Left tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_Left(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Construct a tag named `Media`, with the appropriate payload
    pub fn Media(arg: MediaKeyCode) -> Self {
            let mut answer = Self {
                Media: arg
            };

            answer.set_discriminant(DiscriminantKeyCode::Media);

            answer
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `KeyCode` has a `.discriminant()` of `Media` and convert it to `Media`'s payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Media`.
            pub unsafe fn into_Media(self) -> MediaKeyCode {
                debug_assert_eq!(self.discriminant(), DiscriminantKeyCode::Media);
        let payload = self.Media;

        payload
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `KeyCode` has a `.discriminant()` of `Media` and return its payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Media`.
            pub unsafe fn as_Media(&self) -> &MediaKeyCode {
                debug_assert_eq!(self.discriminant(), DiscriminantKeyCode::Media);
        let payload = &self.Media;

        &payload
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// A tag named Menu, which has no payload.
    pub const Menu: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[12] = DiscriminantKeyCode::Menu as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the Menu tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_Menu(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the Menu tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_Menu(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Construct a tag named `Modifier`, with the appropriate payload
    pub fn Modifier(arg: ModifierKeyCode) -> Self {
            let mut answer = Self {
                Modifier: arg
            };

            answer.set_discriminant(DiscriminantKeyCode::Modifier);

            answer
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `KeyCode` has a `.discriminant()` of `Modifier` and convert it to `Modifier`'s payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Modifier`.
            pub unsafe fn into_Modifier(self) -> ModifierKeyCode {
                debug_assert_eq!(self.discriminant(), DiscriminantKeyCode::Modifier);
        let payload = self.Modifier;

        payload
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `KeyCode` has a `.discriminant()` of `Modifier` and return its payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Modifier`.
            pub unsafe fn as_Modifier(&self) -> &ModifierKeyCode {
                debug_assert_eq!(self.discriminant(), DiscriminantKeyCode::Modifier);
        let payload = &self.Modifier;

        &payload
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// A tag named Null, which has no payload.
    pub const Null: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[12] = DiscriminantKeyCode::Null as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the Null tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_Null(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the Null tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_Null(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// A tag named NumLock, which has no payload.
    pub const NumLock: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[12] = DiscriminantKeyCode::NumLock as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the NumLock tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_NumLock(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the NumLock tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_NumLock(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// A tag named PageDown, which has no payload.
    pub const PageDown: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[12] = DiscriminantKeyCode::PageDown as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the PageDown tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_PageDown(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the PageDown tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_PageDown(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// A tag named PageUp, which has no payload.
    pub const PageUp: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[12] = DiscriminantKeyCode::PageUp as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the PageUp tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_PageUp(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the PageUp tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_PageUp(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// A tag named Pause, which has no payload.
    pub const Pause: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[12] = DiscriminantKeyCode::Pause as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the Pause tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_Pause(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the Pause tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_Pause(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// A tag named PrintScreen, which has no payload.
    pub const PrintScreen: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[12] = DiscriminantKeyCode::PrintScreen as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the PrintScreen tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_PrintScreen(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the PrintScreen tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_PrintScreen(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// A tag named Right, which has no payload.
    pub const Right: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[12] = DiscriminantKeyCode::Right as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the Right tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_Right(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the Right tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_Right(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Construct a tag named `Scalar`, with the appropriate payload
    pub fn Scalar(arg: roc_std::RocStr) -> Self {
            let mut answer = Self {
                Scalar: core::mem::ManuallyDrop::new(arg)
            };

            answer.set_discriminant(DiscriminantKeyCode::Scalar);

            answer
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `KeyCode` has a `.discriminant()` of `Scalar` and convert it to `Scalar`'s payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Scalar`.
            pub unsafe fn into_Scalar(mut self) -> roc_std::RocStr {
                debug_assert_eq!(self.discriminant(), DiscriminantKeyCode::Scalar);
        let payload = {
            let mut uninitialized = core::mem::MaybeUninit::uninit();
            let swapped = unsafe {
                core::mem::replace(
                    &mut self.Scalar,
                    core::mem::ManuallyDrop::new(uninitialized.assume_init()),
                )
            };

            core::mem::forget(self);

            core::mem::ManuallyDrop::into_inner(swapped)
        };

        payload
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Unsafely assume the given `KeyCode` has a `.discriminant()` of `Scalar` and return its payload.
            /// (Always examine `.discriminant()` first to make sure this is the correct variant!)
            /// Panics in debug builds if the `.discriminant()` doesn't return `Scalar`.
            pub unsafe fn as_Scalar(&self) -> &roc_std::RocStr {
                debug_assert_eq!(self.discriminant(), DiscriminantKeyCode::Scalar);
        let payload = &self.Scalar;

        &payload
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// A tag named ScrollLock, which has no payload.
    pub const ScrollLock: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[12] = DiscriminantKeyCode::ScrollLock as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the ScrollLock tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_ScrollLock(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the ScrollLock tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_ScrollLock(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// A tag named Tab, which has no payload.
    pub const Tab: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[12] = DiscriminantKeyCode::Tab as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the Tab tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_Tab(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the Tab tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_Tab(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "wasm32",
        target_arch = "x86"
    ))]
    /// A tag named Up, which has no payload.
    pub const Up: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[12] = DiscriminantKeyCode::Up as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the Up tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_Up(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the Up tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_Up(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// Returns which variant this tag union holds. Note that this never includes a payload!
    pub fn discriminant(&self) -> DiscriminantKeyCode {
        unsafe {
            let bytes = core::mem::transmute::<&Self, &[u8; core::mem::size_of::<Self>()]>(self);

            core::mem::transmute::<u8, DiscriminantKeyCode>(*bytes.as_ptr().add(24))
        }
    }

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// Internal helper
    fn set_discriminant(&mut self, discriminant: DiscriminantKeyCode) {
        let discriminant_ptr: *mut DiscriminantKeyCode = (self as *mut KeyCode).cast();

        unsafe {
            *(discriminant_ptr.add(24)) = discriminant;
        }
    }

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// A tag named BackTab, which has no payload.
    pub const BackTab: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[24] = DiscriminantKeyCode::BackTab as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// A tag named Backspace, which has no payload.
    pub const Backspace: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[24] = DiscriminantKeyCode::Backspace as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// A tag named CapsLock, which has no payload.
    pub const CapsLock: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[24] = DiscriminantKeyCode::CapsLock as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// A tag named Delete, which has no payload.
    pub const Delete: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[24] = DiscriminantKeyCode::Delete as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// A tag named Down, which has no payload.
    pub const Down: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[24] = DiscriminantKeyCode::Down as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// A tag named End, which has no payload.
    pub const End: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[24] = DiscriminantKeyCode::End as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// A tag named Enter, which has no payload.
    pub const Enter: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[24] = DiscriminantKeyCode::Enter as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// A tag named Esc, which has no payload.
    pub const Esc: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[24] = DiscriminantKeyCode::Esc as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// A tag named Home, which has no payload.
    pub const Home: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[24] = DiscriminantKeyCode::Home as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// A tag named Insert, which has no payload.
    pub const Insert: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[24] = DiscriminantKeyCode::Insert as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// A tag named KeypadBegin, which has no payload.
    pub const KeypadBegin: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[24] = DiscriminantKeyCode::KeypadBegin as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// A tag named Left, which has no payload.
    pub const Left: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[24] = DiscriminantKeyCode::Left as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// A tag named Menu, which has no payload.
    pub const Menu: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[24] = DiscriminantKeyCode::Menu as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// A tag named Null, which has no payload.
    pub const Null: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[24] = DiscriminantKeyCode::Null as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// A tag named NumLock, which has no payload.
    pub const NumLock: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[24] = DiscriminantKeyCode::NumLock as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// A tag named PageDown, which has no payload.
    pub const PageDown: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[24] = DiscriminantKeyCode::PageDown as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// A tag named PageUp, which has no payload.
    pub const PageUp: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[24] = DiscriminantKeyCode::PageUp as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// A tag named Pause, which has no payload.
    pub const Pause: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[24] = DiscriminantKeyCode::Pause as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// A tag named PrintScreen, which has no payload.
    pub const PrintScreen: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[24] = DiscriminantKeyCode::PrintScreen as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// A tag named Right, which has no payload.
    pub const Right: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[24] = DiscriminantKeyCode::Right as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// A tag named ScrollLock, which has no payload.
    pub const ScrollLock: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[24] = DiscriminantKeyCode::ScrollLock as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// A tag named Tab, which has no payload.
    pub const Tab: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[24] = DiscriminantKeyCode::Tab as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };

    #[cfg(any(
        target_arch = "aarch64",
        target_arch = "x86_64"
    ))]
    /// A tag named Up, which has no payload.
    pub const Up: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<KeyCode>()];

        bytes[24] = DiscriminantKeyCode::Up as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<KeyCode>()], KeyCode>(bytes)
    };
}

impl Drop for KeyCode {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn drop(&mut self) {
        // Drop the payloads
                    match self.discriminant() {
                DiscriminantKeyCode::BackTab => {}
                DiscriminantKeyCode::Backspace => {}
                DiscriminantKeyCode::CapsLock => {}
                DiscriminantKeyCode::Delete => {}
                DiscriminantKeyCode::Down => {}
                DiscriminantKeyCode::End => {}
                DiscriminantKeyCode::Enter => {}
                DiscriminantKeyCode::Esc => {}
                DiscriminantKeyCode::Function => {}
                DiscriminantKeyCode::Home => {}
                DiscriminantKeyCode::Insert => {}
                DiscriminantKeyCode::KeypadBegin => {}
                DiscriminantKeyCode::Left => {}
                DiscriminantKeyCode::Media => {}
                DiscriminantKeyCode::Menu => {}
                DiscriminantKeyCode::Modifier => {}
                DiscriminantKeyCode::Null => {}
                DiscriminantKeyCode::NumLock => {}
                DiscriminantKeyCode::PageDown => {}
                DiscriminantKeyCode::PageUp => {}
                DiscriminantKeyCode::Pause => {}
                DiscriminantKeyCode::PrintScreen => {}
                DiscriminantKeyCode::Right => {}
                DiscriminantKeyCode::Scalar => unsafe { core::mem::ManuallyDrop::drop(&mut self.Scalar) },
                DiscriminantKeyCode::ScrollLock => {}
                DiscriminantKeyCode::Tab => {}
                DiscriminantKeyCode::Up => {}
            }

    }
}

impl Eq for KeyCode {}

impl PartialEq for KeyCode {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn eq(&self, other: &Self) -> bool {
            if self.discriminant() != other.discriminant() {
                return false;
            }

            unsafe {
            match self.discriminant() {
                DiscriminantKeyCode::BackTab => true,
                DiscriminantKeyCode::Backspace => true,
                DiscriminantKeyCode::CapsLock => true,
                DiscriminantKeyCode::Delete => true,
                DiscriminantKeyCode::Down => true,
                DiscriminantKeyCode::End => true,
                DiscriminantKeyCode::Enter => true,
                DiscriminantKeyCode::Esc => true,
                DiscriminantKeyCode::Function => self.Function == other.Function,
                DiscriminantKeyCode::Home => true,
                DiscriminantKeyCode::Insert => true,
                DiscriminantKeyCode::KeypadBegin => true,
                DiscriminantKeyCode::Left => true,
                DiscriminantKeyCode::Media => self.Media == other.Media,
                DiscriminantKeyCode::Menu => true,
                DiscriminantKeyCode::Modifier => self.Modifier == other.Modifier,
                DiscriminantKeyCode::Null => true,
                DiscriminantKeyCode::NumLock => true,
                DiscriminantKeyCode::PageDown => true,
                DiscriminantKeyCode::PageUp => true,
                DiscriminantKeyCode::Pause => true,
                DiscriminantKeyCode::PrintScreen => true,
                DiscriminantKeyCode::Right => true,
                DiscriminantKeyCode::Scalar => self.Scalar == other.Scalar,
                DiscriminantKeyCode::ScrollLock => true,
                DiscriminantKeyCode::Tab => true,
                DiscriminantKeyCode::Up => true,
            }
        }
    }
}

impl PartialOrd for KeyCode {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {
        match self.discriminant().partial_cmp(&other.discriminant()) {
            Some(core::cmp::Ordering::Equal) => {}
            not_eq => return not_eq,
        }

        unsafe {
            match self.discriminant() {
                DiscriminantKeyCode::BackTab => Some(core::cmp::Ordering::Equal),
                DiscriminantKeyCode::Backspace => Some(core::cmp::Ordering::Equal),
                DiscriminantKeyCode::CapsLock => Some(core::cmp::Ordering::Equal),
                DiscriminantKeyCode::Delete => Some(core::cmp::Ordering::Equal),
                DiscriminantKeyCode::Down => Some(core::cmp::Ordering::Equal),
                DiscriminantKeyCode::End => Some(core::cmp::Ordering::Equal),
                DiscriminantKeyCode::Enter => Some(core::cmp::Ordering::Equal),
                DiscriminantKeyCode::Esc => Some(core::cmp::Ordering::Equal),
                DiscriminantKeyCode::Function => self.Function.partial_cmp(&other.Function),
                DiscriminantKeyCode::Home => Some(core::cmp::Ordering::Equal),
                DiscriminantKeyCode::Insert => Some(core::cmp::Ordering::Equal),
                DiscriminantKeyCode::KeypadBegin => Some(core::cmp::Ordering::Equal),
                DiscriminantKeyCode::Left => Some(core::cmp::Ordering::Equal),
                DiscriminantKeyCode::Media => self.Media.partial_cmp(&other.Media),
                DiscriminantKeyCode::Menu => Some(core::cmp::Ordering::Equal),
                DiscriminantKeyCode::Modifier => self.Modifier.partial_cmp(&other.Modifier),
                DiscriminantKeyCode::Null => Some(core::cmp::Ordering::Equal),
                DiscriminantKeyCode::NumLock => Some(core::cmp::Ordering::Equal),
                DiscriminantKeyCode::PageDown => Some(core::cmp::Ordering::Equal),
                DiscriminantKeyCode::PageUp => Some(core::cmp::Ordering::Equal),
                DiscriminantKeyCode::Pause => Some(core::cmp::Ordering::Equal),
                DiscriminantKeyCode::PrintScreen => Some(core::cmp::Ordering::Equal),
                DiscriminantKeyCode::Right => Some(core::cmp::Ordering::Equal),
                DiscriminantKeyCode::Scalar => self.Scalar.partial_cmp(&other.Scalar),
                DiscriminantKeyCode::ScrollLock => Some(core::cmp::Ordering::Equal),
                DiscriminantKeyCode::Tab => Some(core::cmp::Ordering::Equal),
                DiscriminantKeyCode::Up => Some(core::cmp::Ordering::Equal),
            }
        }
    }
}

impl Ord for KeyCode {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn cmp(&self, other: &Self) -> core::cmp::Ordering {
            match self.discriminant().cmp(&other.discriminant()) {
                core::cmp::Ordering::Equal => {}
                not_eq => return not_eq,
            }

            unsafe {
            match self.discriminant() {
                DiscriminantKeyCode::BackTab => core::cmp::Ordering::Equal,
                DiscriminantKeyCode::Backspace => core::cmp::Ordering::Equal,
                DiscriminantKeyCode::CapsLock => core::cmp::Ordering::Equal,
                DiscriminantKeyCode::Delete => core::cmp::Ordering::Equal,
                DiscriminantKeyCode::Down => core::cmp::Ordering::Equal,
                DiscriminantKeyCode::End => core::cmp::Ordering::Equal,
                DiscriminantKeyCode::Enter => core::cmp::Ordering::Equal,
                DiscriminantKeyCode::Esc => core::cmp::Ordering::Equal,
                DiscriminantKeyCode::Function => self.Function.cmp(&other.Function),
                DiscriminantKeyCode::Home => core::cmp::Ordering::Equal,
                DiscriminantKeyCode::Insert => core::cmp::Ordering::Equal,
                DiscriminantKeyCode::KeypadBegin => core::cmp::Ordering::Equal,
                DiscriminantKeyCode::Left => core::cmp::Ordering::Equal,
                DiscriminantKeyCode::Media => self.Media.cmp(&other.Media),
                DiscriminantKeyCode::Menu => core::cmp::Ordering::Equal,
                DiscriminantKeyCode::Modifier => self.Modifier.cmp(&other.Modifier),
                DiscriminantKeyCode::Null => core::cmp::Ordering::Equal,
                DiscriminantKeyCode::NumLock => core::cmp::Ordering::Equal,
                DiscriminantKeyCode::PageDown => core::cmp::Ordering::Equal,
                DiscriminantKeyCode::PageUp => core::cmp::Ordering::Equal,
                DiscriminantKeyCode::Pause => core::cmp::Ordering::Equal,
                DiscriminantKeyCode::PrintScreen => core::cmp::Ordering::Equal,
                DiscriminantKeyCode::Right => core::cmp::Ordering::Equal,
                DiscriminantKeyCode::Scalar => self.Scalar.cmp(&other.Scalar),
                DiscriminantKeyCode::ScrollLock => core::cmp::Ordering::Equal,
                DiscriminantKeyCode::Tab => core::cmp::Ordering::Equal,
                DiscriminantKeyCode::Up => core::cmp::Ordering::Equal,
            }
        }
    }
}

impl Clone for KeyCode {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn clone(&self) -> Self {
        let mut answer = unsafe {
            match self.discriminant() {
                DiscriminantKeyCode::BackTab => core::mem::transmute::<
                    core::mem::MaybeUninit<KeyCode>,
                    KeyCode,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantKeyCode::Backspace => core::mem::transmute::<
                    core::mem::MaybeUninit<KeyCode>,
                    KeyCode,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantKeyCode::CapsLock => core::mem::transmute::<
                    core::mem::MaybeUninit<KeyCode>,
                    KeyCode,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantKeyCode::Delete => core::mem::transmute::<
                    core::mem::MaybeUninit<KeyCode>,
                    KeyCode,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantKeyCode::Down => core::mem::transmute::<
                    core::mem::MaybeUninit<KeyCode>,
                    KeyCode,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantKeyCode::End => core::mem::transmute::<
                    core::mem::MaybeUninit<KeyCode>,
                    KeyCode,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantKeyCode::Enter => core::mem::transmute::<
                    core::mem::MaybeUninit<KeyCode>,
                    KeyCode,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantKeyCode::Esc => core::mem::transmute::<
                    core::mem::MaybeUninit<KeyCode>,
                    KeyCode,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantKeyCode::Function => Self {
                    Function: self.Function.clone(),
                },
                DiscriminantKeyCode::Home => core::mem::transmute::<
                    core::mem::MaybeUninit<KeyCode>,
                    KeyCode,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantKeyCode::Insert => core::mem::transmute::<
                    core::mem::MaybeUninit<KeyCode>,
                    KeyCode,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantKeyCode::KeypadBegin => core::mem::transmute::<
                    core::mem::MaybeUninit<KeyCode>,
                    KeyCode,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantKeyCode::Left => core::mem::transmute::<
                    core::mem::MaybeUninit<KeyCode>,
                    KeyCode,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantKeyCode::Media => Self {
                    Media: self.Media.clone(),
                },
                DiscriminantKeyCode::Menu => core::mem::transmute::<
                    core::mem::MaybeUninit<KeyCode>,
                    KeyCode,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantKeyCode::Modifier => Self {
                    Modifier: self.Modifier.clone(),
                },
                DiscriminantKeyCode::Null => core::mem::transmute::<
                    core::mem::MaybeUninit<KeyCode>,
                    KeyCode,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantKeyCode::NumLock => core::mem::transmute::<
                    core::mem::MaybeUninit<KeyCode>,
                    KeyCode,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantKeyCode::PageDown => core::mem::transmute::<
                    core::mem::MaybeUninit<KeyCode>,
                    KeyCode,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantKeyCode::PageUp => core::mem::transmute::<
                    core::mem::MaybeUninit<KeyCode>,
                    KeyCode,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantKeyCode::Pause => core::mem::transmute::<
                    core::mem::MaybeUninit<KeyCode>,
                    KeyCode,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantKeyCode::PrintScreen => core::mem::transmute::<
                    core::mem::MaybeUninit<KeyCode>,
                    KeyCode,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantKeyCode::Right => core::mem::transmute::<
                    core::mem::MaybeUninit<KeyCode>,
                    KeyCode,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantKeyCode::Scalar => Self {
                    Scalar: self.Scalar.clone(),
                },
                DiscriminantKeyCode::ScrollLock => core::mem::transmute::<
                    core::mem::MaybeUninit<KeyCode>,
                    KeyCode,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantKeyCode::Tab => core::mem::transmute::<
                    core::mem::MaybeUninit<KeyCode>,
                    KeyCode,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantKeyCode::Up => core::mem::transmute::<
                    core::mem::MaybeUninit<KeyCode>,
                    KeyCode,
                >(core::mem::MaybeUninit::uninit()),
            }

        };

        answer.set_discriminant(self.discriminant());

        answer
    }
}

impl core::hash::Hash for KeyCode {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn hash<H: core::hash::Hasher>(&self, state: &mut H) {        match self.discriminant() {
            DiscriminantKeyCode::BackTab => DiscriminantKeyCode::BackTab.hash(state),
            DiscriminantKeyCode::Backspace => DiscriminantKeyCode::Backspace.hash(state),
            DiscriminantKeyCode::CapsLock => DiscriminantKeyCode::CapsLock.hash(state),
            DiscriminantKeyCode::Delete => DiscriminantKeyCode::Delete.hash(state),
            DiscriminantKeyCode::Down => DiscriminantKeyCode::Down.hash(state),
            DiscriminantKeyCode::End => DiscriminantKeyCode::End.hash(state),
            DiscriminantKeyCode::Enter => DiscriminantKeyCode::Enter.hash(state),
            DiscriminantKeyCode::Esc => DiscriminantKeyCode::Esc.hash(state),
            DiscriminantKeyCode::Function => unsafe {
                    DiscriminantKeyCode::Function.hash(state);
                    self.Function.hash(state);
                },
            DiscriminantKeyCode::Home => DiscriminantKeyCode::Home.hash(state),
            DiscriminantKeyCode::Insert => DiscriminantKeyCode::Insert.hash(state),
            DiscriminantKeyCode::KeypadBegin => DiscriminantKeyCode::KeypadBegin.hash(state),
            DiscriminantKeyCode::Left => DiscriminantKeyCode::Left.hash(state),
            DiscriminantKeyCode::Media => unsafe {
                    DiscriminantKeyCode::Media.hash(state);
                    self.Media.hash(state);
                },
            DiscriminantKeyCode::Menu => DiscriminantKeyCode::Menu.hash(state),
            DiscriminantKeyCode::Modifier => unsafe {
                    DiscriminantKeyCode::Modifier.hash(state);
                    self.Modifier.hash(state);
                },
            DiscriminantKeyCode::Null => DiscriminantKeyCode::Null.hash(state),
            DiscriminantKeyCode::NumLock => DiscriminantKeyCode::NumLock.hash(state),
            DiscriminantKeyCode::PageDown => DiscriminantKeyCode::PageDown.hash(state),
            DiscriminantKeyCode::PageUp => DiscriminantKeyCode::PageUp.hash(state),
            DiscriminantKeyCode::Pause => DiscriminantKeyCode::Pause.hash(state),
            DiscriminantKeyCode::PrintScreen => DiscriminantKeyCode::PrintScreen.hash(state),
            DiscriminantKeyCode::Right => DiscriminantKeyCode::Right.hash(state),
            DiscriminantKeyCode::Scalar => unsafe {
                    DiscriminantKeyCode::Scalar.hash(state);
                    self.Scalar.hash(state);
                },
            DiscriminantKeyCode::ScrollLock => DiscriminantKeyCode::ScrollLock.hash(state),
            DiscriminantKeyCode::Tab => DiscriminantKeyCode::Tab.hash(state),
            DiscriminantKeyCode::Up => DiscriminantKeyCode::Up.hash(state),
        }
    }
}

impl core::fmt::Debug for KeyCode {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str("KeyCode::")?;

        unsafe {
            match self.discriminant() {
                DiscriminantKeyCode::BackTab => f.write_str("BackTab"),
                DiscriminantKeyCode::Backspace => f.write_str("Backspace"),
                DiscriminantKeyCode::CapsLock => f.write_str("CapsLock"),
                DiscriminantKeyCode::Delete => f.write_str("Delete"),
                DiscriminantKeyCode::Down => f.write_str("Down"),
                DiscriminantKeyCode::End => f.write_str("End"),
                DiscriminantKeyCode::Enter => f.write_str("Enter"),
                DiscriminantKeyCode::Esc => f.write_str("Esc"),
                DiscriminantKeyCode::Function => f.debug_tuple("Function")
        .field(&self.Function)
        .finish(),
                DiscriminantKeyCode::Home => f.write_str("Home"),
                DiscriminantKeyCode::Insert => f.write_str("Insert"),
                DiscriminantKeyCode::KeypadBegin => f.write_str("KeypadBegin"),
                DiscriminantKeyCode::Left => f.write_str("Left"),
                DiscriminantKeyCode::Media => f.debug_tuple("Media")
        .field(&self.Media)
        .finish(),
                DiscriminantKeyCode::Menu => f.write_str("Menu"),
                DiscriminantKeyCode::Modifier => f.debug_tuple("Modifier")
        .field(&self.Modifier)
        .finish(),
                DiscriminantKeyCode::Null => f.write_str("Null"),
                DiscriminantKeyCode::NumLock => f.write_str("NumLock"),
                DiscriminantKeyCode::PageDown => f.write_str("PageDown"),
                DiscriminantKeyCode::PageUp => f.write_str("PageUp"),
                DiscriminantKeyCode::Pause => f.write_str("Pause"),
                DiscriminantKeyCode::PrintScreen => f.write_str("PrintScreen"),
                DiscriminantKeyCode::Right => f.write_str("Right"),
                DiscriminantKeyCode::Scalar => f.debug_tuple("Scalar")
        .field(&*self.Scalar)
        .finish(),
                DiscriminantKeyCode::ScrollLock => f.write_str("ScrollLock"),
                DiscriminantKeyCode::Tab => f.write_str("Tab"),
                DiscriminantKeyCode::Up => f.write_str("Up"),
            }
        }
    }
}

impl Color {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Returns which variant this tag union holds. Note that this never includes a payload!
    pub fn discriminant(&self) -> DiscriminantColor {
        unsafe {
            let bytes = core::mem::transmute::<&Self, &[u8; core::mem::size_of::<Self>()]>(self);

            core::mem::transmute::<u8, DiscriminantColor>(*bytes.as_ptr().add(0))
        }
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Internal helper
    fn set_discriminant(&mut self, discriminant: DiscriminantColor) {
        let discriminant_ptr: *mut DiscriminantColor = (self as *mut Color).cast();

        unsafe {
            *(discriminant_ptr.add(0)) = discriminant;
        }
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// A tag named Black, which has no payload.
    pub const Black: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<Color>()];

        bytes[0] = DiscriminantColor::Black as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<Color>()], Color>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the Black tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_Black(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the Black tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_Black(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// A tag named Blue, which has no payload.
    pub const Blue: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<Color>()];

        bytes[0] = DiscriminantColor::Blue as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<Color>()], Color>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the Blue tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_Blue(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the Blue tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_Blue(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// A tag named Cyan, which has no payload.
    pub const Cyan: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<Color>()];

        bytes[0] = DiscriminantColor::Cyan as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<Color>()], Color>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the Cyan tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_Cyan(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the Cyan tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_Cyan(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// A tag named DarkGray, which has no payload.
    pub const DarkGray: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<Color>()];

        bytes[0] = DiscriminantColor::DarkGray as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<Color>()], Color>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the DarkGray tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_DarkGray(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the DarkGray tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_DarkGray(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// A tag named Gray, which has no payload.
    pub const Gray: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<Color>()];

        bytes[0] = DiscriminantColor::Gray as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<Color>()], Color>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the Gray tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_Gray(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the Gray tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_Gray(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// A tag named Green, which has no payload.
    pub const Green: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<Color>()];

        bytes[0] = DiscriminantColor::Green as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<Color>()], Color>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the Green tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_Green(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the Green tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_Green(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// A tag named LightBlue, which has no payload.
    pub const LightBlue: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<Color>()];

        bytes[0] = DiscriminantColor::LightBlue as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<Color>()], Color>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the LightBlue tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_LightBlue(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the LightBlue tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_LightBlue(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// A tag named LightCyan, which has no payload.
    pub const LightCyan: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<Color>()];

        bytes[0] = DiscriminantColor::LightCyan as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<Color>()], Color>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the LightCyan tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_LightCyan(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the LightCyan tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_LightCyan(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// A tag named LightGreen, which has no payload.
    pub const LightGreen: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<Color>()];

        bytes[0] = DiscriminantColor::LightGreen as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<Color>()], Color>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the LightGreen tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_LightGreen(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the LightGreen tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_LightGreen(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// A tag named LightMagenta, which has no payload.
    pub const LightMagenta: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<Color>()];

        bytes[0] = DiscriminantColor::LightMagenta as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<Color>()], Color>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the LightMagenta tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_LightMagenta(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the LightMagenta tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_LightMagenta(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// A tag named LightRed, which has no payload.
    pub const LightRed: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<Color>()];

        bytes[0] = DiscriminantColor::LightRed as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<Color>()], Color>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the LightRed tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_LightRed(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the LightRed tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_LightRed(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// A tag named LightYellow, which has no payload.
    pub const LightYellow: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<Color>()];

        bytes[0] = DiscriminantColor::LightYellow as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<Color>()], Color>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the LightYellow tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_LightYellow(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the LightYellow tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_LightYellow(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// A tag named Magenta, which has no payload.
    pub const Magenta: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<Color>()];

        bytes[0] = DiscriminantColor::Magenta as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<Color>()], Color>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the Magenta tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_Magenta(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the Magenta tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_Magenta(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// A tag named None, which has no payload.
    pub const None: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<Color>()];

        bytes[0] = DiscriminantColor::None as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<Color>()], Color>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the None tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_None(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the None tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_None(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// A tag named Red, which has no payload.
    pub const Red: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<Color>()];

        bytes[0] = DiscriminantColor::Red as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<Color>()], Color>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the Red tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_Red(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the Red tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_Red(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// A tag named White, which has no payload.
    pub const White: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<Color>()];

        bytes[0] = DiscriminantColor::White as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<Color>()], Color>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the White tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_White(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the White tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_White(&self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// A tag named Yellow, which has no payload.
    pub const Yellow: Self = unsafe {
        let mut bytes = [0; core::mem::size_of::<Color>()];

        bytes[0] = DiscriminantColor::Yellow as u8;

        core::mem::transmute::<[u8; core::mem::size_of::<Color>()], Color>(bytes)
    };

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `into_` methods return a payload, but since the Yellow tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn into_Yellow(self) {
        ()
    }

    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    /// Other `as` methods return a payload, but since the Yellow tag
    /// has no payload, this does nothing and is only here for completeness.
    pub fn as_Yellow(&self) {
        ()
    }
}

impl Eq for Color {}

impl PartialEq for Color {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn eq(&self, other: &Self) -> bool {
            if self.discriminant() != other.discriminant() {
                return false;
            }

            unsafe {
            match self.discriminant() {
                DiscriminantColor::Black => true,
                DiscriminantColor::Blue => true,
                DiscriminantColor::Cyan => true,
                DiscriminantColor::DarkGray => true,
                DiscriminantColor::Gray => true,
                DiscriminantColor::Green => true,
                DiscriminantColor::LightBlue => true,
                DiscriminantColor::LightCyan => true,
                DiscriminantColor::LightGreen => true,
                DiscriminantColor::LightMagenta => true,
                DiscriminantColor::LightRed => true,
                DiscriminantColor::LightYellow => true,
                DiscriminantColor::Magenta => true,
                DiscriminantColor::None => true,
                DiscriminantColor::Red => true,
                DiscriminantColor::White => true,
                DiscriminantColor::Yellow => true,
            }
        }
    }
}

impl PartialOrd for Color {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {
        match self.discriminant().partial_cmp(&other.discriminant()) {
            Some(core::cmp::Ordering::Equal) => {}
            not_eq => return not_eq,
        }

        unsafe {
            match self.discriminant() {
                DiscriminantColor::Black => Some(core::cmp::Ordering::Equal),
                DiscriminantColor::Blue => Some(core::cmp::Ordering::Equal),
                DiscriminantColor::Cyan => Some(core::cmp::Ordering::Equal),
                DiscriminantColor::DarkGray => Some(core::cmp::Ordering::Equal),
                DiscriminantColor::Gray => Some(core::cmp::Ordering::Equal),
                DiscriminantColor::Green => Some(core::cmp::Ordering::Equal),
                DiscriminantColor::LightBlue => Some(core::cmp::Ordering::Equal),
                DiscriminantColor::LightCyan => Some(core::cmp::Ordering::Equal),
                DiscriminantColor::LightGreen => Some(core::cmp::Ordering::Equal),
                DiscriminantColor::LightMagenta => Some(core::cmp::Ordering::Equal),
                DiscriminantColor::LightRed => Some(core::cmp::Ordering::Equal),
                DiscriminantColor::LightYellow => Some(core::cmp::Ordering::Equal),
                DiscriminantColor::Magenta => Some(core::cmp::Ordering::Equal),
                DiscriminantColor::None => Some(core::cmp::Ordering::Equal),
                DiscriminantColor::Red => Some(core::cmp::Ordering::Equal),
                DiscriminantColor::White => Some(core::cmp::Ordering::Equal),
                DiscriminantColor::Yellow => Some(core::cmp::Ordering::Equal),
            }
        }
    }
}

impl Ord for Color {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn cmp(&self, other: &Self) -> core::cmp::Ordering {
            match self.discriminant().cmp(&other.discriminant()) {
                core::cmp::Ordering::Equal => {}
                not_eq => return not_eq,
            }

            unsafe {
            match self.discriminant() {
                DiscriminantColor::Black => core::cmp::Ordering::Equal,
                DiscriminantColor::Blue => core::cmp::Ordering::Equal,
                DiscriminantColor::Cyan => core::cmp::Ordering::Equal,
                DiscriminantColor::DarkGray => core::cmp::Ordering::Equal,
                DiscriminantColor::Gray => core::cmp::Ordering::Equal,
                DiscriminantColor::Green => core::cmp::Ordering::Equal,
                DiscriminantColor::LightBlue => core::cmp::Ordering::Equal,
                DiscriminantColor::LightCyan => core::cmp::Ordering::Equal,
                DiscriminantColor::LightGreen => core::cmp::Ordering::Equal,
                DiscriminantColor::LightMagenta => core::cmp::Ordering::Equal,
                DiscriminantColor::LightRed => core::cmp::Ordering::Equal,
                DiscriminantColor::LightYellow => core::cmp::Ordering::Equal,
                DiscriminantColor::Magenta => core::cmp::Ordering::Equal,
                DiscriminantColor::None => core::cmp::Ordering::Equal,
                DiscriminantColor::Red => core::cmp::Ordering::Equal,
                DiscriminantColor::White => core::cmp::Ordering::Equal,
                DiscriminantColor::Yellow => core::cmp::Ordering::Equal,
            }
        }
    }
}

impl Copy for Color {}

impl Clone for Color {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn clone(&self) -> Self {
        let mut answer = unsafe {
            match self.discriminant() {
                DiscriminantColor::Black => core::mem::transmute::<
                    core::mem::MaybeUninit<Color>,
                    Color,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantColor::Blue => core::mem::transmute::<
                    core::mem::MaybeUninit<Color>,
                    Color,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantColor::Cyan => core::mem::transmute::<
                    core::mem::MaybeUninit<Color>,
                    Color,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantColor::DarkGray => core::mem::transmute::<
                    core::mem::MaybeUninit<Color>,
                    Color,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantColor::Gray => core::mem::transmute::<
                    core::mem::MaybeUninit<Color>,
                    Color,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantColor::Green => core::mem::transmute::<
                    core::mem::MaybeUninit<Color>,
                    Color,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantColor::LightBlue => core::mem::transmute::<
                    core::mem::MaybeUninit<Color>,
                    Color,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantColor::LightCyan => core::mem::transmute::<
                    core::mem::MaybeUninit<Color>,
                    Color,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantColor::LightGreen => core::mem::transmute::<
                    core::mem::MaybeUninit<Color>,
                    Color,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantColor::LightMagenta => core::mem::transmute::<
                    core::mem::MaybeUninit<Color>,
                    Color,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantColor::LightRed => core::mem::transmute::<
                    core::mem::MaybeUninit<Color>,
                    Color,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantColor::LightYellow => core::mem::transmute::<
                    core::mem::MaybeUninit<Color>,
                    Color,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantColor::Magenta => core::mem::transmute::<
                    core::mem::MaybeUninit<Color>,
                    Color,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantColor::None => core::mem::transmute::<
                    core::mem::MaybeUninit<Color>,
                    Color,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantColor::Red => core::mem::transmute::<
                    core::mem::MaybeUninit<Color>,
                    Color,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantColor::White => core::mem::transmute::<
                    core::mem::MaybeUninit<Color>,
                    Color,
                >(core::mem::MaybeUninit::uninit()),
                DiscriminantColor::Yellow => core::mem::transmute::<
                    core::mem::MaybeUninit<Color>,
                    Color,
                >(core::mem::MaybeUninit::uninit()),
            }

        };

        answer.set_discriminant(self.discriminant());

        answer
    }
}

impl core::hash::Hash for Color {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn hash<H: core::hash::Hasher>(&self, state: &mut H) {        match self.discriminant() {
            DiscriminantColor::Black => DiscriminantColor::Black.hash(state),
            DiscriminantColor::Blue => DiscriminantColor::Blue.hash(state),
            DiscriminantColor::Cyan => DiscriminantColor::Cyan.hash(state),
            DiscriminantColor::DarkGray => DiscriminantColor::DarkGray.hash(state),
            DiscriminantColor::Gray => DiscriminantColor::Gray.hash(state),
            DiscriminantColor::Green => DiscriminantColor::Green.hash(state),
            DiscriminantColor::LightBlue => DiscriminantColor::LightBlue.hash(state),
            DiscriminantColor::LightCyan => DiscriminantColor::LightCyan.hash(state),
            DiscriminantColor::LightGreen => DiscriminantColor::LightGreen.hash(state),
            DiscriminantColor::LightMagenta => DiscriminantColor::LightMagenta.hash(state),
            DiscriminantColor::LightRed => DiscriminantColor::LightRed.hash(state),
            DiscriminantColor::LightYellow => DiscriminantColor::LightYellow.hash(state),
            DiscriminantColor::Magenta => DiscriminantColor::Magenta.hash(state),
            DiscriminantColor::None => DiscriminantColor::None.hash(state),
            DiscriminantColor::Red => DiscriminantColor::Red.hash(state),
            DiscriminantColor::White => DiscriminantColor::White.hash(state),
            DiscriminantColor::Yellow => DiscriminantColor::Yellow.hash(state),
        }
    }
}

impl core::fmt::Debug for Color {
    #[cfg(any(
        target_arch = "arm",
        target_arch = "aarch64",
        target_arch = "wasm32",
        target_arch = "x86",
        target_arch = "x86_64"
    ))]
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        f.write_str("Color::")?;

        unsafe {
            match self.discriminant() {
                DiscriminantColor::Black => f.write_str("Black"),
                DiscriminantColor::Blue => f.write_str("Blue"),
                DiscriminantColor::Cyan => f.write_str("Cyan"),
                DiscriminantColor::DarkGray => f.write_str("DarkGray"),
                DiscriminantColor::Gray => f.write_str("Gray"),
                DiscriminantColor::Green => f.write_str("Green"),
                DiscriminantColor::LightBlue => f.write_str("LightBlue"),
                DiscriminantColor::LightCyan => f.write_str("LightCyan"),
                DiscriminantColor::LightGreen => f.write_str("LightGreen"),
                DiscriminantColor::LightMagenta => f.write_str("LightMagenta"),
                DiscriminantColor::LightRed => f.write_str("LightRed"),
                DiscriminantColor::LightYellow => f.write_str("LightYellow"),
                DiscriminantColor::Magenta => f.write_str("Magenta"),
                DiscriminantColor::None => f.write_str("None"),
                DiscriminantColor::Red => f.write_str("Red"),
                DiscriminantColor::White => f.write_str("White"),
                DiscriminantColor::Yellow => f.write_str("Yellow"),
            }
        }
    }
}
