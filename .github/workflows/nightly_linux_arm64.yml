on:
#  pull_request:
  workflow_dispatch:
  schedule:
    - cron: "0 9 * * *"

name: Nightly Release Linux arm64/aarch64

# Do not add permissions here! Configure them at the job level!
permissions: {}

jobs:
  build:
    name: build and package nightly release
    runs-on: [ubuntu-22.04-arm]
    timeout-minutes: 110

    steps:
      - uses: actions/checkout@v4

      - uses: mlugg/setup-zig@8d6198c65fb0feaa111df26e6b467fea8345e46f # 2.0.5
        with:
          version: 0.13.0

      - name: install apt dependencies
        run: |
          sudo apt -y install wget git
          sudo apt -y install libunwind-dev pkg-config zlib1g-dev
          sudo apt -y install unzip # for www/build.sh
          sudo apt -y install lsb-release software-properties-common gnupg # for llvm

      - run: zig version

      - name: install llvm
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 18
          sudo rm -rf /usr/bin/clang
          sudo ln -s /usr/bin/clang-18 /usr/bin/clang
          sudo ln -s /usr/bin/lld-18 /usr/bin/ld.lld
          sudo apt -y install libpolly-18-dev # required by llvm-sys crate

      - name: create version.txt
        run: ./ci/write_version.sh

      - name: build release with lto
        run: cargo build --profile=release-with-lto --locked --bin roc --bin roc_language_server

      - name: get commit SHA
        run: echo "SHA=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV

      - name: get date
        run: echo "DATE=$(date "+%Y-%m-%d")" >> $GITHUB_ENV

      - name: build file name
        env:
          DATE: ${{ env.DATE }}
          SHA: ${{ env.SHA }}
        run: echo "RELEASE_FOLDER_NAME=roc_nightly-linux_arm64-$DATE-$SHA" >> $GITHUB_ENV

      # this makes the roc binary a lot smaller
      - name: strip debug info
        run: strip ./target/release-with-lto/roc

      - name: Make nightly release tar archive
        run: ./ci/package_release.sh ${{ env.RELEASE_FOLDER_NAME }}

      - name: Upload roc nightly tar. Actually uploading to github releases has to be done manually.
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RELEASE_FOLDER_NAME }}.tar.gz
          path: ${{ env.RELEASE_FOLDER_NAME }}.tar.gz
          retention-days: 4
