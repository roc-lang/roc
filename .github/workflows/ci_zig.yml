on:
  workflow_call:

name: CI New Compiler

# Do not add permissions here! Configure them at the job level!
permissions: {}

jobs:
  check-zig:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # ratchet:actions/checkout@v4
      - uses: mlugg/setup-zig@475c97be87a204e6c57fe851f970bd02005a70f0 # ratchet:mlugg/setup-zig@v2
        with:
          version: 0.14.1
          # Do not cache the zig cache.
          # Just cache the zig executable.
          # Zig cache corrupts sometimes and uses tons of space.
          use-cache: false

      - name: zig lints
        run: |
          ./ci/zig_lints.sh

          zig build check-fmt

        # We run zig check with tracy enabled.
        # This ensure it compiles and doesn't go stale.
      - name: Checkout Tracy
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # ratchet:actions/checkout@v4
        with:
          path: tracy
          repository: wolfpld/tracy
          ref: v0.11.0

      - name: zig check
        run: |
          # -Dllvm incurs a costly download step, leave that for later.
          # Just the do super fast check step for now.
          zig build -Dno-bin -Dfuzz -Dtracy=./tracy

  zig-tests:
    needs: check-zig
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, macos-15, ubuntu-22.04, ubuntu-24.04-arm, windows-2022, windows-2025, windows-11-arm] # macos-13 uses x64, macos-15 uses arm64
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # ratchet:actions/checkout@v4
      - uses: mlugg/setup-zig@475c97be87a204e6c57fe851f970bd02005a70f0 # ratchet:mlugg/setup-zig@v2
        with:
          version: 0.14.1
          # Do not cache the zig cache.
          # Just cache the zig executable.
          # Zig cache corrupts sometimes and uses tons of space.
          use-cache: false
      - if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
        uses: cachix/install-nix-action@02a151ada4993995686f9ed4f1be7cfbb229e56f # ratchet:cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-25.05

      - name: build roc
        run: |
          zig build -Dllvm -Dfuzz -Dsystem-afl=false

      - name: roc executable minimal check (Unix)
        if: runner.os != 'Windows'
        run: |
          ./zig-out/bin/roc -h | grep -q "Usage:"

      - name: roc executable minimal check (Windows)
        if: runner.os == 'Windows'
        run: |
          zig-out\bin\roc.exe -h | findstr "Usage:"

      - name: zig snapshot tests
        run: zig build snapshot -- --debug

      - name: zig tests
        run: |
          zig build test -Dllvm -Dfuzz -Dsystem-afl=false

      - name: Check for snapshot changes
        run: |
          git diff --exit-code src/snapshots || {
            echo ""
            echo ""
            echo "OOPS! It looks like the snapshots in 'src/snapshots' have changed.";
            echo "Please run 'zig build snapshot' locally, review the updates, and commit the changes.";
            echo "Hereâ€™s what changed:";
            echo ""
            git diff src/snapshots;
            exit 1;
          }

      - name: check snapshots with valgrind (ubuntu)
        # Sadly, with zig 0.14.1, this had to be disabled on arm.
        # Valgrind as of 3.25.1 does not support some arm instructions zig generates.
        # So valgrind only works happily on x86_64 linux.
        # We can re-evaluate as new version of zig/valgrind come out.
        if: ${{ matrix.os == 'ubuntu-22.04' }}
        run: |
          sudo apt install -y valgrind
          valgrind --version
          valgrind --leak-check=full --error-exitcode=1 --errors-for-leak-kinds=definite,possible ./zig-out/bin/snapshot --debug

      - name: check if statically linked (ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          file ./zig-out/bin/roc | grep "statically linked"

      - name: check if statically linked (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          otool_out="$(otool -L ./zig-out/bin/roc)"
          num_lines=$(echo "$otool_out" | wc -l)
          if [ "$num_lines" -ne 2 ]; then
            echo "$otool_out"
            echo "Looks like you added a new dynamic dependency to the Roc executable, we want Roc to be super easy to install, so libSystem should be the only dynamic dependency."
            exit 1
          fi

      - name: check if statically linked (Windows)
        if: startsWith(matrix.os, 'windows')
        run: |
          $imports = (Get-Command zig-out\bin\roc.exe).FileVersionInfo.ImportCharacterSet
          if ($imports) {
              echo "Looks like the executable has dynamic dependencies. We want Roc to be super easy to install, so it should be statically linked."
              echo "Dynamic dependencies found:"
              $imports | ForEach-Object { echo "  $_" }
              exit 1
          }

      - name: Test inside nix too
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
        run: |
          git clean -fdx
          git reset --hard HEAD
          nix develop ./src/flake.nix -c zig build snapshot && zig build test

  zig-cross-compile:
    needs: check-zig
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        target:
          - aarch64-linux-musl
          - aarch64-macos-none
          - aarch64-windows-gnu
          - arm-linux-musleabihf
          - x86-linux-musl
          - x86_64-linux-musl
          - x86_64-macos-none
          - x86_64-windows-gnu

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # ratchet:actions/checkout@v4
      - uses: mlugg/setup-zig@475c97be87a204e6c57fe851f970bd02005a70f0 # ratchet:mlugg/setup-zig@v2
        with:
          version: 0.14.1
          # Do not cache the zig cache.
          # Just cache the zig executable.
          # Zig cache corrupts sometimes and uses tons of space.
          use-cache: false

      - name: cross compile with llvm
        run: |
          ./ci/retry_flaky.sh zig build -Dtarget=${{ matrix.target }} -Dllvm
